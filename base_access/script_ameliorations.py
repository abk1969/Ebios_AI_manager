#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script d'am√©liorations EBIOS AI Manager
Impl√©mentation des corrections prioritaires bas√©es sur l'analyse du cas d'√©tude BioTechVac
"""

import sqlite3
import json
import os
from pathlib import Path
from typing import Dict, List, Any

class EbiosAIImprover:
    """Classe pour impl√©menter les am√©liorations de l'application EBIOS AI Manager"""
    
    def __init__(self, db_path: str = "EBIOS-RM V1.5 (1)_converted.db"):
        self.db_path = db_path
        self.improvements = []
        self.errors = []
        
    def analyze_data_integrity(self) -> Dict[str, Any]:
        """Analyser l'int√©grit√© des donn√©es du cas d'√©tude"""
        print("üîç ANALYSE DE L'INT√âGRIT√â DES DONN√âES")
        print("=" * 50)
        
        integrity_report = {
            "missing_references": [],
            "truncated_data": [],
            "inconsistent_links": [],
            "orphaned_records": []
        }
        
        try:
            conn = sqlite3.connect(self.db_path)
            
            # 1. V√©rifier les r√©f√©rences manquantes entre ateliers
            print("\n1. V√©rification des r√©f√©rences inter-ateliers...")
            integrity_report["missing_references"] = self._check_missing_references(conn)
            
            # 2. D√©tecter les donn√©es tronqu√©es
            print("\n2. D√©tection des donn√©es tronqu√©es...")
            integrity_report["truncated_data"] = self._check_truncated_data(conn)
            
            # 3. V√©rifier la coh√©rence des liens
            print("\n3. V√©rification de la coh√©rence des liens...")
            integrity_report["inconsistent_links"] = self._check_inconsistent_links(conn)
            
            # 4. Identifier les enregistrements orphelins
            print("\n4. Identification des enregistrements orphelins...")
            integrity_report["orphaned_records"] = self._check_orphaned_records(conn)
            
            conn.close()
            
        except Exception as e:
            self.errors.append(f"Erreur lors de l'analyse d'int√©grit√©: {e}")
            
        return integrity_report
    
    def _check_missing_references(self, conn: sqlite3.Connection) -> List[Dict[str, str]]:
        """V√©rifier les r√©f√©rences manquantes entre tables"""
        missing_refs = []
        
        # V√©rifier "Prestataire informatique" dans les parties prenantes
        cursor = conn.execute("SELECT DISTINCT [Partie Prenante] FROM ERM_CheminAttaque WHERE [Partie Prenante] IS NOT NULL")
        parties_in_chemins = [row[0] for row in cursor.fetchall()]
        
        cursor = conn.execute("SELECT [Partie Prenante] FROM ERM_PartiePrenante")
        parties_in_table = [row[0] for row in cursor.fetchall()]
        
        for partie in parties_in_chemins:
            if partie and partie not in parties_in_table:
                missing_refs.append({
                    "type": "Partie Prenante manquante",
                    "table_source": "ERM_CheminAttaque",
                    "table_cible": "ERM_PartiePrenante",
                    "valeur_manquante": partie,
                    "impact": "CRITIQUE - Emp√™che la coh√©rence Atelier 4"
                })
                print(f"   ‚ùå Partie prenante manquante: {partie}")
        
        return missing_refs
    
    def _check_truncated_data(self, conn: sqlite3.Connection) -> List[Dict[str, str]]:
        """D√©tecter les donn√©es probablement tronqu√©es"""
        truncated_data = []
        
        # V√©rifier les descriptions des √©v√©nements redout√©s
        cursor = conn.execute("SELECT [Valeur Metier], [Evenement Redoute] FROM ERM_EvenementRedoute")
        for row in cursor.fetchall():
            valeur_metier, evenement = row
            if evenement and (len(evenement) > 80 and not evenement.endswith('.')):
                truncated_data.append({
                    "type": "√âv√©nement redout√© potentiellement tronqu√©",
                    "table": "ERM_EvenementRedoute",
                    "valeur_metier": valeur_metier,
                    "contenu": evenement[:50] + "...",
                    "impact": "CRITIQUE - Atelier 3 compromis"
                })
                print(f"   ‚ö†Ô∏è √âv√©nement potentiellement tronqu√©: {evenement[:50]}...")
        
        # V√©rifier les impacts
        cursor = conn.execute("SELECT [Valeur Metier], [Evenement Redoute], Impacts FROM ERM_EvenementRedouteImpact")
        for row in cursor.fetchall():
            valeur_metier, evenement, impact = row
            if impact and (len(impact) > 50 and not impact.endswith('.') and not impact.endswith('!')):
                truncated_data.append({
                    "type": "Impact potentiellement tronqu√©",
                    "table": "ERM_EvenementRedouteImpact",
                    "valeur_metier": valeur_metier,
                    "evenement": evenement,
                    "contenu": impact[:50] + "...",
                    "impact": "MAJEUR - Description des impacts incompl√®te"
                })
                print(f"   ‚ö†Ô∏è Impact potentiellement tronqu√©: {impact[:50]}...")
        
        return truncated_data
    
    def _check_inconsistent_links(self, conn: sqlite3.Connection) -> List[Dict[str, str]]:
        """V√©rifier la coh√©rence des liens entre objets"""
        inconsistent_links = []
        
        # V√©rifier coh√©rence des sc√©narios de risque
        cursor = conn.execute("""
            SELECT [Id Scenario Risque], [Source Risque], [Objectif Vise], [Valeur Metier]
            FROM ERM_ScenarioRisque
        """)
        
        for row in cursor.fetchall():
            scenario_id, source, objectif, valeur_metier = row
            
            # V√©rifier que la source existe
            source_cursor = conn.execute("SELECT COUNT(*) FROM ERM_SourceRisque WHERE [Source de Risque] = ?", (source,))
            if source_cursor.fetchone()[0] == 0:
                inconsistent_links.append({
                    "type": "Source de risque inexistante dans sc√©nario",
                    "scenario_id": scenario_id,
                    "source_manquante": source,
                    "impact": "CRITIQUE - Sc√©nario de risque incoh√©rent"
                })
                print(f"   ‚ùå Source manquante dans sc√©nario {scenario_id}: {source}")
        
        return inconsistent_links
    
    def _check_orphaned_records(self, conn: sqlite3.Connection) -> List[Dict[str, str]]:
        """Identifier les enregistrements orphelins"""
        orphaned_records = []
        
        # V√©rifier les mesures de s√©curit√© sans sc√©narios li√©s
        cursor = conn.execute("""
            SELECT [Mesure Securite]
            FROM ERM_PlanSecurite 
            WHERE [Mesure Securite] NOT IN (
                SELECT [Mesure Securite] FROM ERM_PlanSecuriteScenario
            )
        """)
        
        for row in cursor.fetchall():
            mesure = row[0]
            orphaned_records.append({
                "type": "Mesure de s√©curit√© orpheline",
                "table": "ERM_PlanSecurite",
                "enregistrement": mesure,
                "impact": "MINEUR - Mesure non reli√©e aux sc√©narios"
            })
            print(f"   ‚ö†Ô∏è Mesure orpheline: {mesure}")
        
        return orphaned_records
    
    def generate_recommendations(self, integrity_report: Dict[str, Any]) -> Dict[str, Any]:
        """G√©n√©rer des recommandations d'am√©lioration"""
        print("\nüîß G√âN√âRATION DES RECOMMANDATIONS")
        print("=" * 40)
        
        recommendations = {
            "priority_1": [],
            "priority_2": [],
            "priority_3": []
        }
        
        # Priorit√© 1 - Corrections critiques
        if integrity_report["missing_references"]:
            recommendations["priority_1"].append({
                "title": "Corriger les r√©f√©rences manquantes",
                "description": "Ajouter les parties prenantes manquantes",
                "action": "ADD_MISSING_REFERENCES",
                "urgency": "IMM√âDIATE"
            })
        
        return recommendations
    
    def export_plan(self, recommendations: Dict[str, Any]) -> str:
        """Exporter le plan d'am√©lioration"""
        plan = {
            "version": "1.0",
            "case_study": "BioTechVac",
            "recommendations": recommendations
        }
        
        output_file = "plan_amelioration.json"
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(plan, f, indent=2, ensure_ascii=False)
        
        return output_file
    
    def run_analysis(self):
        """Ex√©cuter l'analyse compl√®te"""
        print("üöÄ ANALYSE EBIOS AI MANAGER")
        print("=" * 40)
        
        # Analyser l'int√©grit√©
        integrity_report = self.analyze_data_integrity()
        
        # G√©n√©rer les recommandations
        recommendations = self.generate_recommendations(integrity_report)
        
        # Exporter le plan
        plan_file = self.export_plan(recommendations)
        
        print(f"\n‚úÖ Analyse termin√©e!")
        print(f"üìÑ Plan export√©: {plan_file}")
        
        return {
            "integrity_report": integrity_report,
            "recommendations": recommendations,
            "plan_file": plan_file
        }

def main():
    """Fonction principale"""
    print("üõ†Ô∏è EBIOS AI MANAGER - ANALYSEUR")
    
    # V√©rifier la base
    db_path = "EBIOS-RM V1.5 (1)_converted.db"
    if not Path(db_path).exists():
        print(f"‚ùå Base non trouv√©e: {db_path}")
        return
    
    # Lancer l'analyse
    improver = EbiosAIImprover(db_path)
    result = improver.run_analysis()
    
    print("üéâ Termin√©!")

if __name__ == "__main__":
    main() 