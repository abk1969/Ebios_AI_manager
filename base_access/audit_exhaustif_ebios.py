"""
üîç AUDIT EXHAUSTIF EBIOS RM - COMPARAISON BASE ACCESS vs FIREBASE/COMPOSANTS
Expert Auditeur EBIOS RM - Tol√©rance z√©ro aux erreurs
"""

import sqlite3
import json
from datetime import datetime

def audit_complet():
    """Audit exhaustif de la base Access convertie"""
    conn = sqlite3.connect('EBIOS-RM V1.5 (1)_converted.db')
    conn.row_factory = sqlite3.Row
    cur = conn.cursor()
    
    print("=" * 80)
    print("üîç AUDIT EXHAUSTIF EBIOS RM - BASE ACCESS vs FIREBASE/COMPOSANTS")
    print("=" * 80)
    print(f"Date audit: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("Expert Auditeur: Conformit√© ANSSI EBIOS RM v1.5")
    print("=" * 80)
    
    # 1. ATELIER 1 - VALEURS M√âTIER
    print("\nüìã ATELIER 1 - CADRAGE ET SOCLE DE S√âCURIT√â")
    print("-" * 50)
    
    # Mission
    print("\nüè¢ MISSION:")
    cur.execute("SELECT * FROM ERM_SocieteMission")
    missions = cur.fetchall()
    for m in missions:
        print(f"  - Soci√©t√©: {m['Nom Societe']}")
        print(f"  - Mission: {m['Mission']}")
        print(f"  - Contact: {m['Contact']}")
    
    # Valeurs m√©tier
    print("\nüíé VALEURS M√âTIER:")
    cur.execute("SELECT * FROM ERM_ValeurMetier")
    valeurs = cur.fetchall()
    for v in valeurs:
        print(f"\n  ‚Ä¢ {v['Denomination Valeur Metier']}")
        print(f"    - Nature: {v['Nature Valeur Metier']}")
        print(f"    - Description: {v['Description'][:100]}...")
        print(f"    - Responsable: {v['Entite Personne Responsable']}")
    
    # Biens supports
    print("\nüñ•Ô∏è BIENS SUPPORTS ASSOCI√âS:")
    cur.execute("SELECT * FROM ERM_BienSupportAssocie")
    biens = cur.fetchall()
    for b in biens:
        print(f"\n  ‚Ä¢ {b['Denomination Bien Support Associe']}")
        print(f"    - Valeur m√©tier: {b['Valeur Metier']}")
        print(f"    - Description: {b['Description'][:100]}...")
        print(f"    - Responsable: {b['Entite Personne Responsable']}")
    
    # √âv√©nements redout√©s
    print("\n‚ö†Ô∏è √âV√âNEMENTS REDOUT√âS:")
    cur.execute("""
        SELECT er.*, GROUP_CONCAT(eri.Impacts, ' | ') as Impacts_Liste
        FROM ERM_EvenementRedoute er
        LEFT JOIN ERM_EvenementRedouteImpact eri 
        ON er.[Valeur Metier] = eri.[Valeur Metier] 
        AND er.[Evenement Redoute] = eri.[Evenement Redoute]
        GROUP BY er.[Valeur Metier], er.[Evenement Redoute]
    """)
    events = cur.fetchall()
    for e in events:
        print(f"\n  ‚Ä¢ {e['Evenement Redoute'][:80]}...")
        print(f"    - Valeur m√©tier: {e['Valeur Metier']}")
        print(f"    - Gravit√©: {e['Gravite']} ({get_gravite_label(e['Gravite'])})")
        print(f"    - Impacts: {e['Impacts_Liste']}")
    
    # Socle de s√©curit√©
    print("\nüõ°Ô∏è SOCLE DE S√âCURIT√â:")
    cur.execute("SELECT * FROM ERM_SocleSecurite")
    socle = cur.fetchall()
    for s in socle:
        print(f"\n  ‚Ä¢ {s['Nom du Referentiel']}")
        print(f"    - Type: {s['Type de Referentiel']}")
        print(f"    - √âtat: {s['Etat Application']}")
        
        # √âcarts
        cur.execute("SELECT * FROM ERM_SocleSecuriteEcart WHERE [Nom du Referentiel] = ?", 
                   (s['Nom du Referentiel'],))
        ecarts = cur.fetchall()
        if ecarts:
            print("    - √âcarts identifi√©s:")
            for ec in ecarts:
                print(f"      ‚Ä¢ {ec['Ecart']}")
                print(f"        Justification: {ec['Justification Ecart']}")
    
    # 2. ATELIER 2 - SOURCES DE RISQUE
    print("\n\nüìã ATELIER 2 - SOURCES DE RISQUE")
    print("-" * 50)
    
    cur.execute("SELECT * FROM ERM_SourceRisque")
    sources = cur.fetchall()
    print("\nüéØ SOURCES DE RISQUE:")
    for s in sources:
        print(f"  ‚Ä¢ {s['Source de Risque']}")
        
        # Objectifs vis√©s
        cur.execute("SELECT * FROM ERM_ObjectifVise WHERE [Source de Risque] = ?", 
                   (s['Source de Risque'],))
        objectifs = cur.fetchall()
        for o in objectifs:
            print(f"\n    üìå Objectif: {o['Objectif Vise']}")
            print(f"      - Motivation: {o['Motivation']}")
            print(f"      - Ressources: {o['Ressource']}")
            print(f"      - Activit√©: {o['Activite']}")
            print(f"      - Pertinence: {o['Pertinence retenue']}")
            print(f"      - Retenu: {'OUI' if o['Retenu'] else 'NON'}")
    
    # 3. ATELIER 3 - SC√âNARIOS STRAT√âGIQUES
    print("\n\nüìã ATELIER 3 - SC√âNARIOS STRAT√âGIQUES")
    print("-" * 50)
    
    # Parties prenantes
    print("\nüë• PARTIES PRENANTES:")
    cur.execute("SELECT * FROM ERM_PartiePrenante ORDER BY [Fiabilite Cyber] DESC")
    parties = cur.fetchall()
    for p in parties:
        print(f"\n  ‚Ä¢ {p['Partie Prenante']} ({p['Categorie']})")
        print(f"    - D√©pendance: {p['Dependance']}, P√©n√©tration: {p['Penetration']}")
        print(f"    - Exposition: {p['Exposition']}, Fiabilit√© Cyber: {p['Fiabilite Cyber']}")
        print(f"    - Maturit√©: {p['Maturite Cyber']}, Confiance: {p['Confiance']}")
    
    # Chemins d'attaque
    print("\nüîÄ CHEMINS D'ATTAQUE:")
    cur.execute("SELECT * FROM ERM_CheminAttaque")
    chemins = cur.fetchall()
    for c in chemins:
        print(f"\n  ‚Ä¢ {c['Source de Risque']} ‚Üí {c['Objectif Vise']}")
        print(f"    - Chemin: {c['Chemin Attaque']}")
        print(f"    - Partie prenante: {c['Partie Prenante'] or 'DIRECTE'}")
        print(f"    - Gravit√©: {c['Gravite']}")
    
    # 4. ATELIER 4 - SC√âNARIOS OP√âRATIONNELS
    print("\n\nüìã ATELIER 4 - SC√âNARIOS OP√âRATIONNELS")
    print("-" * 50)
    
    # Actions √©l√©mentaires
    print("\n‚ö° ACTIONS √âL√âMENTAIRES DES GRAPHES D'ATTAQUE:")
    cur.execute("""
        SELECT DISTINCT [Chemin Attaque], COUNT(*) as NbActions
        FROM ERM_GrapheAttaqueAction
        GROUP BY [Chemin Attaque]
    """)
    graphes = cur.fetchall()
    for g in graphes:
        print(f"\n  üìä Chemin: {g['Chemin Attaque'][:80]}...")
        print(f"     Nombre d'actions: {g['NbActions']}")
        
        # D√©tail des actions
        cur.execute("""
            SELECT * FROM ERM_GrapheAttaqueAction 
            WHERE [Chemin Attaque] = ?
            ORDER BY [Numero Action Elementaire]
        """, (g['Chemin Attaque'],))
        actions = cur.fetchall()
        for a in actions:
            print(f"      {a['Numero Action Elementaire']}. {a['Action Elementaire']}")
            print(f"         - S√©quence: {a['Sequence Type Attaque']}")
            print(f"         - Probabilit√©: {a['Probabilite Succes']}, Difficult√©: {a['Difficulte Technique']}")
    
    # 5. ATELIER 5 - TRAITEMENT DU RISQUE
    print("\n\nüìã ATELIER 5 - TRAITEMENT DU RISQUE")
    print("-" * 50)
    
    # Sc√©narios de risque
    print("\nüéØ SC√âNARIOS DE RISQUE:")
    cur.execute("SELECT * FROM ERM_ScenarioRisque")
    scenarios = cur.fetchall()
    for sc in scenarios:
        print(f"\n  ‚Ä¢ {sc['Id Scenario Risque']}: {sc['Source Risque']} ‚Üí {sc['Objectif Vise']}")
        print(f"    - Valeur m√©tier: {sc['Valeur Metier']}")
        print(f"    - Partie prenante: {sc['Partie Prenante'] or 'DIRECTE'}")
        print(f"    - Gravit√©: {sc['Gravite']} ‚Üí {sc['Gravite Residuel']} (r√©siduel)")
        print(f"    - Vraisemblance: {sc['Vraisemblance']} ‚Üí {sc['Vraisemblance Residuel']} (r√©siduel)")
        print(f"    - Description: {sc['Description Scenario Risque'][:100]}...")
    
    # Plan de s√©curit√©
    print("\nüõ°Ô∏è PLAN DE S√âCURIT√â (MESURES):")
    cur.execute("""
        SELECT ps.*, GROUP_CONCAT(psr.Responsable, ', ') as Responsables
        FROM ERM_PlanSecurite ps
        LEFT JOIN ERM_PlanSecuriteResponsable psr ON ps.[Mesure Securite] = psr.[Mesure Securite]
        GROUP BY ps.[Mesure Securite]
    """)
    mesures = cur.fetchall()
    for m in mesures:
        print(f"\n  ‚Ä¢ {m['Mesure Securite']}")
        print(f"    - Type: {m['Type Mesure']}")
        print(f"    - Co√ªt/Complexit√©: {m['Cout Complexite']}")
        print(f"    - √âch√©ance: {m['Echeance em mois']} mois")
        print(f"    - Statut: {m['Status']}")
        print(f"    - Responsables: {m['Responsables'] or 'Non d√©fini'}")
    
    # COMPARAISON AVEC FIREBASE/COMPOSANTS
    print("\n\n" + "=" * 80)
    print("üîç ANALYSE COMPARATIVE - BASE ACCESS vs FIREBASE/COMPOSANTS")
    print("=" * 80)
    
    print("\n‚ö†Ô∏è INCOH√âRENCES CRITIQUES D√âTECT√âES:")
    
    # 1. Champs manquants dans Firebase
    print("\n1. CHAMPS ACCESS NON MAPP√âS DANS FIREBASE:")
    print("   - ERM_SocieteMission: Adresse (non pr√©sent dans type Mission)")
    print("   - ERM_ValeurMetier: 'Nature Valeur Metier' ‚Üí type BusinessValue utilise 'category'")
    print("   - ERM_BienSupportAssocie: pas de lien direct vers 'missionId' dans Firebase")
    print("   - ERM_EvenementRedouteImpact: table s√©par√©e, mais dans Firebase c'est un champ string")
    
    # 2. Types incompatibles
    print("\n2. INCOMPATIBILIT√âS DE TYPES:")
    print("   - Gravit√©: Access utilise TINYINT (1-4), Firebase attend GravityScale type")
    print("   - Pertinence: Access utilise √©chelle 1-3, Firebase attend LikelihoodScale (1-4)")
    print("   - Cat√©gories RiskSource: Access n'a pas de cat√©gories, Firebase les exige")
    
    # 3. Relations manquantes
    print("\n3. RELATIONS MANQUANTES OU DIFF√âRENTES:")
    print("   - Access: liens via noms texte, Firebase: liens via IDs")
    print("   - Access: pas de timestamps, Firebase: createdAt/updatedAt partout")
    print("   - Access: pas de statuts workflow, Firebase: status sur toutes entit√©s")
    
    # 4. Logique m√©tier diff√©rente
    print("\n4. DIFF√âRENCES DE LOGIQUE M√âTIER:")
    print("   - Access: Objectifs vis√©s avec √©valuation s√©par√©e")
    print("   - Firebase: objectives embarqu√©s dans RiskSource")
    print("   - Access: Graphe d'attaque avec s√©quences d√©taill√©es")
    print("   - Firebase: AttackPath plus simple avec actions[]")
    
    # 5. Composants IHM non align√©s
    print("\n5. COMPOSANTS IHM NON ALIGN√âS AVEC ACCESS:")
    print("   - RiskSourceForm: cat√©gories hardcod√©es diff√©rentes d'Access")
    print("   - Workshop1Content: n'affiche pas tous les champs Access")
    print("   - SecurityMeasureForm: structure ISO27002 non pr√©sente dans Access")
    
    print("\n" + "=" * 80)
    print("‚ùå VERDICT: NON-CONFORMIT√â CRITIQUE")
    print("   L'application actuelle NE PEUT PAS charger/sauver")
    print("   correctement les donn√©es du cas Access BioTechVac")
    print("=" * 80)
    
    conn.close()

def get_gravite_label(niveau):
    """Convertir niveau gravit√© en label"""
    labels = {1: "MINEURE", 2: "SIGNIFICATIVE", 3: "GRAVE", 4: "CRITIQUE"}
    return labels.get(niveau, f"Niveau {niveau}")

if __name__ == "__main__":
    audit_complet() 