/**
 * ü§ñ G√âN√âRATEUR AUTOMATIQUE DE MISSIONS EBIOS RM - VERSION SIMPLIFI√âE
 * Interface simplifi√©e pour cr√©er des missions compl√®tes √† partir du contexte m√©tier
 */

import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { AlertCircle, Zap, FileText, Download, CheckCircle } from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import AutoMissionGeneratorService, { MissionContext as ServiceMissionContext } from '@/services/ai/AutoMissionGeneratorService';

interface MissionContext {
  organizationName: string;
  sector: string;
  organizationSize: string;
  siComponents: string;
  criticalProcesses: string;
  regulations: string;
  specificRequirements: string;
}

interface GenerationProgress {
  step: string;
  progress: number;
  isComplete: boolean;
  missionId?: string;
  reports?: string[];
}

const SimpleAutoMissionGenerator: React.FC = () => {
  const [context, setContext] = useState<MissionContext>({
    organizationName: '',
    sector: '',
    organizationSize: '',
    siComponents: '',
    criticalProcesses: '',
    regulations: '',
    specificRequirements: ''
  });

  const [isGenerating, setIsGenerating] = useState(false);
  const [generationProgress, setGenerationProgress] = useState<GenerationProgress>({
    step: '',
    progress: 0,
    isComplete: false
  });

  const generateMission = async () => {
    setIsGenerating(true);
    setGenerationProgress({ step: 'Initialisation...', progress: 0, isComplete: false });

    try {
      // Simulation du processus de g√©n√©ration
      const steps = [
        'Analyse du contexte m√©tier...',
        'G√©n√©ration des biens essentiels...',
        'Identification des sources de risque...',
        'Cr√©ation des sc√©narios strat√©giques...',
        'D√©veloppement des sc√©narios op√©rationnels...',
        'D√©finition des mesures de s√©curit√©...',
        'G√©n√©ration des rapports...',
        'Finalisation de la mission...'
      ];

      for (let i = 0; i < steps.length; i++) {
        setGenerationProgress({
          step: steps[i],
          progress: ((i + 1) / steps.length) * 100,
          isComplete: false
        });
        
        // Simulation du temps de traitement
        await new Promise(resolve => setTimeout(resolve, 500 + (Date.now() % 500)));
      }

      // Conversion du contexte pour le service
      const serviceContext: ServiceMissionContext = {
        organizationName: context.organizationName,
        sector: context.sector,
        organizationSize: context.organizationSize,
        geographicScope: 'National',
        criticalityLevel: 'high',
        siComponents: context.siComponents.split(',').map(s => s.trim()).filter(s => s),
        mainTechnologies: ['Microsoft 365 / Office 365'],
        externalInterfaces: [],
        sensitiveData: ['Donn√©es personnelles'],
        criticalProcesses: context.criticalProcesses.split('\n').map(s => s.trim()).filter(s => s),
        stakeholders: ['Clients', 'Employ√©s'],
        regulations: context.regulations.split(',').map(s => s.trim()).filter(s => s),
        financialStakes: 'Standard',
        securityMaturity: 'defined',
        pastIncidents: '',
        regulatoryConstraints: context.regulations.split(',').map(s => s.trim()).filter(s => s),
        securityBudget: '100k-500k',
        missionObjectives: ['√âvaluation des risques cyber'],
        timeframe: '3-months',
        specificRequirements: context.specificRequirements
      };

      // Appel au service de g√©n√©ration
      const service = AutoMissionGeneratorService.getInstance();
      const result = await service.generateMission(serviceContext);

      setGenerationProgress({
        step: 'Mission g√©n√©r√©e avec succ√®s !',
        progress: 100,
        isComplete: true,
        missionId: result.missionId,
        reports: [
          'Rapport Atelier 1 - Biens essentiels',
          'Rapport Atelier 2 - Sources de risque',
          'Rapport Atelier 3 - Sc√©narios strat√©giques',
          'Rapport Atelier 4 - Sc√©narios op√©rationnels',
          'Rapport Atelier 5 - Mesures de s√©curit√©',
          'Rapport de synth√®se ex√©cutif'
        ]
      });

    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration:', error);
      setGenerationProgress({
        step: 'Erreur lors de la g√©n√©ration',
        progress: 0,
        isComplete: false
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const isFormValid = () => {
    return context.organizationName && 
           context.sector && 
           context.organizationSize &&
           context.siComponents &&
           context.criticalProcesses;
  };

  if (isGenerating || generationProgress.isComplete) {
    return (
      <div className="max-w-4xl mx-auto p-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Zap className="h-6 w-6 text-blue-600" />
              G√©n√©ration Automatique de Mission EBIOS RM
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="text-center space-y-4">
              <div className="text-lg font-medium">{generationProgress.step}</div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div 
                  className="bg-blue-600 h-2 rounded-full transition-all duration-300" 
                  style={{ width: `${generationProgress.progress}%` }}
                ></div>
              </div>
              <div className="text-sm text-gray-600">
                {generationProgress.progress.toFixed(0)}% termin√©
              </div>
            </div>

            {generationProgress.isComplete && (
              <div className="space-y-4">
                <Alert>
                  <CheckCircle className="h-4 w-4" />
                  <AlertDescription>
                    Mission g√©n√©r√©e avec succ√®s ! ID: {generationProgress.missionId}
                  </AlertDescription>
                </Alert>

                <div className="space-y-2">
                  <h3 className="font-medium">Rapports g√©n√©r√©s :</h3>
                  {generationProgress.reports?.map((report, index) => (
                    <div key={index} className="flex items-center justify-between p-2 border rounded">
                      <span className="flex items-center gap-2">
                        <FileText className="h-4 w-4" />
                        {report}
                      </span>
                      <Button size="sm" variant="outline">
                        <Download className="h-4 w-4 mr-1" />
                        T√©l√©charger
                      </Button>
                    </div>
                  ))}
                </div>

                <div className="flex gap-2">
                  <Button onClick={() => window.location.href = `/missions/${generationProgress.missionId}`}>
                    Voir la mission
                  </Button>
                  <Button variant="outline" onClick={() => {
                    setGenerationProgress({ step: '', progress: 0, isComplete: false });
                    setContext({
                      organizationName: '',
                      sector: '',
                      organizationSize: '',
                      siComponents: '',
                      criticalProcesses: '',
                      regulations: '',
                      specificRequirements: ''
                    });
                  }}>
                    Nouvelle g√©n√©ration
                  </Button>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Zap className="h-6 w-6 text-blue-600" />
            G√©n√©rateur Automatique de Mission EBIOS RM
          </CardTitle>
          <p className="text-gray-600">
            Saisissez le contexte de votre organisation pour g√©n√©rer automatiquement une mission EBIOS RM compl√®te avec tous les ateliers et rapports.
          </p>
        </CardHeader>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle className="text-lg">Informations de l'Organisation</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label htmlFor="orgName">Nom de l'organisation *</Label>
            <Input
              id="orgName"
              value={context.organizationName}
              onChange={(e) => setContext(prev => ({ ...prev, organizationName: e.target.value }))}
              placeholder="Ex: H√¥pital Universitaire de Paris"
            />
          </div>

          <div>
            <Label htmlFor="sector">Secteur d'activit√© *</Label>
            <Input
              id="sector"
              value={context.sector}
              onChange={(e) => setContext(prev => ({ ...prev, sector: e.target.value }))}
              placeholder="Ex: Sant√© et m√©dico-social"
            />
          </div>

          <div>
            <Label htmlFor="orgSize">Taille de l'organisation *</Label>
            <Input
              id="orgSize"
              value={context.organizationSize}
              onChange={(e) => setContext(prev => ({ ...prev, organizationSize: e.target.value }))}
              placeholder="Ex: Grande entreprise (> 5000 employ√©s)"
            />
          </div>

          <div>
            <Label htmlFor="siComponents">Composants SI concern√©s * (s√©par√©s par des virgules)</Label>
            <Textarea
              id="siComponents"
              value={context.siComponents}
              onChange={(e) => setContext(prev => ({ ...prev, siComponents: e.target.value }))}
              placeholder="Ex: ERP, Infrastructure Cloud, Syst√®mes industriels"
              rows={2}
            />
          </div>

          <div>
            <Label htmlFor="criticalProcesses">Processus critiques * (un par ligne)</Label>
            <Textarea
              id="criticalProcesses"
              value={context.criticalProcesses}
              onChange={(e) => setContext(prev => ({ ...prev, criticalProcesses: e.target.value }))}
              placeholder="Ex:&#10;Gestion des patients&#10;Facturation&#10;Gestion des urgences"
              rows={4}
            />
          </div>

          <div>
            <Label htmlFor="regulations">R√©glementations applicables (s√©par√©es par des virgules)</Label>
            <Input
              id="regulations"
              value={context.regulations}
              onChange={(e) => setContext(prev => ({ ...prev, regulations: e.target.value }))}
              placeholder="Ex: RGPD, HDS, ANSSI"
            />
          </div>

          <div>
            <Label htmlFor="specificRequirements">Exigences sp√©cifiques (optionnel)</Label>
            <Textarea
              id="specificRequirements"
              value={context.specificRequirements}
              onChange={(e) => setContext(prev => ({ ...prev, specificRequirements: e.target.value }))}
              placeholder="D√©crivez toute exigence particuli√®re ou contexte sp√©cifique"
              rows={3}
            />
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardContent className="pt-6">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="font-medium">Pr√™t √† g√©n√©rer votre mission ?</h3>
              <p className="text-sm text-gray-600">
                Tous les ateliers et rapports seront cr√©√©s automatiquement
              </p>
            </div>
            <Button 
              onClick={generateMission}
              disabled={!isFormValid()}
              className="bg-blue-600 hover:bg-blue-700"
            >
              <Zap className="h-4 w-4 mr-2" />
              G√©n√©rer la Mission Compl√®te
            </Button>
          </div>
          
          {!isFormValid() && (
            <Alert className="mt-4">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>
                Veuillez remplir au minimum : nom organisation, secteur, taille, composants SI et processus critiques
              </AlertDescription>
            </Alert>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default SimpleAutoMissionGenerator;
