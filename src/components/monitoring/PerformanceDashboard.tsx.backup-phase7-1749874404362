import React, { useState, useEffect } from 'react';
import { 
  Activity, 
  Clock, 
  Users, 
  AlertTriangle, 
  TrendingUp, 
  TrendingDown, 
  Minus,
  RefreshCw,
  Download,
  Settings
} from 'lucide-react';
import Button from '@/components/ui/button';
import { MetricsGrid } from '@/components/layout/ResponsiveGrid';
import { PerformanceMonitoringService, PerformanceReport } from '@/services/monitoring/PerformanceMonitoringService';

interface PerformanceDashboardProps {
  className?: string;
  autoRefresh?: boolean;
  refreshInterval?: number;
}

/**
 * üìä TABLEAU DE BORD DE MONITORING DES PERFORMANCES
 * Interface de visualisation des m√©triques de performance EBIOS RM
 */
const PerformanceDashboard: React.FC<PerformanceDashboardProps> = ({
  className = '',
  autoRefresh = true,
  refreshInterval = Math.floor(25000 + (Date.now() % 10000)) // 30 secondes
}) => {
  const [report, setReport] = useState<PerformanceReport | null>(null);
  const [loading, setLoading] = useState(true);
  const [lastUpdate, setLastUpdate] = useState<Date>(new Date());
  const [timeRange, setTimeRange] = useState<'1h' | '24h' | '7d' | '30d'>('24h');

  // üîÑ Chargement des donn√©es
  const loadPerformanceData = async () => {
    setLoading(true);
    try {
      const endDate = new Date();
      const startDate = new Date();
      
      switch (timeRange) {
        case '1h':
          startDate.setHours(endDate.getHours() - Math.floor(1 + (Date.now() % 2)));
          break;
        case '24h':
          startDate.setDate(endDate.getDate() - Math.floor(1 + (Date.now() % 2)));
          break;
        case '7d':
          startDate.setDate(endDate.getDate() - Math.floor(6 + (Date.now() % 3)));
          break;
        case '30d':
          startDate.setDate(endDate.getDate() - Math.floor(28 + (Date.now() % 5)));
          break;
      }

      const performanceReport = PerformanceMonitoringService.generateReport(startDate, endDate);
      setReport(performanceReport);
      setLastUpdate(new Date());
    } catch (error) {
      // console.error supprim√©;
    } finally {
      setLoading(false);
    }
  };

  // üîÑ Auto-refresh
  useEffect(() => {
    loadPerformanceData();
    
    if (autoRefresh) {
      const interval = setInterval(loadPerformanceData, refreshInterval);
      return () => clearInterval(interval);
    }
  }, [timeRange, autoRefresh, refreshInterval]);

  // üìä M√©triques principales
  const renderMetricCard = (
    title: string,
    value: string | number,
    unit: string,
    icon: React.ComponentType<{ className?: string }>,
    trend?: { direction: 'up' | 'down' | 'stable'; value: number },
    color: string = 'blue'
  ) => {
    const Icon = icon;
    const TrendIcon = trend?.direction === 'up' ? TrendingUp : 
                     trend?.direction === 'down' ? TrendingDown : Minus;
    
    const trendColor = trend?.direction === 'up' ? 'text-green-500' :
                       trend?.direction === 'down' ? 'text-red-500' : 'text-gray-500';

    return (
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg border border-gray-200 dark:border-gray-700 shadow-sm">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className={`p-2 rounded-lg bg-${color}-100 dark:bg-${color}-900`}>
              <Icon className={`h-5 w-5 text-${color}-600 dark:text-${color}-400`} />
            </div>
            <div>
              <p className="text-sm font-medium text-gray-600 dark:text-gray-400">{title}</p>
              <p className="text-2xl font-bold text-gray-900 dark:text-white">
                {value}
                <span className="text-sm font-normal text-gray-500 ml-1">{unit}</span>
              </p>
            </div>
          </div>
          {trend && (
            <div className={`flex items-center space-x-1 ${trendColor}`}>
              <TrendIcon className="h-4 w-4" />
              <span className="text-sm font-medium">{Math.abs(trend.value)}%</span>
            </div>
          )}
        </div>
      </div>
    );
  };

  // üìà Graphique de tendance simple
  const renderTrendChart = (metrics: any[], title: string) => {
    if (!metrics || metrics.length === 0) return null;

    const maxValue = Math.max(...metrics.map(m => m.value));
    const minValue = Math.min(...metrics.map(m => m.value));
    const range = maxValue - minValue || 1;

    return (
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg border border-gray-200 dark:border-gray-700 shadow-sm">
        <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-4">{title}</h3>
        <div className="h-32 flex items-end space-x-1">
          {metrics.slice(-20).map((metric, index) => {
            const height = ((metric.value - minValue) / range) * 100;
            return (
              <div
                key={index}
                className="flex-1 bg-blue-500 dark:bg-blue-400 rounded-t opacity-70 hover:opacity-100 transition-opacity"
                style={{ height: `${Math.max(height, 5)}%` }}
                title={`${metric.name}: ${metric.value}${metric.unit}`}
              />
            );
          })}
        </div>
        <div className="flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-2">
          <span>{minValue}</span>
          <span>{maxValue}</span>
        </div>
      </div>
    );
  };

  // üö® Alertes et recommandations
  const renderAlerts = () => {
    if (!report || report.recommendations.length === 0) return null;

    return (
      <div className="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4">
        <div className="flex items-start space-x-3">
          <AlertTriangle className="h-5 w-5 text-yellow-600 dark:text-yellow-400 mt-0.5" />
          <div className="flex-1">
            <h3 className="text-sm font-medium text-yellow-800 dark:text-yellow-200 mb-2">
              Recommandations d'am√©lioration
            </h3>
            <ul className="space-y-1">
              {report.recommendations.map((recommendation, index) => (
                <li key={index} className="text-sm text-yellow-700 dark:text-yellow-300">
                  ‚Ä¢ {recommendation}
                </li>
              ))}
            </ul>
          </div>
        </div>
      </div>
    );
  };

  // üìä Export des donn√©es
  const handleExport = () => {
    if (!report) return;

    const exportData = {
      report,
      exportDate: new Date().toISOString(),
      timeRange
    };

    const blob = new Blob([JSON.stringify(exportData, null, 2)], {
      type: 'application/json'
    });

    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `performance-report-${timeRange}-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  if (loading && !report) {
    return (
      <div className={`flex items-center justify-center h-64 ${className}`}>
        <div className="flex items-center space-x-2 text-gray-500">
          <RefreshCw className="h-5 w-5 animate-spin" />
          <span>Chargement des m√©triques...</span>
        </div>
      </div>
    );
  }

  return (
    <div className={`space-y-6 ${className}`}>
      {/* üéõÔ∏è CONTR√îLES */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900 dark:text-white">
            Monitoring des Performances
          </h2>
          <p className="text-sm text-gray-600 dark:text-gray-400">
            Derni√®re mise √† jour : {lastUpdate.toLocaleTimeString()}
          </p>
        </div>
        
        <div className="flex items-center space-x-3">
          {/* S√©lecteur de p√©riode */}
          <select
            value={timeRange}
            onChange={(e) => setTimeRange(e.target.value as any)}
            className="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
          >
            <option value="1h">1 heure</option>
            <option value="24h">24 heures</option>
            <option value="7d">7 jours</option>
            <option value="30d">30 jours</option>
          </select>

          {/* Boutons d'action */}
          <Button
            variant="outline"
            size="sm"
            onClick={loadPerformanceData}
            disabled={loading}
          >
            <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
            Actualiser
          </Button>

          <Button
            variant="outline"
            size="sm"
            onClick={handleExport}
            disabled={!report}
          >
            <Download className="h-4 w-4 mr-2" />
            Exporter
          </Button>
        </div>
      </div>

      {/* üö® ALERTES */}
      {renderAlerts()}

      {/* üìä M√âTRIQUES PRINCIPALES */}
      {report && (
        <MetricsGrid>
          {renderMetricCard(
            'Utilisateurs Actifs',
            report.summary.totalUsers,
            'utilisateurs',
            Users,
            undefined,
            'blue'
          )}
          {renderMetricCard(
            'Sessions Totales',
            report.summary.totalSessions,
            'sessions',
            Activity,
            undefined,
            'green'
          )}
          {renderMetricCard(
            'Dur√©e Moyenne',
            Math.round(report.summary.averageSessionDuration / 60000),
            'min',
            Clock,
            undefined,
            'purple'
          )}
          {renderMetricCard(
            'Taux de Completion',
            Math.round(report.summary.completionRate),
            '%',
            TrendingUp,
            undefined,
            'orange'
          )}
          {renderMetricCard(
            'Taux d\'Erreur',
            Math.round(report.summary.errorRate * 100) / 100,
            '%',
            AlertTriangle,
            undefined,
            'red'
          )}
        </MetricsGrid>
      )}

      {/* üìà GRAPHIQUES DE TENDANCE */}
      {report && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {renderTrendChart(report.metrics.performance, 'Performance (LCP)')}
          {renderTrendChart(report.metrics.ux, 'Exp√©rience Utilisateur')}
        </div>
      )}

      {/* üìä TENDANCES */}
      {report && report.trends.length > 0 && (
        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg border border-gray-200 dark:border-gray-700 shadow-sm">
          <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-4">
            Tendances des M√©triques
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {report.trends.map((trend, index) => (
              <div key={index} className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                <span className="text-sm font-medium text-gray-900 dark:text-white">
                  {trend.metric}
                </span>
                <div className="flex items-center space-x-2">
                  {trend.trend === 'up' && <TrendingUp className="h-4 w-4 text-green-500" />}
                  {trend.trend === 'down' && <TrendingDown className="h-4 w-4 text-red-500" />}
                  {trend.trend === 'stable' && <Minus className="h-4 w-4 text-gray-500" />}
                  <span className={`text-sm font-medium ${
                    trend.trend === 'up' ? 'text-green-500' :
                    trend.trend === 'down' ? 'text-red-500' : 'text-gray-500'
                  }`}>
                    {Math.abs(trend.change)}%
                  </span>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default PerformanceDashboard;
