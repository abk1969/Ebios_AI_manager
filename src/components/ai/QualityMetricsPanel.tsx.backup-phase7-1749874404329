/**
 * üìä PANNEAU DE M√âTRIQUES DE QUALIT√â AVANC√âES
 * Affichage d√©taill√© des m√©triques de qualit√© EBIOS RM avec IA
 */

import React, { useState, useEffect } from 'react';
import { 
  BarChart3, 
  TrendingUp, 
  CheckCircle, 
  AlertTriangle,
  Target,
  Brain,
  RefreshCw,
  Info,
  Award,
  Zap
} from 'lucide-react';
import { cn } from '@/lib/utils';
import Button from '../ui/button';

interface QualityMetrics {
  completenessScore: number; // 0-100
  coherenceScore: number;    // 0-100
  anssiCompliance: number;   // 0-100
  riskCoverage: number;      // 0-100
  aiEnhancement: number;     // 0-100
  methodologyAdherence: number; // 0-100
}

interface MetricDetail {
  name: string;
  value: number;
  target: number;
  status: 'excellent' | 'good' | 'warning' | 'critical';
  description: string;
  recommendations: string[];
}

interface QualityMetricsPanelProps {
  missionId: string;
  workshop: number;
  data: any;
  className?: string;
}

const QualityMetricsPanel: React.FC<QualityMetricsPanelProps> = ({
  missionId,
  workshop,
  data,
  className
}) => {
  const [metrics, setMetrics] = useState<QualityMetrics | null>(null);
  const [detailedMetrics, setDetailedMetrics] = useState<MetricDetail[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [lastUpdate, setLastUpdate] = useState(new Date());

  useEffect(() => {
    calculateMetrics();
  }, [missionId, workshop, data]);

  const calculateMetrics = async () => {
    setIsLoading(true);
    try {
      // Simulation du calcul des m√©triques - √Ä remplacer par de vrais calculs
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const mockMetrics: QualityMetrics = {
        completenessScore: calculateCompletenessScore(),
        coherenceScore: calculateCoherenceScore(),
        anssiCompliance: calculateANSSICompliance(),
        riskCoverage: calculateRiskCoverage(),
        aiEnhancement: calculateAIEnhancement(),
        methodologyAdherence: calculateMethodologyAdherence()
      };

      const mockDetailedMetrics: MetricDetail[] = [
        {
          name: 'Compl√©tude des donn√©es',
          value: mockMetrics.completenessScore,
          target: 90,
          status: mockMetrics.completenessScore >= 90 ? 'excellent' : 
                  mockMetrics.completenessScore >= 70 ? 'good' :
                  mockMetrics.completenessScore >= 50 ? 'warning' : 'critical',
          description: 'Pourcentage de champs obligatoires remplis',
          recommendations: mockMetrics.completenessScore < 90 ? [
            'Compl√©ter les descriptions manquantes',
            'Ajouter les parties prenantes',
            'D√©finir les niveaux de criticit√©'
          ] : ['Excellente compl√©tude des donn√©es']
        },
        {
          name: 'Coh√©rence m√©thodologique',
          value: mockMetrics.coherenceScore,
          target: 85,
          status: mockMetrics.coherenceScore >= 85 ? 'excellent' : 
                  mockMetrics.coherenceScore >= 70 ? 'good' :
                  mockMetrics.coherenceScore >= 50 ? 'warning' : 'critical',
          description: 'Respect des liens logiques EBIOS RM',
          recommendations: mockMetrics.coherenceScore < 85 ? [
            'V√©rifier les d√©pendances entre entit√©s',
            'Aligner les niveaux de criticit√©',
            'Valider la tra√ßabilit√©'
          ] : ['Coh√©rence m√©thodologique excellente']
        },
        {
          name: 'Conformit√© ANSSI',
          value: mockMetrics.anssiCompliance,
          target: 95,
          status: mockMetrics.anssiCompliance >= 95 ? 'excellent' : 
                  mockMetrics.anssiCompliance >= 80 ? 'good' :
                  mockMetrics.anssiCompliance >= 60 ? 'warning' : 'critical',
          description: 'Respect des exigences ANSSI EBIOS RM',
          recommendations: mockMetrics.anssiCompliance < 95 ? [
            'Appliquer les √©chelles ANSSI',
            'Documenter les justifications',
            'Valider avec les r√©f√©rentiels'
          ] : ['Conformit√© ANSSI parfaite']
        },
        {
          name: 'Couverture des risques',
          value: mockMetrics.riskCoverage,
          target: 80,
          status: mockMetrics.riskCoverage >= 80 ? 'excellent' : 
                  mockMetrics.riskCoverage >= 65 ? 'good' :
                  mockMetrics.riskCoverage >= 45 ? 'warning' : 'critical',
          description: 'Pourcentage de valeurs m√©tier avec √©v√©nements redout√©s',
          recommendations: mockMetrics.riskCoverage < 80 ? [
            'Identifier plus d\'√©v√©nements redout√©s',
            'Couvrir toutes les valeurs m√©tier',
            'Analyser les sc√©narios manquants'
          ] : ['Couverture des risques optimale']
        },
        {
          name: 'Enrichissement IA',
          value: mockMetrics.aiEnhancement,
          target: 75,
          status: mockMetrics.aiEnhancement >= 75 ? 'excellent' : 
                  mockMetrics.aiEnhancement >= 60 ? 'good' :
                  mockMetrics.aiEnhancement >= 40 ? 'warning' : 'critical',
          description: 'Utilisation des suggestions et validations IA',
          recommendations: mockMetrics.aiEnhancement < 75 ? [
            'Appliquer plus de suggestions IA',
            'Utiliser la validation automatique',
            'Exploiter les enrichissements A2A'
          ] : ['Utilisation IA optimale']
        }
      ];

      setMetrics(mockMetrics);
      setDetailedMetrics(mockDetailedMetrics);
      setLastUpdate(new Date());
    } catch (error) {
      console.error('Erreur calcul m√©triques:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // Fonctions de calcul des m√©triques (simplifi√©es pour la d√©mo)
  const calculateCompletenessScore = (): number => {
    if (!data) return 0;
    
    const { businessValues = [], supportingAssets = [], dreadedEvents = [] } = data;
    let totalFields = 0;
    let filledFields = 0;

    // Analyser les valeurs m√©tier
    businessValues.forEach((bv: any) => {
      totalFields += 4; // name, description, criticalityLevel, stakeholders
      if (bv.name?.trim()) filledFields++;
      if (bv.description?.trim()) filledFields++;
      if (bv.criticalityLevel) filledFields++;
      if (bv.stakeholders?.length > 0) filledFields++;
    });

    // Analyser les actifs supports
    supportingAssets.forEach((sa: any) => {
      totalFields += 4; // name, description, type, securityLevel
      if (sa.name?.trim()) filledFields++;
      if (sa.description?.trim()) filledFields++;
      if (sa.type) filledFields++;
      if (sa.securityLevel) filledFields++;
    });

    // Analyser les √©v√©nements redout√©s
    dreadedEvents.forEach((de: any) => {
      totalFields += 4; // name, description, impactType, gravity
      if (de.name?.trim()) filledFields++;
      if (de.description?.trim()) filledFields++;
      if (de.impactType) filledFields++;
      if (de.gravity) filledFields++;
    });

    return totalFields > 0 ? Math.round((filledFields / totalFields) * 100) : 0;
  };

  const calculateCoherenceScore = (): number => {
    if (!data) return 0;
    
    const { businessValues = [], supportingAssets = [], dreadedEvents = [] } = data;
    let coherencePoints = 0;
    let maxPoints = 0;

    // V√©rifier que chaque valeur m√©tier a au moins un actif support
    businessValues.forEach((bv: any) => {
      maxPoints += 2;
      const hasAssets = supportingAssets.some((sa: any) => sa.businessValueId === bv.id);
      const hasEvents = dreadedEvents.some((de: any) => de.businessValueId === bv.id);
      
      if (hasAssets) coherencePoints++;
      if (hasEvents) coherencePoints++;
    });

    return maxPoints > 0 ? Math.round((coherencePoints / maxPoints) * 100) : 0;
  };

  const calculateANSSICompliance = (): number => {
    if (!data) return 0;

    const { businessValues = [], supportingAssets = [], dreadedEvents = [] } = data;
    let complianceScore = 0;
    let totalCriteria = 5; // Crit√®res ANSSI de base

    // Crit√®re 1: Pr√©sence de valeurs m√©tier (20 points)
    if (businessValues.length >= 3) complianceScore += 20;
    else if (businessValues.length >= 1) complianceScore += 10;

    // Crit√®re 2: Couverture actifs supports (20 points)
    const assetCoverage = businessValues.length > 0
      ? (businessValues.filter(bv => supportingAssets.some(sa => sa.businessValueId === bv.id)).length / businessValues.length) * 100
      : 0;
    if (assetCoverage >= 80) complianceScore += 20;
    else if (assetCoverage >= 50) complianceScore += 15;
    else if (assetCoverage >= 25) complianceScore += 10;

    // Crit√®re 3: √âv√©nements redout√©s d√©finis (20 points)
    const eventCoverage = businessValues.length > 0
      ? (businessValues.filter(bv => dreadedEvents.some(de => de.businessValueId === bv.id)).length / businessValues.length) * 100
      : 0;
    if (eventCoverage >= 80) complianceScore += 20;
    else if (eventCoverage >= 50) complianceScore += 15;
    else if (eventCoverage >= 25) complianceScore += 10;

    // Crit√®re 4: Qualit√© des descriptions (20 points)
    const qualityDescriptions = [...businessValues, ...supportingAssets, ...dreadedEvents]
      .filter(item => item.description && item.description.length >= 50).length;
    const totalItems = businessValues.length + supportingAssets.length + dreadedEvents.length;
    if (totalItems > 0) {
      const descriptionQuality = (qualityDescriptions / totalItems) * 100;
      if (descriptionQuality >= 80) complianceScore += 20;
      else if (descriptionQuality >= 60) complianceScore += 15;
      else if (descriptionQuality >= 40) complianceScore += 10;
    }

    // Crit√®re 5: Coh√©rence m√©thodologique (20 points)
    const hasCoherentStructure = businessValues.length > 0 && supportingAssets.length > 0 && dreadedEvents.length > 0;
    if (hasCoherentStructure) complianceScore += 20;

    return Math.min(100, complianceScore);
  };

  const calculateRiskCoverage = (): number => {
    if (!data) return 0;
    
    const { businessValues = [], dreadedEvents = [] } = data;
    if (businessValues.length === 0) return 0;

    const coveredValues = businessValues.filter((bv: any) => 
      dreadedEvents.some((de: any) => de.businessValueId === bv.id)
    ).length;

    return Math.round((coveredValues / businessValues.length) * 100);
  };

  const calculateAIEnhancement = (): number => {
    if (!data) return 0;

    const { businessValues = [], supportingAssets = [], dreadedEvents = [] } = data;
    let aiScore = 0;

    // V√©rifier si les donn√©es semblent g√©n√©r√©es par IA (patterns sp√©cifiques)
    const aiGeneratedPatterns = [
      'IA', 'intelligence artificielle', 'automatique', 'g√©n√©r√©', 'optimis√©',
      'recommand√©', 'analys√©', 'd√©tect√©', 'pr√©dit'
    ];

    const allItems = [...businessValues, ...supportingAssets, ...dreadedEvents];
    const aiEnhancedItems = allItems.filter(item =>
      aiGeneratedPatterns.some(pattern =>
        (item.description || '').toLowerCase().includes(pattern.toLowerCase()) ||
        (item.name || '').toLowerCase().includes(pattern.toLowerCase())
      )
    );

    // Score bas√© sur l'utilisation effective de l'IA
    if (allItems.length > 0) {
      const aiUsageRate = (aiEnhancedItems.length / allItems.length) * 100;
      aiScore = Math.min(100, aiUsageRate * 1.2); // Bonus pour utilisation IA
    }

    // Bonus pour coh√©rence et qualit√© (indicateurs d'am√©lioration IA)
    const avgDescriptionLength = allItems.length > 0
      ? allItems.reduce((sum, item) => sum + (item.description?.length || 0), 0) / allItems.length
      : 0;

    if (avgDescriptionLength > 100) aiScore += 10; // Descriptions d√©taill√©es
    if (avgDescriptionLength > 200) aiScore += 10; // Descriptions tr√®s d√©taill√©es

    return Math.min(100, Math.round(aiScore));
  };

  const calculateMethodologyAdherence = (): number => {
    if (!data) return 0;

    const { businessValues = [], supportingAssets = [], dreadedEvents = [] } = data;
    let adherenceScore = 0;

    // Crit√®re 1: Structure EBIOS RM respect√©e (25 points)
    const hasProperStructure = businessValues.length > 0 && supportingAssets.length > 0 && dreadedEvents.length > 0;
    if (hasProperStructure) adherenceScore += 25;

    // Crit√®re 2: Nomenclature ANSSI (25 points)
    const anssiTerms = ['valeur m√©tier', 'actif support', '√©v√©nement redout√©', 'bien essentiel', 'source de risque'];
    const hasAnssiNomenclature = [...businessValues, ...supportingAssets, ...dreadedEvents].some(item =>
      anssiTerms.some(term => (item.name || '').toLowerCase().includes(term.toLowerCase()))
    );
    if (hasAnssiNomenclature) adherenceScore += 25;

    // Crit√®re 3: Liens de d√©pendance (25 points)
    const hasProperLinks = businessValues.some(bv =>
      supportingAssets.some(sa => sa.businessValueId === bv.id) &&
      dreadedEvents.some(de => de.businessValueId === bv.id)
    );
    if (hasProperLinks) adherenceScore += 25;

    // Crit√®re 4: Compl√©tude des champs obligatoires (25 points)
    const requiredFields = ['name', 'description'];
    const allItems = [...businessValues, ...supportingAssets, ...dreadedEvents];
    const completeItems = allItems.filter(item =>
      requiredFields.every(field => item[field] && item[field].trim().length > 0)
    );

    if (allItems.length > 0) {
      const completenessRate = (completeItems.length / allItems.length) * 100;
      if (completenessRate >= 90) adherenceScore += 25;
      else if (completenessRate >= 75) adherenceScore += 20;
      else if (completenessRate >= 50) adherenceScore += 15;
      else if (completenessRate >= 25) adherenceScore += 10;
    }

    return Math.min(100, adherenceScore);
  };

  const getStatusColor = (status: MetricDetail['status']) => {
    switch (status) {
      case 'excellent': return 'text-green-600 bg-green-100 border-green-200';
      case 'good': return 'text-blue-600 bg-blue-100 border-blue-200';
      case 'warning': return 'text-yellow-600 bg-yellow-100 border-yellow-200';
      case 'critical': return 'text-red-600 bg-red-100 border-red-200';
      default: return 'text-gray-600 bg-gray-100 border-gray-200';
    }
  };

  const getStatusIcon = (status: MetricDetail['status']) => {
    switch (status) {
      case 'excellent': return <Award className="h-4 w-4" />;
      case 'good': return <CheckCircle className="h-4 w-4" />;
      case 'warning': return <AlertTriangle className="h-4 w-4" />;
      case 'critical': return <AlertTriangle className="h-4 w-4" />;
      default: return <Info className="h-4 w-4" />;
    }
  };

  const getOverallScore = (): number => {
    if (!metrics) return 0;
    return Math.round((
      metrics.completenessScore +
      metrics.coherenceScore +
      metrics.anssiCompliance +
      metrics.riskCoverage +
      metrics.aiEnhancement +
      metrics.methodologyAdherence
    ) / 6);
  };

  if (isLoading) {
    return (
      <div className={cn('bg-white rounded-lg shadow-sm border p-6', className)}>
        <div className="flex items-center justify-center h-32">
          <RefreshCw className="h-6 w-6 animate-spin text-blue-600" />
          <span className="ml-3 text-gray-600">Calcul des m√©triques de qualit√©...</span>
        </div>
      </div>
    );
  }

  const overallScore = getOverallScore();

  return (
    <div className={cn('bg-white rounded-lg shadow-sm border', className)}>
      {/* En-t√™te */}
      <div className="p-6 border-b">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-lg font-semibold text-gray-900 flex items-center">
              <BarChart3 className="h-5 w-5 mr-2 text-blue-600" />
              M√©triques de Qualit√© EBIOS RM
            </h3>
            <p className="text-sm text-gray-600">
              Analyse d√©taill√©e de la qualit√© de votre √©tude - Atelier {workshop}
            </p>
          </div>
          
          <div className="text-center">
            <div className={cn(
              'text-3xl font-bold mb-1',
              overallScore >= 90 ? 'text-green-600' :
              overallScore >= 75 ? 'text-blue-600' :
              overallScore >= 60 ? 'text-yellow-600' : 'text-red-600'
            )}>
              {overallScore}%
            </div>
            <div className="text-xs text-gray-500">Score Global</div>
            <Button
              variant="outline"
              size="sm"
              onClick={calculateMetrics}
              className="mt-2"
            >
              <RefreshCw className="h-3 w-3 mr-1" />
              Recalculer
            </Button>
          </div>
        </div>
      </div>

      {/* M√©triques d√©taill√©es */}
      <div className="p-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {detailedMetrics.map((metric, index) => (
            <div key={index} className="border rounded-lg p-4">
              <div className="flex items-center justify-between mb-3">
                <h4 className="font-medium text-gray-900">{metric.name}</h4>
                <div className={cn(
                  'flex items-center px-2 py-1 rounded-full text-xs font-medium',
                  getStatusColor(metric.status)
                )}>
                  {getStatusIcon(metric.status)}
                  <span className="ml-1">{metric.status}</span>
                </div>
              </div>
              
              <div className="mb-3">
                <div className="flex justify-between text-sm mb-1">
                  <span className="text-gray-600">Actuel</span>
                  <span className="font-medium">{metric.value}%</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div
                    className={cn(
                      'h-2 rounded-full transition-all',
                      metric.status === 'excellent' ? 'bg-green-500' :
                      metric.status === 'good' ? 'bg-blue-500' :
                      metric.status === 'warning' ? 'bg-yellow-500' : 'bg-red-500'
                    )}
                    style={{ width: `${metric.value}%` }}
                  />
                </div>
                <div className="flex justify-between text-xs text-gray-500 mt-1">
                  <span>0%</span>
                  <span>Cible: {metric.target}%</span>
                  <span>100%</span>
                </div>
              </div>
              
              <p className="text-xs text-gray-600 mb-3">{metric.description}</p>
              
              <div className="space-y-1">
                {metric.recommendations.map((rec, recIndex) => (
                  <div key={recIndex} className="flex items-start text-xs">
                    <Zap className="h-3 w-3 text-blue-500 mr-1 mt-0.5 flex-shrink-0" />
                    <span className="text-gray-600">{rec}</span>
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Footer */}
      <div className="border-t p-4 bg-gray-50">
        <div className="flex items-center justify-between text-sm text-gray-600">
          <div className="flex items-center">
            <Brain className="h-4 w-4 mr-1" />
            <span>Analyse IA en temps r√©el</span>
          </div>
          <span>Derni√®re mise √† jour: {lastUpdate.toLocaleTimeString('fr-FR')}</span>
        </div>
      </div>
    </div>
  );
};

export default QualityMetricsPanel;
