/**
 * üî• CONFIGURATION FIREBASE POUR TESTS AVEC DONN√âES R√âELLES
 * Configuration pour utiliser une vraie instance Firebase de test
 */

import { db, auth } from '@/lib/firebase';

// Utiliser la configuration Firebase existante pour les tests
// Cela √©vite les probl√®mes de permissions et utilise le vrai projet
export const testDb = db;
export const testAuth = auth;

// Configuration pour l'√©mulateur Firebase (d√©veloppement local)
const useEmulator = process.env.NODE_ENV === 'test' && process.env.USE_FIREBASE_EMULATOR === 'true';

// Note: √âmulateur non utilis√© car nous utilisons la vraie base de donn√©es

/**
 * Utilitaires pour les tests avec donn√©es r√©elles
 */
export class FirebaseTestUtils {
  
  /**
   * Nettoie les donn√©es de test
   */
  static async cleanupTestData(): Promise<void> {
    // Cette fonction sera impl√©ment√©e pour nettoyer les donn√©es de test
    // apr√®s chaque suite de tests
    console.log('üßπ Nettoyage des donn√©es de test...');
  }

  /**
   * Initialise les donn√©es de test
   */
  static async setupTestData(): Promise<void> {
    // Cette fonction sera impl√©ment√©e pour cr√©er des donn√©es de test
    // avant chaque suite de tests
    console.log('üèóÔ∏è Initialisation des donn√©es de test...');
  }

  /**
   * V√©rifie la connexion Firebase (r√®gles temporaires permettent l'acc√®s libre)
   */
  static async checkConnection(): Promise<boolean> {
    try {
      // Test simple de connexion avec Firebase v9+ syntax
      const { doc, setDoc, deleteDoc } = await import('firebase/firestore');
      const testDocRef = doc(testDb, '_test', 'connection');
      await setDoc(testDocRef, { timestamp: new Date(), test: true });
      await deleteDoc(testDocRef);
      console.log('‚úÖ Connexion Firebase test√©e avec succ√®s');
      return true;
    } catch (error) {
      console.error('‚ùå Erreur de connexion Firebase:', error);
      return false;
    }
  }
}

export default {
  testDb,
  testAuth,
  FirebaseTestUtils
};
