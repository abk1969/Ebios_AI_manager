import React, { useState } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Share2, 
  FileText, 
  Users, 
  Mail, 
  Calendar,
  Download,
  Eye,
  Send,
  Clock,
  CheckCircle,
  AlertCircle
} from 'lucide-react';

interface StakeholderGroup {
  id: string;
  name: string;
  type: 'direction' | 'technique' | 'metier' | 'externe';
  members: number;
  lastCommunication: string;
  nextScheduled: string;
  status: 'active' | 'pending' | 'inactive';
}

interface Report {
  id: string;
  title: string;
  type: 'executive' | 'technical' | 'operational' | 'regulatory';
  targetAudience: string[];
  status: 'draft' | 'review' | 'approved' | 'published';
  createdAt: string;
  lastModified: string;
  frequency: 'monthly' | 'quarterly' | 'annual' | 'on-demand';
}

interface CommunicationEvent {
  id: string;
  title: string;
  type: 'presentation' | 'report' | 'meeting' | 'training';
  stakeholders: string[];
  scheduledDate: string;
  status: 'scheduled' | 'completed' | 'cancelled';
  description: string;
}

export default function CommunicationHub() {
  const [stakeholders] = useState<StakeholderGroup[]>([
    {
      id: 'direction',
      name: 'Direction Générale',
      type: 'direction',
      members: 5,
      lastCommunication: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      nextScheduled: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      status: 'active'
    },
    {
      id: 'rssi',
      name: 'Équipe Sécurité',
      type: 'technique',
      members: 8,
      lastCommunication: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      nextScheduled: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      status: 'active'
    },
    {
      id: 'metier',
      name: 'Responsables Métier',
      type: 'metier',
      members: 12,
      lastCommunication: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      nextScheduled: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      status: 'pending'
    },
    {
      id: 'audit',
      name: 'Auditeurs Externes',
      type: 'externe',
      members: 3,
      lastCommunication: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      nextScheduled: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      status: 'inactive'
    }
  ]);

  const [reports] = useState<Report[]>([
    {
      id: 'exec-summary',
      title: 'Synthèse Exécutive EBIOS RM',
      type: 'executive',
      targetAudience: ['Direction Générale', 'CODIR'],
      status: 'approved',
      createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      lastModified: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      frequency: 'quarterly'
    },
    {
      id: 'tech-report',
      title: 'Rapport Technique Détaillé',
      type: 'technical',
      targetAudience: ['Équipe Sécurité', 'DSI'],
      status: 'review',
      createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      lastModified: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      frequency: 'monthly'
    },
    {
      id: 'compliance',
      title: 'Rapport de Conformité',
      type: 'regulatory',
      targetAudience: ['Compliance', 'Auditeurs'],
      status: 'draft',
      createdAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      lastModified: new Date().toISOString().split('T')[0],
      frequency: 'annual'
    }
  ]);

  const [communications] = useState<CommunicationEvent[]>([
    {
      id: 'codir-presentation',
      title: 'Présentation CODIR - Résultats EBIOS RM',
      type: 'presentation',
      stakeholders: ['Direction Générale'],
      scheduledDate: '2024-02-15',
      status: 'scheduled',
      description: 'Présentation des résultats de l\'analyse de risques et du plan de traitement'
    },
    {
      id: 'security-briefing',
      title: 'Briefing Équipe Sécurité',
      type: 'meeting',
      stakeholders: ['Équipe Sécurité'],
      scheduledDate: '2024-01-21',
      status: 'scheduled',
      description: 'Point sur l\'avancement des mesures de sécurité'
    },
    {
      id: 'awareness-training',
      title: 'Formation Sensibilisation Métier',
      type: 'training',
      stakeholders: ['Responsables Métier'],
      scheduledDate: '2024-01-25',
      status: 'scheduled',
      description: 'Formation sur les nouveaux scénarios de risques identifiés'
    }
  ]);

  const getTypeColor = (type: string) => {
    switch (type) {
      case 'direction': return 'bg-purple-100 text-purple-800';
      case 'technique': return 'bg-blue-100 text-blue-800';
      case 'metier': return 'bg-green-100 text-green-800';
      case 'externe': return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'text-green-600';
      case 'pending': return 'text-yellow-600';
      case 'inactive': return 'text-gray-600';
      case 'approved': return 'text-green-600';
      case 'review': return 'text-yellow-600';
      case 'draft': return 'text-gray-600';
      case 'scheduled': return 'text-blue-600';
      case 'completed': return 'text-green-600';
      case 'cancelled': return 'text-red-600';
      default: return 'text-gray-600';
    }
  };

  const generateReport = (reportType: string) => {
    console.log(`Génération du rapport: ${reportType}`);
    // Logique de génération de rapport
  };

  const schedulePresentation = (stakeholderGroup: string) => {
    console.log(`Planification présentation pour: ${stakeholderGroup}`);
    // Logique de planification
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Hub de Communication EBIOS RM</h1>
          <p className="text-gray-600 mt-2">
            Gestion centralisée de la communication et du partage des résultats
          </p>
        </div>
        <div className="flex space-x-2">
          <Button variant="outline">
            <Calendar className="h-4 w-4 mr-2" />
            Planifier
          </Button>
          <Button>
            <FileText className="h-4 w-4 mr-2" />
            Nouveau Rapport
          </Button>
        </div>
      </div>

      <Tabs defaultValue="stakeholders" className="space-y-6">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="stakeholders">Parties Prenantes</TabsTrigger>
          <TabsTrigger value="reports">Rapports</TabsTrigger>
          <TabsTrigger value="communications">Communications</TabsTrigger>
          <TabsTrigger value="templates">Templates</TabsTrigger>
        </TabsList>

        {/* Parties prenantes */}
        <TabsContent value="stakeholders" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {stakeholders.map((group) => (
              <Card key={group.id}>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between mb-3">
                    <Badge className={getTypeColor(group.type)}>
                      {group.type}
                    </Badge>
                    <div className={`w-3 h-3 rounded-full ${
                      group.status === 'active' ? 'bg-green-500' : 
                      group.status === 'pending' ? 'bg-yellow-500' : 'bg-gray-500'
                    }`} />
                  </div>
                  
                  <h3 className="font-medium text-gray-900 mb-2">{group.name}</h3>
                  <div className="space-y-2 text-sm text-gray-600">
                    <div className="flex items-center space-x-2">
                      <Users className="h-4 w-4" />
                      <span>{group.members} membres</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Clock className="h-4 w-4" />
                      <span>Dernier contact: {new Date(group.lastCommunication).toLocaleDateString('fr-FR')}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Calendar className="h-4 w-4" />
                      <span>Prochain: {new Date(group.nextScheduled).toLocaleDateString('fr-FR')}</span>
                    </div>
                  </div>
                  
                  <div className="mt-4 space-y-2">
                    <Button 
                      size="sm" 
                      variant="outline" 
                      onClick={() => schedulePresentation(group.id)}
                      className="w-full"
                    >
                      <Send className="h-4 w-4 mr-2" />
                      Programmer
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* Rapports */}
        <TabsContent value="reports" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {reports.map((report) => (
              <Card key={report.id}>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-lg">{report.title}</CardTitle>
                    <Badge variant={
                      report.status === 'approved' ? 'default' :
                      report.status === 'review' ? 'secondary' : 'outline'
                    }>
                      {report.status}
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div>
                      <p className="text-sm font-medium text-gray-700">Type de rapport</p>
                      <p className="text-sm text-gray-600 capitalize">{report.type}</p>
                    </div>
                    
                    <div>
                      <p className="text-sm font-medium text-gray-700">Audience cible</p>
                      <div className="flex flex-wrap gap-1 mt-1">
                        {report.targetAudience.map((audience, index) => (
                          <Badge key={index} variant="outline" className="text-xs">
                            {audience}
                          </Badge>
                        ))}
                      </div>
                    </div>
                    
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <p className="font-medium text-gray-700">Créé</p>
                        <p className="text-gray-600">{new Date(report.createdAt).toLocaleDateString('fr-FR')}</p>
                      </div>
                      <div>
                        <p className="font-medium text-gray-700">Modifié</p>
                        <p className="text-gray-600">{new Date(report.lastModified).toLocaleDateString('fr-FR')}</p>
                      </div>
                    </div>
                    
                    <div className="flex space-x-2 pt-2">
                      <Button size="sm" variant="outline" className="flex-1">
                        <Eye className="h-4 w-4 mr-2" />
                        Aperçu
                      </Button>
                      <Button 
                        size="sm" 
                        onClick={() => generateReport(report.id)}
                        className="flex-1"
                      >
                        <Download className="h-4 w-4 mr-2" />
                        Télécharger
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* Communications */}
        <TabsContent value="communications" className="space-y-6">
          <div className="space-y-4">
            {communications.map((comm) => (
              <Card key={comm.id}>
                <CardContent className="p-6">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center space-x-3 mb-2">
                        <div className="flex-shrink-0">
                          {comm.type === 'presentation' && <FileText className="h-5 w-5 text-blue-500" />}
                          {comm.type === 'meeting' && <Users className="h-5 w-5 text-green-500" />}
                          {comm.type === 'training' && <CheckCircle className="h-5 w-5 text-purple-500" />}
                          {comm.type === 'report' && <Mail className="h-5 w-5 text-orange-500" />}
                        </div>
                        <h3 className="text-lg font-medium text-gray-900">{comm.title}</h3>
                      </div>
                      
                      <p className="text-gray-600 mb-3">{comm.description}</p>
                      
                      <div className="flex items-center space-x-6 text-sm text-gray-500">
                        <div className="flex items-center space-x-2">
                          <Calendar className="h-4 w-4" />
                          <span>{new Date(comm.scheduledDate).toLocaleDateString('fr-FR')}</span>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Users className="h-4 w-4" />
                          <span>{comm.stakeholders.join(', ')}</span>
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      <Badge 
                        variant={comm.status === 'scheduled' ? 'default' : 
                                comm.status === 'completed' ? 'secondary' : 'destructive'}
                      >
                        {comm.status}
                      </Badge>
                      {comm.status === 'scheduled' && (
                        <Button size="sm" variant="outline">
                          Modifier
                        </Button>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* Templates */}
        <TabsContent value="templates" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {[
              { name: 'Rapport Exécutif', description: 'Synthèse pour la direction', type: 'executive' },
              { name: 'Rapport Technique', description: 'Détails techniques complets', type: 'technical' },
              { name: 'Présentation CODIR', description: 'Template pour comité de direction', type: 'presentation' },
              { name: 'Briefing Sécurité', description: 'Points sécurité réguliers', type: 'briefing' },
              { name: 'Rapport Conformité', description: 'Conformité réglementaire', type: 'compliance' },
              { name: 'Plan de Communication', description: 'Planning de communication', type: 'planning' }
            ].map((template, index) => (
              <Card key={index}>
                <CardContent className="p-4">
                  <div className="space-y-3">
                    <div>
                      <h3 className="font-medium text-gray-900">{template.name}</h3>
                      <p className="text-sm text-gray-600">{template.description}</p>
                    </div>
                    
                    <div className="flex space-x-2">
                      <Button size="sm" variant="outline" className="flex-1">
                        <Eye className="h-4 w-4 mr-2" />
                        Aperçu
                      </Button>
                      <Button size="sm" className="flex-1">
                        <Download className="h-4 w-4 mr-2" />
                        Utiliser
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
} 