import { useCallback, useMemo } from 'react';
import { useSelector } from 'react-redux';
import { RootState } from '@/store';
import { 
  WORKSHOP_VALIDATION_CRITERIA, 
  EbiosUtils,
  EBIOS_VALIDATION_RULES 
} from '@/lib/ebios-constants';
import type { 
  BusinessValue, 
  DreadedEvent, 
  RiskSource, 
  StrategicScenario,
  SupportingAsset,
  Mission,
  WorkshopValidation 
} from '@/types/ebios';

export interface EbiosProgressState {
  workshop1: {
    completed: boolean;
    validationResults: WorkshopValidation[];
    completionPercentage: number;
    unlocksNext: boolean;
  };
  workshop2: {
    completed: boolean;
    validationResults: WorkshopValidation[];
    completionPercentage: number;
    unlocksNext: boolean;
    locked: boolean;
  };
  workshop3: {
    completed: boolean;
    validationResults: WorkshopValidation[];
    completionPercentage: number;
    unlocksNext: boolean;
    locked: boolean;
  };
  workshop4: {
    completed: boolean;
    validationResults: WorkshopValidation[];
    completionPercentage: number;
    unlocksNext: boolean;
    locked: boolean;
  };
  workshop5: {
    completed: boolean;
    validationResults: WorkshopValidation[];
    completionPercentage: number;
    unlocksNext: boolean;
    locked: boolean;
  };
}

export const useEbiosValidation = (missionId?: string) => {
  // Récupération des données depuis le store Redux
  const mission = useSelector((state: RootState) => 
    state.missions.missions.find(m => m.id === missionId)
  );
  const businessValues = useSelector((state: RootState) => state.businessValues.values);
  const dreadedEvents = useSelector((state: RootState) => state.dreadedEvents?.events || []);
  const riskSources = useSelector((state: RootState) => state.riskSources?.sources || []);
  const strategicScenarios = useSelector((state: RootState) => state.strategicScenarios?.scenarios || []);
  const supportingAssets = useSelector((state: RootState) => state.supportingAssets?.assets || []);

  // Validation de l'Atelier 1 : Cadrage et Valeurs Métier
  const validateWorkshop1 = useCallback((): WorkshopValidation[] => {
    const criteria = WORKSHOP_VALIDATION_CRITERIA[1];
    
    return criteria.map(criterion => {
      let met = false;
      let evidence = '';

      switch (criterion.criterion) {
        case 'Valeurs métier identifiées':
          met = businessValues.length >= 3; // Minimum 3 valeurs métier
          evidence = `${businessValues.length} valeur(s) métier identifiée(s)`;
          break;
        case 'Actifs supports cartographiés':
          met = supportingAssets.length >= 5; // Minimum 5 actifs supports
          evidence = `${supportingAssets.length} actif(s) support(s) cartographié(s)`;
          break;
        case 'Événements redoutés définis':
          met = dreadedEvents.length >= 3 && businessValues.every(bv => 
            dreadedEvents.some(de => de.businessValueId === bv.id)
          );
          evidence = `${dreadedEvents.length} événement(s) redouté(s) défini(s)`;
          break;
        case 'Socle de sécurité évalué':
          met = mission?.ebiosCompliance?.baselineEvaluated === true;
          evidence = met ? 'Socle de sécurité évalué' : 'Évaluation du socle manquante';
          break;
        case 'Parties prenantes identifiées':
          const totalStakeholders = businessValues.reduce((acc, bv) => 
            acc + (bv.stakeholders?.length || 0), 0
          );
          met = totalStakeholders >= 5;
          evidence = `${totalStakeholders} partie(s) prenante(s) identifiée(s)`;
          break;
      }

      return {
        criterion: criterion.criterion,
        required: criterion.required,
        met,
        evidence
      };
    });
  }, [businessValues, supportingAssets, dreadedEvents, mission]);

  // Validation de l'Atelier 2 : Sources de Risque
  const validateWorkshop2 = useCallback((): WorkshopValidation[] => {
    const criteria = WORKSHOP_VALIDATION_CRITERIA[2];
    
    return criteria.map(criterion => {
      let met = false;
      let evidence = '';

      switch (criterion.criterion) {
        case 'Sources de risque catégorisées':
          met = riskSources.length >= 3;
          evidence = `${riskSources.length} source(s) de risque catégorisée(s)`;
          break;
        case 'Objectifs visés définis':
          const sourcesWithObjectives = riskSources.filter(rs => 
            rs.objectives && rs.objectives.length > 0
          );
          met = sourcesWithObjectives.length === riskSources.length && riskSources.length > 0;
          evidence = `${sourcesWithObjectives.length}/${riskSources.length} source(s) avec objectifs`;
          break;
        case 'Modes opératoires analysés':
          const sourcesWithModes = riskSources.filter(rs => 
            rs.operationalModes && rs.operationalModes.length > 0
          );
          met = sourcesWithModes.length === riskSources.length && riskSources.length > 0;
          evidence = `${sourcesWithModes.length}/${riskSources.length} source(s) avec modes opératoires`;
          break;
        case 'Pertinence évaluée':
          const sourcesWithPertinence = riskSources.filter(rs => 
            rs.pertinence >= 1 && rs.pertinence <= 4
          );
          met = sourcesWithPertinence.length === riskSources.length && riskSources.length > 0;
          evidence = `${sourcesWithPertinence.length}/${riskSources.length} source(s) avec pertinence évaluée`;
          break;
      }

      return {
        criterion: criterion.criterion,
        required: criterion.required,
        met,
        evidence
      };
    });
  }, [riskSources]);

  // Validation de l'Atelier 3 : Scénarios Stratégiques
  const validateWorkshop3 = useCallback((): WorkshopValidation[] => {
    const criteria = WORKSHOP_VALIDATION_CRITERIA[3];
    
    return criteria.map(criterion => {
      let met = false;
      let evidence = '';

      switch (criterion.criterion) {
        case 'Scénarios stratégiques construits':
          met = strategicScenarios.length >= 1;
          evidence = `${strategicScenarios.length} scénario(s) stratégique(s) construit(s)`;
          break;
        case 'Chemins d\'attaque identifiés':
          const totalPathways = strategicScenarios.reduce((acc, s) => 
            acc + (s.pathways?.length || 0), 0
          );
          met = totalPathways >= strategicScenarios.length && strategicScenarios.length > 0;
          evidence = `${totalPathways} chemin(s) d'attaque identifié(s)`;
          break;
        case 'Vraisemblance évaluée':
          const scenariosWithLikelihood = strategicScenarios.filter(s => 
            s.likelihood >= 1 && s.likelihood <= 4
          );
          met = scenariosWithLikelihood.length === strategicScenarios.length && strategicScenarios.length > 0;
          evidence = `${scenariosWithLikelihood.length}/${strategicScenarios.length} vraisemblance(s) évaluée(s)`;
          break;
        case 'Gravité évaluée':
          const scenariosWithGravity = strategicScenarios.filter(s => 
            s.gravity >= 1 && s.gravity <= 4
          );
          met = scenariosWithGravity.length === strategicScenarios.length && strategicScenarios.length > 0;
          evidence = `${scenariosWithGravity.length}/${strategicScenarios.length} gravité(s) évaluée(s)`;
          break;
        case 'Niveau de risque calculé':
          const scenariosWithRisk = strategicScenarios.filter(s => 
            s.riskLevel >= 1 && s.riskLevel <= 4
          );
          met = scenariosWithRisk.length === strategicScenarios.length && strategicScenarios.length > 0;
          evidence = `${scenariosWithRisk.length}/${strategicScenarios.length} niveau(x) de risque calculé(s)`;
          break;
      }

      return {
        criterion: criterion.criterion,
        required: criterion.required,
        met,
        evidence
      };
    });
  }, [strategicScenarios]);

  // Validation croisée entre ateliers
  const validateCrossWorkshopConsistency = useCallback(() => {
    return EbiosUtils.validateCrossWorkshopConsistency(
      businessValues,
      dreadedEvents,
      riskSources,
      strategicScenarios
    );
  }, [businessValues, dreadedEvents, riskSources, strategicScenarios]);

  // Calcul de l'état de progression global
  const progressState = useMemo((): EbiosProgressState => {
    const workshop1Validation = validateWorkshop1();
    const workshop2Validation = validateWorkshop2();
    const workshop3Validation = validateWorkshop3();

    const workshop1Required = workshop1Validation.filter(v => v.required);
    const workshop1Complete = workshop1Required.every(v => v.met);
    const workshop1Percentage = EbiosUtils.calculateWorkshopCompletion(workshop1Validation);

    const workshop2Required = workshop2Validation.filter(v => v.required);
    const workshop2Complete = workshop2Required.every(v => v.met) && workshop1Complete;
    const workshop2Percentage = EbiosUtils.calculateWorkshopCompletion(workshop2Validation);

    const workshop3Required = workshop3Validation.filter(v => v.required);
    const workshop3Complete = workshop3Required.every(v => v.met) && workshop2Complete;
    const workshop3Percentage = EbiosUtils.calculateWorkshopCompletion(workshop3Validation);

    return {
      workshop1: {
        completed: workshop1Complete,
        validationResults: workshop1Validation,
        completionPercentage: workshop1Percentage,
        unlocksNext: workshop1Complete
      },
      workshop2: {
        completed: workshop2Complete,
        validationResults: workshop2Validation,
        completionPercentage: workshop2Percentage,
        unlocksNext: workshop2Complete,
        locked: !workshop1Complete
      },
      workshop3: {
        completed: workshop3Complete,
        validationResults: workshop3Validation,
        completionPercentage: workshop3Percentage,
        unlocksNext: workshop3Complete,
        locked: !workshop2Complete
      },
      workshop4: {
        completed: false, // TODO: implémenter validation workshop 4
        validationResults: [],
        completionPercentage: 0,
        unlocksNext: false,
        locked: !workshop3Complete
      },
      workshop5: {
        completed: false, // TODO: implémenter validation workshop 5
        validationResults: [],
        completionPercentage: 0,
        unlocksNext: false,
        locked: true // Toujours verrouillé tant que 4 n'est pas complété
      }
    };
  }, [validateWorkshop1, validateWorkshop2, validateWorkshop3]);

  // Fonction utilitaire pour vérifier si un atelier peut être accédé
  const canAccessWorkshop = useCallback((workshopNumber: number): boolean => {
    switch (workshopNumber) {
      case 1:
        return true; // Toujours accessible
      case 2:
        return progressState.workshop1.unlocksNext;
      case 3:
        return progressState.workshop2.unlocksNext;
      case 4:
        return progressState.workshop3.unlocksNext;
      case 5:
        return progressState.workshop4.unlocksNext;
      default:
        return false;
    }
  }, [progressState]);

  // Fonction pour obtenir le prochain atelier recommandé
  const getNextRecommendedWorkshop = useCallback((): number => {
    if (!progressState.workshop1.completed) return 1;
    if (!progressState.workshop2.completed) return 2;
    if (!progressState.workshop3.completed) return 3;
    if (!progressState.workshop4.completed) return 4;
    return 5;
  }, [progressState]);

  return {
    progressState,
    validateWorkshop1,
    validateWorkshop2,
    validateWorkshop3,
    validateCrossWorkshopConsistency,
    canAccessWorkshop,
    getNextRecommendedWorkshop,
    mission
  };
}; 