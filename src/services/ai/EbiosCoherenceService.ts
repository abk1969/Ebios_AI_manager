/**
 * Service de v√©rification de coh√©rence EBIOS RM
 * V√©rifie la conformit√© avec la m√©thode ANSSI et la coh√©rence inter-ateliers
 */

import { 
  Mission,
  BusinessValue, 
  RiskSource, 
  DreadedEvent,
  SupportingAsset,
  Stakeholder,
  StrategicScenario,
  OperationalScenario,
  SecurityMeasure,
  AttackPath
} from '@/types/ebios';

interface CoherenceIssue {
  severity: 'error' | 'warning' | 'info';
  workshop: number;
  field: string;
  message: string;
  suggestion?: string;
}

interface WorkshopStatus {
  workshop: number;
  completionRate: number;
  isValid: boolean;
  issues: CoherenceIssue[];
}

interface GlobalCoherence {
  overallScore: number; // 0-1
  isCompliant: boolean;
  workshopStatuses: WorkshopStatus[];
  criticalIssues: CoherenceIssue[];
  recommendations: string[];
}

// üÜï Export du type pour AICoherenceIndicator
export interface CoherenceCheckResult {
  overallScore: number;
  isCompliant: boolean;
  workshopScores?: Record<number, number>;
  criticalIssues: Array<{
    type: 'missing' | 'invalid' | 'inconsistent' | 'incomplete';
    severity: 'critical' | 'major' | 'minor';
    workshop: number;
    entity: string;
    message: string;
    field?: string;
  }>;
  recommendations: string[];
  suggestedActions?: Array<{
    action: string;
    target: string;
    priority: 'high' | 'medium' | 'low';
  }>;
}

export class EbiosCoherenceService {
  /**
   * V√©rifie la coh√©rence d'une entit√© sp√©cifique
   */
  async checkEntityCoherence(
    entityType: string,
    entityId: string,
    data: any
  ): Promise<CoherenceCheckResult> {
    // Simulation pour l'instant
    const score = Math.random() * 0.4 + 0.6; // Entre 0.6 et 1
    
    return {
      overallScore: score,
      isCompliant: score >= 0.8,
      criticalIssues: [],
      recommendations: ["Compl√©ter les champs manquants", "V√©rifier la coh√©rence avec les autres entit√©s"],
      suggestedActions: []
    };
  }

  /**
   * V√©rifie la coh√©rence d'un atelier sp√©cifique
   */
  async checkWorkshopCoherence(
    workshop: 1 | 2 | 3 | 4 | 5,
    missionId: string,
    data: any
  ): Promise<CoherenceCheckResult> {
    // Pour l'instant, on utilise la logique existante pour un atelier sp√©cifique
    let workshopStatus: WorkshopStatus;
    
    switch (workshop) {
      case 1:
        workshopStatus = this.checkWorkshop1(data);
        break;
      case 2:
        workshopStatus = this.checkWorkshop2(data);
        break;
      case 3:
        workshopStatus = this.checkWorkshop3(data);
        break;
      case 4:
        workshopStatus = this.checkWorkshop4(data);
        break;
      case 5:
        workshopStatus = this.checkWorkshop5(data);
        break;
    }
    
    const criticalIssues = workshopStatus.issues
      .filter(issue => issue.severity === 'error')
      .map(issue => ({
        type: 'missing' as const,
        severity: 'critical' as const,
        workshop: workshop,
        entity: issue.field,
        message: issue.message,
        field: issue.field
      }));
    
    return {
      overallScore: workshopStatus.completionRate,
      isCompliant: workshopStatus.isValid,
      workshopScores: { [workshop]: workshopStatus.completionRate },
      criticalIssues,
      recommendations: workshopStatus.issues
        .filter(i => i.suggestion)
        .map(i => i.suggestion!),
      suggestedActions: []
    };
  }

  /**
   * V√©rifie la coh√©rence globale d'une mission EBIOS RM
   */
  async checkMissionCoherence(missionId: string, data: {
    mission: Mission;
    businessValues: BusinessValue[];
    supportingAssets: SupportingAsset[];
    dreadedEvents: DreadedEvent[];
    riskSources: RiskSource[];
    stakeholders: Stakeholder[];
    strategicScenarios: StrategicScenario[];
    operationalScenarios: OperationalScenario[];
    securityMeasures: SecurityMeasure[];
    attackPaths: AttackPath[];
  }): Promise<CoherenceCheckResult> {
    
    const workshopStatuses: WorkshopStatus[] = [];
    const allIssues: CoherenceIssue[] = [];

    // V√©rifier chaque atelier
    const workshop1Status = this.checkWorkshop1(data);
    const workshop2Status = this.checkWorkshop2(data);
    const workshop3Status = this.checkWorkshop3(data);
    const workshop4Status = this.checkWorkshop4(data);
    const workshop5Status = this.checkWorkshop5(data);

    workshopStatuses.push(workshop1Status, workshop2Status, workshop3Status, workshop4Status, workshop5Status);
    allIssues.push(
      ...workshop1Status.issues,
      ...workshop2Status.issues,
      ...workshop3Status.issues,
      ...workshop4Status.issues,
      ...workshop5Status.issues
    );

    // V√©rifier la coh√©rence inter-ateliers
    const interWorkshopIssues = this.checkInterWorkshopCoherence(data);
    allIssues.push(...interWorkshopIssues);

    // Calculer le score global
    const overallScore = this.calculateOverallScore(workshopStatuses);
    const criticalIssues = allIssues.filter(issue => issue.severity === 'error');
    const isCompliant = criticalIssues.length === 0 && overallScore >= 0.8;

    // G√©n√©rer des recommandations
    const recommendations = this.generateRecommendations(allIssues, workshopStatuses);

    // Calculer les scores par atelier
    const workshopScores: Record<number, number> = {};
    workshopStatuses.forEach(ws => {
      workshopScores[ws.workshop] = ws.completionRate;
    });

    // Convertir les issues critiques au format attendu
    const formattedCriticalIssues = criticalIssues.map(issue => ({
      type: 'missing' as const,
      severity: issue.severity === 'error' ? 'critical' as const : 'major' as const,
      workshop: issue.workshop,
      entity: issue.field,
      message: issue.message,
      field: issue.field
    }));

    return {
      overallScore,
      isCompliant,
      workshopScores,
      criticalIssues: formattedCriticalIssues,
      recommendations,
      suggestedActions: []
    };
  }

  /**
   * Atelier 1 : Cadrage et socle de s√©curit√©
   */
  private checkWorkshop1(data: any): WorkshopStatus {
    const issues: CoherenceIssue[] = [];
    let completionRate = 0;
    let completedItems = 0;
    const totalItems = 5;

    // 1. Mission d√©finie
    if (data.mission) {
      completedItems++;
    } else {
      issues.push({
        severity: 'error',
        workshop: 1,
        field: 'mission',
        message: 'Aucune mission d√©finie',
        suggestion: 'D√©finissez la mission et le p√©rim√®tre de l\'analyse EBIOS RM'
      });
    }

    // 2. Valeurs m√©tier
    if (data.businessValues && data.businessValues.length > 0) {
      completedItems++;
      
      // V√©rifier que chaque valeur a une nature (pour Access)
      data.businessValues.forEach((bv: BusinessValue) => {
        if (!bv.category && !bv.natureValeurMetier) {
          issues.push({
            severity: 'warning',
            workshop: 1,
            field: 'businessValue.category',
            message: `Valeur m√©tier "${bv.name}" sans cat√©gorie ni nature`,
            suggestion: 'D√©finissez la cat√©gorie (primary/support/management) ou la nature (PROCESSUS/INFORMATION)'
          });
        }
      });
    } else {
      issues.push({
        severity: 'error',
        workshop: 1,
        field: 'businessValues',
        message: 'Aucune valeur m√©tier identifi√©e',
        suggestion: 'Identifiez au moins une valeur m√©tier essentielle'
      });
    }

    // 3. Biens supports
    if (data.supportingAssets && data.supportingAssets.length > 0) {
      completedItems++;
      
      // V√©rifier les liens avec les valeurs m√©tier
      const orphanAssets = data.supportingAssets.filter((sa: SupportingAsset) =>
        !data.businessValues?.some((bv: BusinessValue) => bv.id === sa.businessValueId)
      );
      
      if (orphanAssets.length > 0) {
        issues.push({
          severity: 'error',
          workshop: 1,
          field: 'supportingAssets',
          message: `${orphanAssets.length} bien(s) support(s) sans valeur m√©tier associ√©e`,
          suggestion: 'Associez chaque bien support √† une valeur m√©tier'
        });
      }
    } else {
      issues.push({
        severity: 'warning',
        workshop: 1,
        field: 'supportingAssets',
        message: 'Aucun bien support identifi√©',
        suggestion: 'Identifiez les biens supports pour chaque valeur m√©tier'
      });
    }

    // 4. √âv√©nements redout√©s
    if (data.dreadedEvents && data.dreadedEvents.length > 0) {
      completedItems++;
      
      // V√©rifier la compl√©tude
      data.dreadedEvents.forEach((de: DreadedEvent) => {
        if (!de.gravity) {
          issues.push({
            severity: 'error',
            workshop: 1,
            field: 'dreadedEvent.gravity',
            message: `√âv√©nement redout√© "${de.name}" sans gravit√© d√©finie`,
            suggestion: '√âvaluez la gravit√© de 1 (n√©gligeable) √† 4 (critique)'
          });
        }
        
        if (!de.consequences && !de.impactsList?.length) {
          issues.push({
            severity: 'warning',
            workshop: 1,
            field: 'dreadedEvent.consequences',
            message: `√âv√©nement redout√© "${de.name}" sans impacts d√©finis`,
            suggestion: 'D√©crivez les impacts potentiels'
          });
        }
      });
    } else {
      issues.push({
        severity: 'error',
        workshop: 1,
        field: 'dreadedEvents',
        message: 'Aucun √©v√©nement redout√© identifi√©',
        suggestion: 'Identifiez les √©v√©nements redout√©s pour chaque valeur m√©tier'
      });
    }

    // 5. Socle de s√©curit√© (optionnel mais recommand√©)
    // TODO: V√©rifier si un socle de s√©curit√© est d√©fini

    completionRate = completedItems / totalItems;
    const isValid = issues.filter(i => i.severity === 'error').length === 0;

    return {
      workshop: 1,
      completionRate,
      isValid,
      issues
    };
  }

  /**
   * Atelier 2 : Sources de risque
   */
  private checkWorkshop2(data: any): WorkshopStatus {
    const issues: CoherenceIssue[] = [];
    let completionRate = 0;
    let completedItems = 0;
    const totalItems = 3;

    // 1. Sources de risque identifi√©es
    if (data.riskSources && data.riskSources.length > 0) {
      completedItems++;
      
      data.riskSources.forEach((rs: RiskSource) => {
        // V√©rifier la cat√©gorie
        if (!rs.category && !rs.categoryAuto) {
          issues.push({
            severity: 'error',
            workshop: 2,
            field: 'riskSource.category',
            message: `Source de risque "${rs.name}" sans cat√©gorie`,
            suggestion: 'D√©finissez ou laissez l\'IA d√©duire la cat√©gorie'
          });
        }
        
        // V√©rifier l'√©valuation
        if (!rs.motivation || !rs.resources || !rs.expertise) {
          issues.push({
            severity: 'warning',
            workshop: 2,
            field: 'riskSource.evaluation',
            message: `Source de risque "${rs.name}" incompl√®tement √©valu√©e`,
            suggestion: '√âvaluez motivation, ressources et expertise'
          });
        }
      });
    } else {
      issues.push({
        severity: 'error',
        workshop: 2,
        field: 'riskSources',
        message: 'Aucune source de risque identifi√©e',
        suggestion: 'Identifiez au moins une source de risque pertinente'
      });
    }

    // 2. Objectifs vis√©s
    const hasObjectives = data.riskSources?.some((rs: RiskSource) =>
      rs.objectives && rs.objectives.length > 0
    );
    
    if (hasObjectives) {
      completedItems++;
    } else {
      issues.push({
        severity: 'error',
        workshop: 2,
        field: 'objectives',
        message: 'Aucun objectif vis√© d√©fini',
        suggestion: 'D√©finissez les objectifs pour chaque source de risque retenue'
      });
    }

    // 3. Pertinence √©valu√©e
    const allEvaluated = data.riskSources?.every((rs: RiskSource) =>
      rs.pertinence !== undefined
    );
    
    if (allEvaluated) {
      completedItems++;
    } else {
      issues.push({
        severity: 'warning',
        workshop: 2,
        field: 'pertinence',
        message: 'Certaines sources de risque sans pertinence √©valu√©e',
        suggestion: '√âvaluez la pertinence de chaque source'
      });
    }

    completionRate = completedItems / totalItems;
    const isValid = issues.filter(i => i.severity === 'error').length === 0;

    return {
      workshop: 2,
      completionRate,
      isValid,
      issues
    };
  }

  /**
   * Atelier 3 : Sc√©narios strat√©giques
   */
  private checkWorkshop3(data: any): WorkshopStatus {
    const issues: CoherenceIssue[] = [];
    let completionRate = 0;
    let completedItems = 0;
    const totalItems = 4;

    // 1. Parties prenantes
    if (data.stakeholders && data.stakeholders.length > 0) {
      completedItems++;
      
      // V√©rifier l'√©valuation de l'exposition
      data.stakeholders.forEach((s: Stakeholder) => {
        if (!s.exposureLevel || !s.cyberReliability) {
          issues.push({
            severity: 'warning',
            workshop: 3,
            field: 'stakeholder.evaluation',
            message: `Partie prenante "${s.name}" incompl√®tement √©valu√©e`,
            suggestion: '√âvaluez l\'exposition et la fiabilit√© cyber'
          });
        }
      });
    } else {
      issues.push({
        severity: 'error',
        workshop: 3,
        field: 'stakeholders',
        message: 'Aucune partie prenante identifi√©e',
        suggestion: 'Cartographiez l\'√©cosyst√®me (clients, fournisseurs, partenaires...)'
      });
    }

    // 2. Chemins d'attaque
    if (data.attackPaths && data.attackPaths.length > 0) {
      completedItems++;
      
      // V√©rifier les attaques directes vs indirectes
      const directAttacks = data.attackPaths.filter((ap: AttackPath) => 
        ap.isDirect || !ap.stakeholderId
      );
      
      const indirectAttacks = data.attackPaths.filter((ap: AttackPath) => 
        !ap.isDirect && ap.stakeholderId
      );
      
      if (directAttacks.length === 0 && indirectAttacks.length === 0) {
        issues.push({
          severity: 'error',
          workshop: 3,
          field: 'attackPaths.type',
          message: 'Chemins d\'attaque mal typ√©s (directs vs via √©cosyst√®me)',
          suggestion: 'Distinguez les attaques directes des attaques via l\'√©cosyst√®me'
        });
      }
    } else {
      issues.push({
        severity: 'error',
        workshop: 3,
        field: 'attackPaths',
        message: 'Aucun chemin d\'attaque d√©fini',
        suggestion: 'Identifiez les chemins d\'attaque possibles'
      });
    }

    // 3. Sc√©narios strat√©giques
    if (data.strategicScenarios && data.strategicScenarios.length > 0) {
      completedItems++;
      
      // V√©rifier la compl√©tude
      data.strategicScenarios.forEach((ss: StrategicScenario) => {
        if (!ss.likelihood || !ss.gravity) {
          issues.push({
            severity: 'error',
            workshop: 3,
            field: 'strategicScenario.evaluation',
            message: `Sc√©nario "${ss.name}" sans √©valuation compl√®te`,
            suggestion: '√âvaluez vraisemblance et gravit√©'
          });
        }
      });
    } else {
      issues.push({
        severity: 'warning',
        workshop: 3,
        field: 'strategicScenarios',
        message: 'Aucun sc√©nario strat√©gique formalis√©',
        suggestion: 'Formalisez les sc√©narios strat√©giques'
      });
    }

    // 4. Coh√©rence des liens
    const hasCoherentLinks = this.checkStrategicLinks(data);
    if (hasCoherentLinks) {
      completedItems++;
    }

    completionRate = completedItems / totalItems;
    const isValid = issues.filter(i => i.severity === 'error').length === 0;

    return {
      workshop: 3,
      completionRate,
      isValid,
      issues
    };
  }

  /**
   * Atelier 4 : Sc√©narios op√©rationnels
   */
  private checkWorkshop4(data: any): WorkshopStatus {
    const issues: CoherenceIssue[] = [];
    let completionRate = 0;
    let completedItems = 0;
    const totalItems = 3;

    // 1. Actions √©l√©mentaires d√©taill√©es
    const pathsWithActions = data.attackPaths?.filter((ap: AttackPath) =>
      ap.actions && ap.actions.length > 0
    ) || [];
    
    if (pathsWithActions.length > 0) {
      completedItems++;
      
      // V√©rifier le s√©quencement
      pathsWithActions.forEach((ap: AttackPath) => {
        const hasSequence = ap.actions.every((a: any) => a.sequence !== undefined);
        if (!hasSequence) {
          issues.push({
            severity: 'warning',
            workshop: 4,
            field: 'attackPath.sequence',
            message: `Chemin "${ap.name}" avec actions non s√©quenc√©es`,
            suggestion: 'Ordonnez les actions dans l\'ordre chronologique'
          });
        }
      });
    } else {
      issues.push({
        severity: 'error',
        workshop: 4,
        field: 'attackActions',
        message: 'Aucune action √©l√©mentaire d√©taill√©e',
        suggestion: 'D√©taillez les actions pour chaque chemin d\'attaque'
      });
    }

    // 2. Sc√©narios op√©rationnels
    if (data.operationalScenarios && data.operationalScenarios.length > 0) {
      completedItems++;
      
      // V√©rifier l'√©valuation technique
      data.operationalScenarios.forEach((os: OperationalScenario) => {
        if (!os.difficulty || !os.detectability) {
          issues.push({
            severity: 'warning',
            workshop: 4,
            field: 'operationalScenario.technical',
            message: `Sc√©nario "${os.name}" sans √©valuation technique`,
            suggestion: '√âvaluez difficult√© et d√©tectabilit√©'
          });
        }
      });
    } else {
      issues.push({
        severity: 'warning',
        workshop: 4,
        field: 'operationalScenarios',
        message: 'Aucun sc√©nario op√©rationnel formalis√©',
        suggestion: 'D√©taillez les modes op√©ratoires'
      });
    }

    // 3. Vraisemblance technique
    const hasLikelihoodAssessment = data.operationalScenarios?.some((os: OperationalScenario) =>
      os.difficulty !== undefined
    );
    
    if (hasLikelihoodAssessment) {
      completedItems++;
    }

    completionRate = completedItems / totalItems;
    const isValid = issues.filter(i => i.severity === 'error').length === 0;

    return {
      workshop: 4,
      completionRate,
      isValid,
      issues
    };
  }

  /**
   * Atelier 5 : Traitement du risque
   */
  private checkWorkshop5(data: any): WorkshopStatus {
    const issues: CoherenceIssue[] = [];
    let completionRate = 0;
    let completedItems = 0;
    const totalItems = 4;

    // 1. Mesures de s√©curit√© d√©finies
    if (data.securityMeasures && data.securityMeasures.length > 0) {
      completedItems++;
      
      // V√©rifier la compl√©tude (ISO optionnel en mode Access)
      data.securityMeasures.forEach((sm: SecurityMeasure) => {
        if (!sm.controlType) {
          issues.push({
            severity: 'error',
            workshop: 5,
            field: 'securityMeasure.type',
            message: `Mesure "${sm.name}" sans type de contr√¥le`,
            suggestion: 'D√©finissez le type (preventive, detective, corrective, directive)'
          });
        }
        
        if (!sm.effectiveness) {
          issues.push({
            severity: 'warning',
            workshop: 5,
            field: 'securityMeasure.effectiveness',
            message: `Mesure "${sm.name}" sans efficacit√© √©valu√©e`,
            suggestion: '√âvaluez l\'efficacit√© attendue'
          });
        }
      });
    } else {
      issues.push({
        severity: 'error',
        workshop: 5,
        field: 'securityMeasures',
        message: 'Aucune mesure de s√©curit√© d√©finie',
        suggestion: 'D√©finissez un plan de traitement du risque'
      });
    }

    // 2. Couverture des sc√©narios
    const scenariosWithMeasures = this.checkScenarioCoverage(data);
    if (scenariosWithMeasures.uncovered === 0) {
      completedItems++;
    } else {
      issues.push({
        severity: 'warning',
        workshop: 5,
        field: 'coverage',
        message: `${scenariosWithMeasures.uncovered} sc√©nario(s) sans mesures`,
        suggestion: 'Assurez-vous que chaque sc√©nario a des mesures associ√©es'
      });
    }

    // 3. Plan de mise en ≈ìuvre
    const hasPlan = data.securityMeasures?.every((sm: SecurityMeasure) =>
      sm.dueDate && sm.responsibleParty && sm.status
    );
    
    if (hasPlan) {
      completedItems++;
    } else {
      issues.push({
        severity: 'warning',
        workshop: 5,
        field: 'implementationPlan',
        message: 'Plan de mise en ≈ìuvre incomplet',
        suggestion: 'D√©finissez √©ch√©ances et responsables pour chaque mesure'
      });
    }

    // 4. Risque r√©siduel √©valu√©
    const hasResidualRisk = data.securityMeasures?.some((sm: SecurityMeasure) =>
      sm.implementation?.residualRisk !== undefined
    );
    
    if (hasResidualRisk) {
      completedItems++;
    }

    completionRate = completedItems / totalItems;
    const isValid = issues.filter(i => i.severity === 'error').length === 0;

    return {
      workshop: 5,
      completionRate,
      isValid,
      issues
    };
  }

  /**
   * V√©rifie la coh√©rence entre les ateliers
   */
  private checkInterWorkshopCoherence(data: any): CoherenceIssue[] {
    const issues: CoherenceIssue[] = [];

    // 1. V√©rifier que chaque √©v√©nement redout√© a au moins un sc√©nario
    data.dreadedEvents.forEach((de: DreadedEvent) => {
      const hasScenario = data.strategicScenarios.some((ss: StrategicScenario) => 
        ss.dreadedEventId === de.id
      );
      
      if (!hasScenario) {
        issues.push({
          severity: 'warning',
          workshop: 3,
          field: 'dreadedEvent.scenario',
          message: `√âv√©nement redout√© "${de.name}" sans sc√©nario associ√©`,
          suggestion: 'Cr√©ez au moins un sc√©nario pour chaque √©v√©nement redout√©'
        });
      }
    });

    // 2. V√©rifier que chaque source de risque retenue a des chemins d'attaque
    const retainedSources = data.riskSources.filter((rs: RiskSource) => 
      rs.pertinence && rs.pertinence >= 2
    );
    
    retainedSources.forEach((rs: RiskSource) => {
      const hasPaths = data.attackPaths.some((ap: AttackPath) => 
        ap.sourceRisqueNom === rs.name || 
        data.strategicScenarios.some((ss: StrategicScenario) => 
          ss.riskSourceId === rs.id
        )
      );
      
      if (!hasPaths) {
        issues.push({
          severity: 'warning',
          workshop: 3,
          field: 'riskSource.paths',
          message: `Source de risque "${rs.name}" retenue sans chemins d'attaque`,
          suggestion: 'D√©finissez les chemins d\'attaque possibles'
        });
      }
    });

    // 3. V√©rifier la tra√ßabilit√© compl√®te
    // TODO: Impl√©menter une v√©rification de tra√ßabilit√© bout en bout

    return issues;
  }

  /**
   * V√©rifie les liens strat√©giques
   */
  private checkStrategicLinks(data: any): boolean {
    // V√©rifier que les sc√©narios sont li√©s aux bons √©l√©ments
    let allLinksValid = true;
    
    data.strategicScenarios.forEach((ss: StrategicScenario) => {
      // V√©rifier lien avec source de risque
      const hasValidSource = data.riskSources.some((rs: RiskSource) => 
        rs.id === ss.riskSourceId
      );
      
      // V√©rifier lien avec valeur m√©tier
      const hasValidTarget = data.businessValues.some((bv: BusinessValue) => 
        bv.id === ss.targetBusinessValueId
      );
      
      if (!hasValidSource || !hasValidTarget) {
        allLinksValid = false;
      }
    });
    
    return allLinksValid;
  }

  /**
   * V√©rifie la couverture des sc√©narios
   */
  private checkScenarioCoverage(data: any): { total: number; covered: number; uncovered: number } {
    const allScenarios = [
      ...data.strategicScenarios,
      ...data.operationalScenarios
    ];
    
    let covered = 0;
    
    allScenarios.forEach((scenario: any) => {
      const hasMeasures = data.securityMeasures.some((sm: SecurityMeasure) => 
        sm.targetScenarios?.includes(scenario.id)
      );
      
      if (hasMeasures) {
        covered++;
      }
    });
    
    return {
      total: allScenarios.length,
      covered,
      uncovered: allScenarios.length - covered
    };
  }

  /**
   * Calcule le score global
   */
  private calculateOverallScore(workshopStatuses: WorkshopStatus[]): number {
    const weights = [0.25, 0.20, 0.20, 0.15, 0.20]; // Poids par atelier
    let weightedSum = 0;
    
    workshopStatuses.forEach((status, index) => {
      const workshopScore = status.completionRate * (status.isValid ? 1 : 0.5);
      weightedSum += workshopScore * weights[index];
    });
    
    return Math.min(weightedSum, 1);
  }

  /**
   * G√©n√®re des recommandations
   */
  private generateRecommendations(issues: CoherenceIssue[], statuses: WorkshopStatus[]): string[] {
    const recommendations: string[] = [];
    
    // Recommandations par criticit√©
    const criticalCount = issues.filter(i => i.severity === 'error').length;
    if (criticalCount > 0) {
      recommendations.push(`Corrigez les ${criticalCount} erreurs critiques en priorit√©`);
    }
    
    // Recommandations par atelier
    statuses.forEach(status => {
      if (status.completionRate < 0.5) {
        recommendations.push(`Compl√©tez l'atelier ${status.workshop} (actuellement √† ${Math.round(status.completionRate * 100)}%)`);
      }
    });
    
    // Recommandations sp√©cifiques
    if (!statuses[0].isValid) {
      recommendations.push("Finalisez le cadrage et l'identification des valeurs m√©tier");
    }
    
    if (!statuses[4].isValid) {
      recommendations.push("D√©finissez un plan de traitement du risque complet");
    }
    
    return recommendations;
  }
}

// Export singleton
export const ebiosCoherenceService = new EbiosCoherenceService(); 