/**
 * üîç D√âTECTEUR DE QUALIT√â DES DONN√âES - EBIOS RM
 * Service pour d√©tecter les donn√©es incoh√©rentes, invalides ou de mauvaise qualit√©
 * Recommandation audit CRITIQUE : Validation intelligente des saisies utilisateur
 */

export interface DataQualityIssue {
  id: string;
  // üîë NOUVEAU : Cl√© unique stable bas√©e sur entit√© + champ
  stableKey: string; // Format: "entityType:entityId:fieldName"
  type: 'invalid' | 'incoherent' | 'incomplete' | 'suspicious' | 'low-quality';
  severity: 'low' | 'medium' | 'high' | 'critical';
  field: string;
  value: string;
  // üîí NOUVEAU : Valeur originale pr√©serv√©e
  originalValue: string;
  message: string;
  suggestion: string;
  confidence: number; // 0-1
  autoFixAvailable: boolean;
  suggestedValue?: string;
  // üîç NOUVEAU : M√©tadonn√©es pour tra√ßabilit√©
  entityType?: string;
  entityId?: string;
  correctionCount?: number; // Nombre de corrections appliqu√©es
  lastCorrectionTimestamp?: number;
}

export interface DataQualityReport {
  overallScore: number; // 0-100
  issues: DataQualityIssue[];
  suggestions: string[];
  isValid: boolean;
}

export class DataQualityDetector {
  private idCounter = 0;
  private getCorrectionHistory?: (stableKey: string) => any; // üîó R√©f√©rence au gestionnaire

  // Patterns de d√©tection de donn√©es invalides
  private readonly INVALID_PATTERNS = [
    /^[a-z]+$/i, // Lettres uniquement sans sens
    /^[A-Z]+$/, // Majuscules uniquement
    /^[0-9]+$/, // Chiffres uniquement
    /^(.)\1{3,}$/, // Caract√®res r√©p√©t√©s (aaaa, 1111)
    /^(test|exemple|demo|sample)$/i, // Mots de test
    /^[qwerty]+$/i, // Frappe clavier
    /^[asdf]+$/i, // Frappe clavier
    /^[zxcv]+$/i, // Frappe clavier
    /^[!@#$%^&*()]+$/, // Symboles uniquement
  ];

  // Mots suspects ou de test
  private readonly SUSPICIOUS_WORDS = [
    'test', 'exemple', 'demo', 'sample', 'lorem', 'ipsum', 'placeholder',
    'temp', 'temporary', 'fake', 'dummy', 'mock', 'sdfqsdf', 'azerty',
    'qwerty', 'asdf', 'zxcv', 'aaaa', 'bbbb', 'cccc', '1234', '0000',
    'xxx', 'yyy', 'zzz', 'abc', 'def', 'ghi'
  ];

  // Dictionnaire de suggestions contextuelles EBIOS RM
  private readonly EBIOS_SUGGESTIONS = {
    businessValue: [
      'Chiffre d\'affaires',
      'Donn√©es clients',
      'R√©putation de l\'entreprise',
      'Continuit√© d\'activit√©',
      'Propri√©t√© intellectuelle',
      'Conformit√© r√©glementaire',
      'S√©curit√© du personnel'
    ],
    dreadedEvent: [
      'Atteinte √† la confidentialit√© des donn√©es',
      'Perte de disponibilit√© des services',
      'Alt√©ration de l\'int√©grit√© des donn√©es',
      'Usurpation d\'identit√©',
      'D√©ni de service',
      'Vol de propri√©t√© intellectuelle',
      'Non-conformit√© r√©glementaire'
    ],
    supportingAsset: [
      'Serveur de base de donn√©es',
      'Application web',
      'R√©seau informatique',
      'Personnel IT',
      'Syst√®me de sauvegarde',
      'Pare-feu',
      'Poste de travail utilisateur'
    ]
  };

  /**
   * üîó Configure la r√©f√©rence au gestionnaire de corrections
   */
  setCorrectionManager(getCorrectionHistory: (stableKey: string) => any): void {
    this.getCorrectionHistory = getCorrectionHistory;
  }

  /**
   * G√©n√®re un ID unique pour chaque probl√®me
   */
  private generateUniqueId(prefix: string): string {
    this.idCounter++;
    return `${prefix}-${Date.now()}-${this.idCounter}`;
  }

  /**
   * Analyse la qualit√© d'une valeur m√©tier
   */
  analyzeBusinessValue(name: string, description: string): DataQualityReport {
    const issues: DataQualityIssue[] = [];
    
    // Analyse du nom
    issues.push(...this.analyzeField('name', name, 'businessValue'));
    
    // Analyse de la description
    issues.push(...this.analyzeField('description', description, 'businessValue'));
    
    // V√©rifications sp√©cifiques aux valeurs m√©tier
    if (name && !this.isBusinessValueRealistic(name)) {
      issues.push({
        id: this.generateUniqueId('bv-unrealistic'),
        type: 'incoherent',
        severity: 'high',
        field: 'name',
        value: name,
        message: 'Cette valeur m√©tier ne semble pas r√©aliste pour une organisation',
        suggestion: 'Utilisez des termes m√©tier concrets (ex: "Chiffre d\'affaires", "Donn√©es clients")',
        confidence: 0.8,
        autoFixAvailable: true,
        suggestedValue: this.suggestBusinessValue(name)
      });
    }

    return this.generateReport(issues);
  }

  /**
   * Analyse la qualit√© d'un √©v√©nement redout√©
   */
  analyzeDreadedEvent(name: string, description: string): DataQualityReport {
    const issues: DataQualityIssue[] = [];
    
    issues.push(...this.analyzeField('name', name, 'dreadedEvent'));
    issues.push(...this.analyzeField('description', description, 'dreadedEvent'));
    
    // V√©rifications sp√©cifiques aux √©v√©nements redout√©s
    if (name && !this.isDreadedEventRealistic(name)) {
      issues.push({
        id: this.generateUniqueId('de-unrealistic'),
        type: 'incoherent',
        severity: 'high',
        field: 'name',
        value: name,
        message: 'Cet √©v√©nement redout√© ne correspond pas aux standards EBIOS RM',
        suggestion: 'Formulez comme un impact n√©gatif (ex: "Atteinte √† la confidentialit√©")',
        confidence: 0.85,
        autoFixAvailable: true,
        suggestedValue: this.suggestDreadedEvent(name)
      });
    }

    return this.generateReport(issues);
  }

  /**
   * Analyse la qualit√© d'un actif support
   */
  analyzeSupportingAsset(name: string, description: string, additionalFields?: Record<string, string>): DataQualityReport {
    const issues: DataQualityIssue[] = [];

    issues.push(...this.analyzeField('name', name, 'supportingAsset'));
    issues.push(...this.analyzeField('description', description, 'supportingAsset'));

    // üîç NOUVEAU : Analyse des champs additionnels
    if (additionalFields) {
      Object.entries(additionalFields).forEach(([fieldName, value]) => {
        if (value && typeof value === 'string') {
          issues.push(...this.analyzeField(fieldName, value, 'supportingAsset'));
        }
      });
    }

    return this.generateReport(issues);
  }

  /**
   * üîç NOUVEAU : Analyse compl√®te d'une entit√© EBIOS RM avec cl√©s stables
   */
  analyzeCompleteEntity(
    entityType: 'businessValue' | 'dreadedEvent' | 'supportingAsset',
    entity: Record<string, any>
  ): DataQualityReport {
    const issues: DataQualityIssue[] = [];

    // üîç V√©rifier si l'entit√© a un ID valide
    if (!entity.id) {
      console.warn('‚ö†Ô∏è Entit√© sans ID, analyse ignor√©e:', entity);
      return this.generateReport([]);
    }

    // Champs obligatoires selon le type d'entit√©
    const requiredFields = this.getRequiredFields(entityType);
    const optionalFields = this.getOptionalFields(entityType);

    // Analyser tous les champs textuels avec m√©tadonn√©es d'entit√©
    [...requiredFields, ...optionalFields].forEach(fieldName => {
      const value = entity[fieldName];
      if (value && typeof value === 'string' && value.trim().length > 0) {
        // üîë G√©n√©rer la cl√© stable AVANT l'analyse
        const stableKey = `${entityType}:${entity.id}:${fieldName}`;

        // üîí V√©rifier si ce champ a d√©j√† √©t√© corrig√©
        const correctionHistory = this.getCorrectionHistory?.(stableKey);
        if (correctionHistory && correctionHistory.correctionCount > 0) {
          console.log(`üîí Champ ${fieldName} ignor√© (d√©j√† corrig√© ${correctionHistory.correctionCount}x)`);
          return; // Ignorer ce champ
        }

        const fieldIssues = this.analyzeField(fieldName, value, entityType, entity.id);
        // üîë Enrichir avec m√©tadonn√©es d'entit√©
        fieldIssues.forEach(issue => {
          issue.entityType = entityType;
          issue.entityId = entity.id;
          issue.stableKey = stableKey;
          issue.originalValue = value; // Pr√©server la valeur originale
          issue.correctionCount = 0;
        });
        issues.push(...fieldIssues);
      }
    });

    return this.generateReport(issues);
  }

  /**
   * üîç NOUVEAU : Obtient les champs requis par type d'entit√©
   */
  private getRequiredFields(entityType: string): string[] {
    const fieldMap = {
      businessValue: ['name', 'description', 'category'],
      dreadedEvent: ['name', 'description', 'consequences'],
      supportingAsset: ['name', 'description', 'type']
    };

    return fieldMap[entityType as keyof typeof fieldMap] || [];
  }

  /**
   * üîç NOUVEAU : Obtient les champs optionnels par type d'entit√©
   */
  private getOptionalFields(entityType: string): string[] {
    const fieldMap = {
      businessValue: ['stakeholders', 'criticalityLevel', 'responsableEntite'],
      dreadedEvent: ['impactDescription', 'valeurMetierNom'],
      supportingAsset: ['responsableEntite', 'valeurMetierNom', 'securityLevel']
    };

    return fieldMap[entityType as keyof typeof fieldMap] || [];
  }

  /**
   * Analyse g√©n√©rique d'un champ avec support des cl√©s stables
   */
  private analyzeField(fieldName: string, value: string, context: string, entityId?: string): DataQualityIssue[] {
    const issues: DataQualityIssue[] = [];
    
    if (!value || value.trim().length === 0) {
      return issues; // Champ vide, pas d'analyse
    }

    const trimmedValue = value.trim();

    // D√©tection de patterns invalides
    for (const pattern of this.INVALID_PATTERNS) {
      if (pattern.test(trimmedValue)) {
        issues.push({
          id: this.generateUniqueId(`invalid-pattern-${fieldName}`),
          stableKey: `${context}:${entityId || 'unknown'}:${fieldName}`,
          type: 'invalid',
          severity: 'critical',
          field: fieldName,
          value: trimmedValue,
          originalValue: trimmedValue,
          message: 'Cette saisie semble √™tre du texte de test ou al√©atoire',
          suggestion: 'Saisissez une valeur m√©tier r√©elle et significative',
          confidence: 0.9,
          autoFixAvailable: true,
          suggestedValue: this.getSuggestionForContext(context, trimmedValue, fieldName),
          entityType: context,
          entityId: entityId || 'unknown',
          correctionCount: 0
        });
        break;
      }
    }

    // D√©tection de mots suspects
    const lowerValue = trimmedValue.toLowerCase();
    for (const suspiciousWord of this.SUSPICIOUS_WORDS) {
      if (lowerValue.includes(suspiciousWord)) {
        issues.push({
          id: this.generateUniqueId(`suspicious-word-${fieldName}`),
          stableKey: `${context}:${entityId || 'unknown'}:${fieldName}`,
          type: 'suspicious',
          severity: 'high',
          field: fieldName,
          value: trimmedValue,
          originalValue: trimmedValue,
          message: `Contient un mot suspect: "${suspiciousWord}"`,
          suggestion: 'Remplacez par une valeur r√©elle de votre organisation',
          confidence: 0.85,
          autoFixAvailable: true,
          suggestedValue: this.getSuggestionForContext(context, trimmedValue, fieldName),
          entityType: context,
          entityId: entityId || 'unknown',
          correctionCount: 0
        });
        break;
      }
    }

    // D√©tection de longueur insuffisante
    if (trimmedValue.length < 3) {
      issues.push({
        id: this.generateUniqueId(`too-short-${fieldName}`),
        stableKey: `${context}:${entityId || 'unknown'}:${fieldName}`,
        type: 'incomplete',
        severity: 'medium',
        field: fieldName,
        value: trimmedValue,
        originalValue: trimmedValue,
        message: 'Valeur trop courte pour √™tre significative',
        suggestion: 'Fournissez une description plus d√©taill√©e',
        confidence: 0.7,
        autoFixAvailable: false,
        entityType: context,
        entityId: entityId || 'unknown',
        correctionCount: 0
      });
    }

    return issues;
  }

  /**
   * V√©rifie si une valeur m√©tier est r√©aliste
   */
  private isBusinessValueRealistic(name: string): boolean {
    const businessTerms = [
      'chiffre', 'affaires', 'revenus', 'clients', 'donn√©es', 'r√©putation',
      'image', 'marque', 'continuit√©', 'activit√©', 'service', 'production',
      'propri√©t√©', 'intellectuelle', 'conformit√©', 'r√©glementaire', 'personnel',
      's√©curit√©', 'qualit√©', 'innovation', 'recherche', 'd√©veloppement'
    ];
    
    const lowerName = name.toLowerCase();
    return businessTerms.some(term => lowerName.includes(term));
  }

  /**
   * V√©rifie si un √©v√©nement redout√© est r√©aliste
   */
  private isDreadedEventRealistic(name: string): boolean {
    const threatTerms = [
      'atteinte', 'perte', 'vol', 'alt√©ration', 'corruption', 'destruction',
      'divulgation', 'fuite', 'compromission', 'usurpation', 'd√©ni',
      'interruption', 'indisponibilit√©', 'd√©faillance', 'sabotage'
    ];
    
    const lowerName = name.toLowerCase();
    return threatTerms.some(term => lowerName.includes(term));
  }

  /**
   * Sugg√®re une valeur m√©tier appropri√©e
   */
  private suggestBusinessValue(input: string): string {
    return this.EBIOS_SUGGESTIONS.businessValue[
      Math.floor(Math.random() * this.EBIOS_SUGGESTIONS.businessValue.length)
    ];
  }

  /**
   * Sugg√®re un √©v√©nement redout√© appropri√©
   */
  private suggestDreadedEvent(input: string): string {
    return this.EBIOS_SUGGESTIONS.dreadedEvent[
      Math.floor(Math.random() * this.EBIOS_SUGGESTIONS.dreadedEvent.length)
    ];
  }

  /**
   * Obtient une suggestion selon le contexte (am√©lior√©e avec logique contextuelle)
   */
  private getSuggestionForContext(context: string, currentValue?: string, fieldName?: string): string {
    // üéØ Logique contextuelle intelligente
    if (currentValue && fieldName) {
      const lowerValue = currentValue.toLowerCase();
      const lowerField = fieldName.toLowerCase();

      // Pour les niveaux de criticit√©
      if (lowerField.includes('criticality') || lowerField.includes('level')) {
        if (lowerValue.includes('important')) return 'critique';
        if (lowerValue.includes('primary')) return 'essentiel';
        if (lowerValue.includes('operational')) return 'important';
        return 'critique';
      }

      // Pour les cat√©gories
      if (lowerField.includes('category')) {
        if (lowerValue.includes('primary')) return 'strat√©gique';
        if (lowerValue.includes('operational')) return 'op√©rationnel';
        if (lowerValue.includes('important')) return 'critique';
        return 'strat√©gique';
      }

      // Suggestions contextuelles selon la valeur actuelle
      if (lowerValue.includes('important') || lowerValue.includes('critique')) {
        return context === 'businessValue' ? 'Donn√©es clients critiques' :
               context === 'dreadedEvent' ? 'Atteinte √† la confidentialit√© des donn√©es' :
               'Serveur de base de donn√©es critique';
      }

      if (lowerValue.includes('primary') || lowerValue.includes('principal')) {
        return context === 'businessValue' ? 'Chiffre d\'affaires principal' :
               context === 'dreadedEvent' ? 'Perte de disponibilit√© des services' :
               'Application web principale';
      }

      if (lowerValue.includes('operational') || lowerValue.includes('op√©ration')) {
        return context === 'businessValue' ? 'Continuit√© d\'activit√© op√©rationnelle' :
               context === 'dreadedEvent' ? 'Interruption d\'activit√©' :
               'Infrastructure op√©rationnelle';
      }
    }

    // Fallback vers suggestions par d√©faut
    const suggestions = this.EBIOS_SUGGESTIONS[context as keyof typeof this.EBIOS_SUGGESTIONS];
    if (suggestions) {
      return suggestions[Math.floor(Math.random() * suggestions.length)];
    }
    return 'Valeur exemple appropri√©e';
  }

  /**
   * G√©n√®re le rapport final
   */
  private generateReport(issues: DataQualityIssue[]): DataQualityReport {
    const criticalIssues = issues.filter(i => i.severity === 'critical').length;
    const highIssues = issues.filter(i => i.severity === 'high').length;
    const mediumIssues = issues.filter(i => i.severity === 'medium').length;
    
    // Calcul du score (100 = parfait, 0 = tr√®s mauvais)
    let score = 100;
    score -= criticalIssues * 40;
    score -= highIssues * 25;
    score -= mediumIssues * 10;
    score = Math.max(0, score);

    const suggestions = [
      ...issues.filter(i => i.autoFixAvailable).map(i => i.suggestion),
      'Consultez les exemples EBIOS RM pour des saisies appropri√©es',
      'Utilisez des termes m√©tier concrets et sp√©cifiques √† votre organisation'
    ];

    return {
      overallScore: score,
      issues,
      suggestions: [...new Set(suggestions)], // D√©doublonnage
      isValid: criticalIssues === 0 && highIssues === 0
    };
  }
}

export const dataQualityDetector = new DataQualityDetector();
