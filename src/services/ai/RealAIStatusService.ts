/**
 * ü§ñ SERVICE STATUT IA R√âEL - DONN√âES FIREBASE UNIQUEMENT
 * Service conforme ANSSI pour calculer le statut r√©el de l'IA
 * Bas√© sur les donn√©es r√©elles de la mission EBIOS RM
 * 
 * CONFORMIT√â ANSSI:
 * - M√©triques bas√©es sur donn√©es r√©elles
 * - Calculs conformes guide EBIOS RM
 * - Aucune donn√©e fictive tol√©r√©e
 */

import EbiosRMMetricsService, { EbiosRMMetrics } from '@/services/metrics/EbiosRMMetricsService';

export interface RealAIStatus {
  globalScore: number; // Score global bas√© sur m√©triques r√©elles
  components: {
    businessValues: {
      active: boolean;
      coverage: number;
      confidence: number;
      lastAnalysis: string;
      suggestions: string[];
    };
    dreadedEvents: {
      active: boolean;
      coverage: number;
      confidence: number;
      lastAnalysis: string;
      suggestions: string[];
    };
    riskSources: {
      active: boolean;
      coverage: number;
      confidence: number;
      lastAnalysis: string;
      suggestions: string[];
    };
    attackPaths: {
      active: boolean;
      coverage: number;
      confidence: number;
      lastAnalysis: string;
      suggestions: string[];
    };
    securityMeasures: {
      active: boolean;
      coverage: number;
      confidence: number;
      lastAnalysis: string;
      suggestions: string[];
    };
  };
  lastCalculation: string;
  dataQuality: number;
  anssiCompliance: number;
}

/**
 * Service de calcul du statut IA r√©el
 */
export class RealAIStatusService {
  
  /**
   * Calcule le statut IA r√©el bas√© sur les m√©triques EBIOS RM
   */
  static async calculateRealAIStatus(missionId: string): Promise<RealAIStatus> {
    console.log(`ü§ñ Calcul du statut IA r√©el pour mission: ${missionId}`);
    
    try {
      // R√©cup√©ration des m√©triques EBIOS RM r√©elles
      const metrics = await EbiosRMMetricsService.calculateMetrics(missionId);
      
      // Calcul du statut IA bas√© sur les donn√©es r√©elles
      const aiStatus = this.convertMetricsToAIStatus(metrics);
      
      console.log('‚úÖ Statut IA r√©el calcul√© avec succ√®s');
      return aiStatus;
      
    } catch (error) {
      console.error('‚ùå Erreur calcul statut IA r√©el:', error);
      throw new Error('√âchec du calcul du statut IA r√©el');
    }
  }

  /**
   * Convertit les m√©triques EBIOS RM en statut IA
   */
  private static convertMetricsToAIStatus(metrics: EbiosRMMetrics): RealAIStatus {
    const now = new Date().toISOString();
    
    // Calcul du score global bas√© sur les m√©triques r√©elles
    const globalScore = this.calculateGlobalScore(metrics);
    
    return {
      globalScore,
      components: {
        businessValues: {
          active: metrics.workshop1.businessValuesCount > 0,
          coverage: this.calculateBusinessValuesCoverage(metrics.workshop1),
          confidence: this.calculateConfidence(metrics.workshop1.conformityScore),
          lastAnalysis: now,
          suggestions: this.generateBusinessValuesSuggestions(metrics.workshop1)
        },
        dreadedEvents: {
          active: metrics.workshop1.dreadedEventsCount > 0,
          coverage: this.calculateDreadedEventsCoverage(metrics.workshop1),
          confidence: this.calculateConfidence(metrics.workshop1.conformityScore),
          lastAnalysis: now,
          suggestions: this.generateDreadedEventsSuggestions(metrics.workshop1)
        },
        riskSources: {
          active: metrics.workshop2.riskSourcesCount > 0,
          coverage: metrics.workshop2.completionRate,
          confidence: this.calculateConfidence(metrics.workshop2.mitreAttackCoverage),
          lastAnalysis: now,
          suggestions: this.generateRiskSourcesSuggestions(metrics.workshop2)
        },
        attackPaths: {
          active: metrics.workshop4.operationalScenariosCount > 0,
          coverage: this.calculateAttackPathsCoverage(metrics.workshop4),
          confidence: this.calculateConfidence(metrics.workshop4.technicalDepth),
          lastAnalysis: now,
          suggestions: this.generateAttackPathsSuggestions(metrics.workshop4)
        },
        securityMeasures: {
          active: metrics.workshop5.securityMeasuresCount > 0,
          coverage: metrics.workshop5.treatmentCoverage,
          confidence: this.calculateConfidence(metrics.workshop5.completionRate),
          lastAnalysis: now,
          suggestions: this.generateSecurityMeasuresSuggestions(metrics.workshop5)
        }
      },
      lastCalculation: now,
      dataQuality: metrics.global.dataQualityScore,
      anssiCompliance: metrics.global.anssiComplianceScore
    };
  }

  /**
   * Calcule le score global bas√© sur les m√©triques r√©elles
   */
  private static calculateGlobalScore(metrics: EbiosRMMetrics): number {
    const workshopScores = [
      metrics.workshop1.completionRate,
      metrics.workshop2.completionRate,
      metrics.workshop3.completionRate,
      metrics.workshop4.completionRate,
      metrics.workshop5.completionRate
    ];
    
    // Moyenne pond√©r√©e selon importance ANSSI
    const weights = [0.25, 0.20, 0.25, 0.15, 0.15];
    const weightedScore = workshopScores.reduce((sum, score, index) => {
      return sum + (score * weights[index]);
    }, 0);
    
    return Math.round(weightedScore);
  }

  /**
   * Calcule la couverture des valeurs m√©tier
   */
  private static calculateBusinessValuesCoverage(workshop1: any): number {
    // Bas√© sur le nombre et la qualit√© des valeurs m√©tier
    const minRequired = 3; // Minimum ANSSI
    const coverage = Math.min(100, (workshop1.businessValuesCount / minRequired) * 100);
    
    // Bonus pour la qualit√© (conformit√© ANSSI)
    const qualityBonus = (workshop1.conformityScore / 100) * 20;
    
    return Math.round(Math.min(100, coverage + qualityBonus));
  }

  /**
   * Calcule la couverture des √©v√©nements redout√©s
   */
  private static calculateDreadedEventsCoverage(workshop1: any): number {
    // Bas√© sur le ratio √©v√©nements/valeurs m√©tier
    const ratio = workshop1.businessValuesCount > 0 
      ? workshop1.dreadedEventsCount / workshop1.businessValuesCount 
      : 0;
    
    // ANSSI recommande 2-3 √©v√©nements par valeur m√©tier
    const optimalRatio = 2.5;
    const coverage = Math.min(100, (ratio / optimalRatio) * 100);
    
    return Math.round(coverage);
  }

  /**
   * Calcule la couverture des chemins d'attaque
   */
  private static calculateAttackPathsCoverage(workshop4: any): number {
    // Bas√© sur la profondeur technique et le nombre de sc√©narios
    const depthScore = workshop4.technicalDepth;
    const volumeScore = Math.min(100, workshop4.operationalScenariosCount * 20);
    
    return Math.round((depthScore + volumeScore) / 2);
  }

  /**
   * Calcule le niveau de confiance bas√© sur un score
   */
  private static calculateConfidence(score: number): number {
    // Conversion du score en niveau de confiance
    if (score >= 90) return 95;
    if (score >= 80) return 85;
    if (score >= 70) return 75;
    if (score >= 60) return 65;
    if (score >= 50) return 55;
    return 45;
  }

  /**
   * G√©n√®re des suggestions r√©elles pour les valeurs m√©tier
   */
  private static generateBusinessValuesSuggestions(workshop1: any): string[] {
    const suggestions: string[] = [];
    
    if (workshop1.businessValuesCount < 3) {
      suggestions.push('Identifier au minimum 3 valeurs m√©tier selon ANSSI');
    }
    
    if (workshop1.conformityScore < 80) {
      suggestions.push('Am√©liorer la description et la cat√©gorisation des valeurs m√©tier');
    }
    
    if (workshop1.supportingAssetsCount < workshop1.businessValuesCount * 2) {
      suggestions.push('Associer plus de biens supports aux valeurs m√©tier');
    }
    
    return suggestions;
  }

  /**
   * G√©n√®re des suggestions r√©elles pour les √©v√©nements redout√©s
   */
  private static generateDreadedEventsSuggestions(workshop1: any): string[] {
    const suggestions: string[] = [];
    
    const ratio = workshop1.businessValuesCount > 0 
      ? workshop1.dreadedEventsCount / workshop1.businessValuesCount 
      : 0;
    
    if (ratio < 2) {
      suggestions.push('Identifier 2-3 √©v√©nements redout√©s par valeur m√©tier');
    }
    
    if (workshop1.conformityScore < 70) {
      suggestions.push('Pr√©ciser l\'impact et la gravit√© des √©v√©nements redout√©s');
    }
    
    return suggestions;
  }

  /**
   * G√©n√®re des suggestions r√©elles pour les sources de risque
   */
  private static generateRiskSourcesSuggestions(workshop2: any): string[] {
    const suggestions: string[] = [];
    
    if (workshop2.riskSourcesCount < 5) {
      suggestions.push('Identifier au minimum 5 sources de risque selon ANSSI');
    }
    
    if (workshop2.mitreAttackCoverage < 30) {
      suggestions.push('Enrichir avec plus de techniques MITRE ATT&CK');
    }
    
    if (workshop2.threatActorsIdentified < 3) {
      suggestions.push('Identifier plus d\'acteurs de menace pertinents');
    }
    
    return suggestions;
  }

  /**
   * G√©n√®re des suggestions r√©elles pour les chemins d'attaque
   */
  private static generateAttackPathsSuggestions(workshop4: any): string[] {
    const suggestions: string[] = [];
    
    if (workshop4.operationalScenariosCount < 2) {
      suggestions.push('D√©velopper plus de sc√©narios op√©rationnels d√©taill√©s');
    }
    
    if (workshop4.technicalDepth < 60) {
      suggestions.push('Approfondir les √©tapes techniques des attaques');
    }
    
    if (workshop4.vulnerabilitiesIdentified < 5) {
      suggestions.push('Identifier plus de vuln√©rabilit√©s exploitables');
    }
    
    return suggestions;
  }

  /**
   * G√©n√®re des suggestions r√©elles pour les mesures de s√©curit√©
   */
  private static generateSecurityMeasuresSuggestions(workshop5: any): string[] {
    const suggestions: string[] = [];
    
    if (workshop5.securityMeasuresCount < 5) {
      suggestions.push('D√©finir plus de mesures de s√©curit√©');
    }
    
    if (workshop5.treatmentCoverage < 80) {
      suggestions.push('Am√©liorer la couverture du traitement des risques');
    }
    
    if (workshop5.residualRiskLevel > 2.5) {
      suggestions.push('Renforcer les mesures pour r√©duire le risque r√©siduel');
    }
    
    return suggestions;
  }
}

export default RealAIStatusService;
