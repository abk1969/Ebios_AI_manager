rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // üîê FONCTIONS UTILITAIRES DE S√âCURIT√â

    // V√©rification de l'authentification
    function isAuthenticated() {
      return request.auth != null;
    }

    // V√©rification de l'email v√©rifi√©
    function isEmailVerified() {
      return request.auth != null && request.auth.token.email_verified == true;
    }

    // V√©rification du propri√©taire
    function isOwner(resource) {
      return request.auth.uid == resource.data.createdBy;
    }

    // Collection de test - acc√®s restreint aux utilisateurs authentifi√©s
    match /_test/{document} {
      allow read, write: if isAuthenticated();
    }
    
    // Collections principales EBIOS RM - acc√®s s√©curis√©
    match /missions/{missionId} {
      // Lecture : utilisateur authentifi√© avec email v√©rifi√©
      allow read: if isAuthenticated() && isEmailVerified();

      // √âcriture : propri√©taire ou utilisateur authentifi√© pour cr√©ation
      allow create: if isAuthenticated() && isEmailVerified() &&
                       request.auth.uid == request.resource.data.createdBy;
      allow update, delete: if isAuthenticated() && isEmailVerified() &&
                               (isOwner(resource) || request.auth.uid in resource.data.get('teamMembers', []));

      // Sous-collections de la mission
      match /{subcollection}/{document} {
        allow read: if isAuthenticated() && isEmailVerified();
        allow write: if isAuthenticated() && isEmailVerified() &&
                        (isOwner(get(/databases/$(database)/documents/missions/$(missionId))) ||
                         request.auth.uid in get(/databases/$(database)/documents/missions/$(missionId)).data.get('teamMembers', []));
      }
    }

    // Biens essentiels - acc√®s s√©curis√©
    match /businessValues/{document} {
      allow read: if isAuthenticated() && isEmailVerified();
      allow write: if isAuthenticated() && isEmailVerified() &&
                      (request.auth.uid == resource.data.get('createdBy', '') ||
                       request.auth.uid == request.resource.data.get('createdBy', ''));
    }

    // Biens supports - acc√®s s√©curis√©
    match /supportingAssets/{document} {
      allow read: if isAuthenticated() && isEmailVerified();
      allow write: if isAuthenticated() && isEmailVerified() &&
                      (request.auth.uid == resource.data.get('createdBy', '') ||
                       request.auth.uid == request.resource.data.get('createdBy', ''));
    }

    // √âv√©nements redout√©s - acc√®s s√©curis√©
    match /dreadedEvents/{document} {
      allow read: if isAuthenticated() && isEmailVerified();
      allow write: if isAuthenticated() && isEmailVerified() &&
                      (request.auth.uid == resource.data.get('createdBy', '') ||
                       request.auth.uid == request.resource.data.get('createdBy', ''));
    }

    // Sources de risque - acc√®s s√©curis√©
    match /riskSources/{document} {
      allow read: if isAuthenticated() && isEmailVerified();
      allow write: if isAuthenticated() && isEmailVerified() &&
                      (request.auth.uid == resource.data.get('createdBy', '') ||
                       request.auth.uid == request.resource.data.get('createdBy', ''));
    }

    // Sc√©narios strat√©giques - acc√®s s√©curis√©
    match /strategicScenarios/{document} {
      allow read: if isAuthenticated() && isEmailVerified();
      allow write: if isAuthenticated() && isEmailVerified() &&
                      (request.auth.uid == resource.data.get('createdBy', '') ||
                       request.auth.uid == request.resource.data.get('createdBy', ''));
    }

    // Sc√©narios op√©rationnels - acc√®s s√©curis√©
    match /operationalScenarios/{document} {
      allow read: if isAuthenticated() && isEmailVerified();
      allow write: if isAuthenticated() && isEmailVerified() &&
                      (request.auth.uid == resource.data.get('createdBy', '') ||
                       request.auth.uid == request.resource.data.get('createdBy', ''));
    }

    // Mesures de s√©curit√© - acc√®s s√©curis√©
    match /securityMeasures/{document} {
      allow read: if isAuthenticated() && isEmailVerified();
      allow write: if isAuthenticated() && isEmailVerified() &&
                      (request.auth.uid == resource.data.get('createdBy', '') ||
                       request.auth.uid == request.resource.data.get('createdBy', ''));
    }

    // M√©triques et rapports - acc√®s restreint
    match /metrics/{document} {
      allow read: if isAuthenticated() && isEmailVerified();
      allow write: if false; // G√©r√© uniquement par les services syst√®me
    }

    // Logs et audit - acc√®s tr√®s restreint
    match /auditLogs/{document} {
      allow read: if false; // Acc√®s uniquement via les services backend
      allow write: if false; // G√©r√© uniquement par les services syst√®me
    }

    // Configuration et param√®tres - acc√®s administrateur
    match /config/{document} {
      allow read: if isAuthenticated() && isEmailVerified();
      allow write: if false; // G√©r√© uniquement par les administrateurs via backend
    }

    // Utilisateurs et profils - acc√®s personnel
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isEmailVerified());
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Sessions de formation - acc√®s personnel
    match /trainingSessions/{sessionId} {
      allow read, write: if isAuthenticated() &&
                            request.auth.uid == resource.data.get('userId', '') ||
                            request.auth.uid == request.resource.data.get('userId', '');
    }

    // Alertes de s√©curit√© - lecture seule pour utilisateurs authentifi√©s
    match /security_alerts/{document} {
      allow read: if isAuthenticated() && isEmailVerified();
      allow write: if false; // G√©r√© uniquement par les services syst√®me
    }

    // R√®gle par d√©faut - acc√®s refus√©
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
