#!/usr/bin/env tsx

/**
 * Script de test pour le g√©n√©rateur automatique de missions EBIOS RM
 */

import { AutoMissionGeneratorService } from '../src/services/ai/AutoMissionGeneratorService';

async function testMissionGenerator() {
  // console.log supprim√©;
  console.log('=' .repeat(60));

  try {
    // Contexte de test pour une organisation de sant√©
    const testContext = {
      organizationName: 'Centre Hospitalier Universitaire de Test',
      sector: 'Sant√© - √âtablissements hospitaliers priv√©s',
      organizationSize: 'Grande entreprise - GE (5000+ employ√©s)',
      geographicScope: 'national',
      criticalityLevel: 'high',
      siComponents: [
        'ERP - SAP (S/4HANA, ECC)',
        'Infrastructure Cloud - Microsoft Azure',
        'Active Directory / LDAP',
        'SIEM (Security Information)'
      ],
      mainTechnologies: [
        'Microsoft Azure',
        'SAP S/4HANA',
        'Active Directory'
      ],
      externalInterfaces: [],
      sensitiveData: [],
      criticalProcesses: [
        'Gestion des dossiers patients',
        'Syst√®me de facturation',
        'Gestion des rendez-vous',
        'Pharmacie hospitali√®re'
      ],
      stakeholders: [
        'Patients',
        'Personnel m√©dical',
        'Administration',
        'CNIL',
        'ARS'
      ],
      regulations: [
        'RGPD (R√®glement G√©n√©ral sur la Protection des Donn√©es)',
        'HDS (H√©bergement de Donn√©es de Sant√©)',
        'ISO 27001 (Management de la s√©curit√©)'
      ],
      financialStakes: '√âlev√© - Budget annuel > 100M‚Ç¨',
      securityMaturity: 'intermediate',
      pastIncidents: '',
      regulatoryConstraints: [
        'RGPD (R√®glement G√©n√©ral sur la Protection des Donn√©es)',
        'HDS (H√©bergement de Donn√©es de Sant√©)'
      ],
      securityBudget: '2-5% du budget IT',
      missionObjectives: [
        'Conformit√© r√©glementaire RGPD/HDS',
        'Protection des donn√©es de sant√©',
        'Continuit√© des soins',
        'Am√©lioration de la posture s√©curit√©'
      ],
      timeframe: '6 months',
      specificRequirements: 'Certification HDS obligatoire, audit ANSSI requis'
    };

    // console.log supprim√©;
    // console.log supprim√©;
    // console.log supprim√©;
    // console.log supprim√©;
    // console.log supprim√©;
    // console.log supprim√©;
    // console.log supprim√©;
    console.log('');

    // Test du service
    console.log('üöÄ Lancement de la g√©n√©ration...');
    const service = AutoMissionGeneratorService.getInstance();
    
    const startTime = Date.now();
    const result = await service.generateMission(testContext);
    const endTime = Date.now();

    console.log('');
    console.log('‚úÖ G√©n√©ration termin√©e avec succ√®s !');
    console.log(`‚è±Ô∏è  Temps d'ex√©cution: ${(endTime - startTime) / 1000}s`);
    console.log('');
    console.log('üìä R√©sultats:');
    console.log(`   Mission ID: ${result.missionId}`);
    console.log(`   Biens essentiels: ${result.businessValues.length} g√©n√©r√©s`);
    console.log(`   Biens supports: ${result.supportingAssets.length} g√©n√©r√©s`);
    console.log(`   √âv√©nements redout√©s: ${result.dreadedEvents.length} g√©n√©r√©s`);
    console.log(`   Sources de risque: ${result.riskSources.length} g√©n√©r√©s`);
    console.log(`   Sc√©narios strat√©giques: ${result.strategicScenarios.length} g√©n√©r√©s`);
    console.log(`   Sc√©narios op√©rationnels: ${result.operationalScenarios.length} g√©n√©r√©s`);
    console.log(`   Mesures de s√©curit√©: ${result.securityMeasures.length} g√©n√©r√©s`);
    console.log(`   Rapports: ${result.reports.length} g√©n√©r√©s`);
    console.log('');

    // Affichage des d√©tails des biens essentiels
    if (result.businessValues.length > 0) {
      console.log('üéØ Biens essentiels g√©n√©r√©s:');
      result.businessValues.forEach((bv, index) => {
        console.log(`   ${index + 1}. ${bv.name}`);
        console.log(`      Criticit√©: ${bv.criticalityLevel}/4`);
        console.log(`      Impacts: ${bv.impactTypes.join(', ')}`);
      });
      console.log('');
    }

    // Affichage des d√©tails des √©v√©nements redout√©s
    if (result.dreadedEvents.length > 0) {
      console.log('‚ö†Ô∏è  √âv√©nements redout√©s g√©n√©r√©s:');
      result.dreadedEvents.forEach((de, index) => {
        console.log(`   ${index + 1}. ${de.name}`);
        console.log(`      Impact: ${de.impactLevel}/4`);
        console.log(`      Cons√©quences: ${de.consequences.length} identifi√©es`);
      });
      console.log('');
    }

    // console.log supprim√©;
    console.log('');
    console.log('üí° La mission peut maintenant √™tre consult√©e dans l\'interface web');
    console.log(`   URL: http://localhost:5177/missions/${result.missionId}`);

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
    console.error('');
    console.error('üîç D√©tails de l\'erreur:');
    if (error instanceof Error) {
      console.error(`   Message: ${error.message}`);
      console.error(`   Stack: ${error.stack}`);
    }
    process.exit(1);
  }
}

// Ex√©cution du test
testMissionGenerator().catch(console.error);

export { testMissionGenerator };
