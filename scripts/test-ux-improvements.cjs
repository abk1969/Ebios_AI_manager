#!/usr/bin/env node

/**
 * üéØ SCRIPT DE TEST DES AM√âLIORATIONS UX/UI
 * Valide automatiquement toutes les am√©liorations impl√©ment√©es
 * 
 * TESTS COUVERTS :
 * - Phase 1 : Navigation & Orientation
 * - Phase 2 : Coh√©rence des Suggestions IA
 * - Phase 3 : R√©solution des Blocages
 */

const fs = require('fs');
const path = require('path');

// üéØ CONFIGURATION DES TESTS
const TEST_CONFIG = {
  baseUrl: 'http://localhost:5174',
  timeout: 30000,
  verbose: true
};

// üéØ COULEURS POUR L'AFFICHAGE
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

// üéØ UTILITAIRES D'AFFICHAGE
function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logSection(title) {
  log('\n' + '='.repeat(60), 'cyan');
  log(`üéØ ${title}`, 'bright');
  log('='.repeat(60), 'cyan');
}

function logTest(testName, status, details = '') {
  const icon = status === 'PASS' ? '‚úÖ' : status === 'FAIL' ? '‚ùå' : '‚ö†Ô∏è';
  const color = status === 'PASS' ? 'green' : status === 'FAIL' ? 'red' : 'yellow';
  log(`${icon} ${testName}`, color);
  if (details) {
    log(`   ${details}`, 'reset');
  }
}

// üéØ TESTS DE VALIDATION DES FICHIERS
function testFileExists(filePath, description) {
  const fullPath = path.join(__dirname, '..', filePath);
  const exists = fs.existsSync(fullPath);
  logTest(description, exists ? 'PASS' : 'FAIL', exists ? `Fichier trouv√©: ${filePath}` : `Fichier manquant: ${filePath}`);
  return exists;
}

function testFileContent(filePath, searchPattern, description) {
  const fullPath = path.join(__dirname, '..', filePath);
  if (!fs.existsSync(fullPath)) {
    logTest(description, 'FAIL', `Fichier non trouv√©: ${filePath}`);
    return false;
  }
  
  const content = fs.readFileSync(fullPath, 'utf8');
  const found = content.includes(searchPattern);
  logTest(description, found ? 'PASS' : 'FAIL', found ? `Pattern trouv√©: ${searchPattern}` : `Pattern manquant: ${searchPattern}`);
  return found;
}

// üéØ TESTS PHASE 1 : NAVIGATION & ORIENTATION
function testPhase1Navigation() {
  logSection('PHASE 1 : NAVIGATION & ORIENTATION');
  
  let allPassed = true;
  
  // Test 1.1 : Fil d'Ariane Intelligent
  allPassed &= testFileExists('src/components/workshops/EbiosProgressBreadcrumb.tsx', 'Fil d\'Ariane - Composant principal');
  allPassed &= testFileContent('src/pages/workshops/Workshop1.tsx', 'ENABLE_PROGRESS_BREADCRUMB', 'Fil d\'Ariane - Int√©gration avec flag');
  allPassed &= testFileContent('src/components/workshops/EbiosProgressBreadcrumb.tsx', 'calculateProgress', 'Fil d\'Ariane - Calcul de progression');
  
  // Test 1.2 : Dashboard de Mission Unifi√©
  allPassed &= testFileExists('src/components/dashboard/UnifiedMissionOverview.tsx', 'Dashboard Unifi√© - Composant principal');
  allPassed &= testFileContent('src/components/dashboard/EbiosGlobalDashboard.tsx', 'UnifiedMissionOverview', 'Dashboard Unifi√© - Int√©gration');
  allPassed &= testFileContent('src/components/dashboard/UnifiedMissionOverview.tsx', 'WorkshopOverview', 'Dashboard Unifi√© - Vue d\'ensemble ateliers');
  
  // Test 1.3 : Syst√®me de Guidage Contextuel
  allPassed &= testFileExists('src/components/guidance/ContextualGuidance.tsx', 'Guidage Contextuel - Composant principal');
  allPassed &= testFileContent('src/pages/workshops/Workshop1.tsx', 'ENABLE_CONTEXTUAL_GUIDANCE', 'Guidage Contextuel - Int√©gration avec flag');
  allPassed &= testFileContent('src/components/guidance/ContextualGuidance.tsx', 'ContextualGuidanceEngine', 'Guidage Contextuel - Moteur d\'analyse');
  
  log(`\nüìä Phase 1 - R√©sultat global: ${allPassed ? '‚úÖ SUCC√àS' : '‚ùå √âCHEC'}`, allPassed ? 'green' : 'red');
  return allPassed;
}

// üéØ TESTS PHASE 2 : COH√âRENCE DES SUGGESTIONS IA
function testPhase2AICoherence() {
  logSection('PHASE 2 : COH√âRENCE DES SUGGESTIONS IA');
  
  let allPassed = true;
  
  // Test 2.1 : Service de Contexte Global IA
  allPassed &= testFileExists('src/services/ai/GlobalContextAIService.ts', 'Contexte Global IA - Service principal');
  allPassed &= testFileContent('src/services/ai/GlobalContextAIService.ts', 'getGlobalContext', 'Contexte Global IA - M√©thode principale');
  allPassed &= testFileContent('src/services/ai/GlobalContextAIService.ts', 'generateContextualSuggestions', 'Contexte Global IA - G√©n√©ration suggestions');
  allPassed &= testFileContent('src/services/ai/GlobalContextAIService.ts', 'analyzeCoherence', 'Contexte Global IA - Analyse coh√©rence');
  
  // Test 2.2 : Composant Suggestions Explicatives
  allPassed &= testFileExists('src/components/ai/ExplainableAISuggestions.tsx', 'Suggestions Explicatives - Composant principal');
  allPassed &= testFileContent('src/pages/workshops/Workshop1.tsx', 'ENABLE_EXPLAINABLE_AI_SUGGESTIONS', 'Suggestions Explicatives - Int√©gration avec flag');
  allPassed &= testFileContent('src/components/ai/ExplainableAISuggestions.tsx', 'coherenceJustification', 'Suggestions Explicatives - Justification coh√©rence');
  allPassed &= testFileContent('src/components/ai/ExplainableAISuggestions.tsx', 'contextualRelevance', 'Suggestions Explicatives - Pertinence contextuelle');
  
  log(`\nüìä Phase 2 - R√©sultat global: ${allPassed ? '‚úÖ SUCC√àS' : '‚ùå √âCHEC'}`, allPassed ? 'green' : 'red');
  return allPassed;
}

// üéØ TESTS PHASE 3 : R√âSOLUTION DES BLOCAGES
function testPhase3BlockageResolution() {
  logSection('PHASE 3 : R√âSOLUTION DES BLOCAGES');
  
  let allPassed = true;
  
  // Test 3.1 : Service de D√©tection des Blocages
  allPassed &= testFileExists('src/services/ai/BlockageDetectionService.ts', 'D√©tection Blocages - Service principal');
  allPassed &= testFileContent('src/services/ai/BlockageDetectionService.ts', 'analyzeBlockages', 'D√©tection Blocages - M√©thode principale');
  allPassed &= testFileContent('src/services/ai/BlockageDetectionService.ts', 'BlockageType', 'D√©tection Blocages - Types de blocages');
  allPassed &= testFileContent('src/services/ai/BlockageDetectionService.ts', 'generateSolutions', 'D√©tection Blocages - G√©n√©ration solutions');
  
  // Test 3.2 : Composant Panneau de R√©solution
  allPassed &= testFileExists('src/components/ai/BlockageResolutionPanel.tsx', 'R√©solution Blocages - Composant principal');
  allPassed &= testFileContent('src/pages/workshops/Workshop1.tsx', 'ENABLE_BLOCKAGE_RESOLUTION', 'R√©solution Blocages - Int√©gration avec flag');
  allPassed &= testFileContent('src/components/ai/BlockageResolutionPanel.tsx', 'handleApplySolution', 'R√©solution Blocages - Application solutions');
  allPassed &= testFileContent('src/components/ai/BlockageResolutionPanel.tsx', 'autoRefresh', 'R√©solution Blocages - Auto-refresh');
  
  log(`\nüìä Phase 3 - R√©sultat global: ${allPassed ? '‚úÖ SUCC√àS' : '‚ùå √âCHEC'}`, allPassed ? 'green' : 'red');
  return allPassed;
}

// üéØ TESTS D'INT√âGRATION
function testIntegration() {
  logSection('TESTS D\'INT√âGRATION');
  
  let allPassed = true;
  
  // Test des flags de contr√¥le
  allPassed &= testFileContent('src/pages/workshops/Workshop1.tsx', 'ENABLE_PROGRESS_BREADCRUMB = true', 'Int√©gration - Flag Fil d\'Ariane activ√©');
  allPassed &= testFileContent('src/pages/workshops/Workshop1.tsx', 'ENABLE_CONTEXTUAL_GUIDANCE = true', 'Int√©gration - Flag Guidage activ√©');
  allPassed &= testFileContent('src/pages/workshops/Workshop1.tsx', 'ENABLE_EXPLAINABLE_AI_SUGGESTIONS = true', 'Int√©gration - Flag Suggestions IA activ√©');
  allPassed &= testFileContent('src/pages/workshops/Workshop1.tsx', 'ENABLE_BLOCKAGE_RESOLUTION = true', 'Int√©gration - Flag R√©solution activ√©');
  
  // Test des imports
  allPassed &= testFileContent('src/pages/workshops/Workshop1.tsx', 'import EbiosProgressBreadcrumb', 'Int√©gration - Import Fil d\'Ariane');
  allPassed &= testFileContent('src/pages/workshops/Workshop1.tsx', 'import ContextualGuidance', 'Int√©gration - Import Guidage');
  allPassed &= testFileContent('src/pages/workshops/Workshop1.tsx', 'import ExplainableAISuggestions', 'Int√©gration - Import Suggestions IA');
  allPassed &= testFileContent('src/pages/workshops/Workshop1.tsx', 'import BlockageResolutionPanel', 'Int√©gration - Import R√©solution');
  
  // Test de l'int√©gration dans le dashboard global
  allPassed &= testFileContent('src/components/dashboard/EbiosGlobalDashboard.tsx', 'import UnifiedMissionOverview', 'Int√©gration - Dashboard unifi√© import√©');
  allPassed &= testFileContent('src/components/dashboard/EbiosGlobalDashboard.tsx', 'showUnifiedView', 'Int√©gration - Dashboard unifi√© contr√¥l√©');
  
  log(`\nüìä Int√©gration - R√©sultat global: ${allPassed ? '‚úÖ SUCC√àS' : '‚ùå √âCHEC'}`, allPassed ? 'green' : 'red');
  return allPassed;
}

// üéØ TESTS DE S√âCURIT√â ANTI-R√âGRESSION
function testAntiRegression() {
  logSection('TESTS ANTI-R√âGRESSION');
  
  let allPassed = true;
  
  // V√©rification que les fichiers existants n'ont pas √©t√© cass√©s
  allPassed &= testFileExists('src/pages/workshops/Workshop1.tsx', 'Anti-r√©gression - Workshop1 existe toujours');
  allPassed &= testFileExists('src/components/dashboard/EbiosGlobalDashboard.tsx', 'Anti-r√©gression - Dashboard global existe toujours');
  allPassed &= testFileExists('src/services/aiAssistant.ts', 'Anti-r√©gression - Service IA existant pr√©serv√©');
  
  // V√©rification que les fonctionnalit√©s existantes sont pr√©serv√©es
  allPassed &= testFileContent('src/pages/workshops/Workshop1.tsx', 'const [businessValues, setBusinessValues]', 'Anti-r√©gression - √âtat business values pr√©serv√©');
  allPassed &= testFileContent('src/pages/workshops/Workshop1.tsx', 'const [supportingAssets, setSupportingAssets]', 'Anti-r√©gression - √âtat actifs supports pr√©serv√©');
  allPassed &= testFileContent('src/pages/workshops/Workshop1.tsx', 'const [dreadedEvents, setDreadedEvents]', 'Anti-r√©gression - √âtat √©v√©nements redout√©s pr√©serv√©');
  
  // V√©rification que les nouveaux composants sont optionnels
  allPassed &= testFileContent('src/pages/workshops/Workshop1.tsx', '{ENABLE_PROGRESS_BREADCRUMB &&', 'Anti-r√©gression - Fil d\'Ariane optionnel');
  allPassed &= testFileContent('src/pages/workshops/Workshop1.tsx', '{ENABLE_CONTEXTUAL_GUIDANCE &&', 'Anti-r√©gression - Guidage optionnel');
  allPassed &= testFileContent('src/pages/workshops/Workshop1.tsx', '{ENABLE_EXPLAINABLE_AI_SUGGESTIONS &&', 'Anti-r√©gression - Suggestions IA optionnelles');
  allPassed &= testFileContent('src/pages/workshops/Workshop1.tsx', '{ENABLE_BLOCKAGE_RESOLUTION &&', 'Anti-r√©gression - R√©solution optionnelle');
  
  log(`\nüìä Anti-r√©gression - R√©sultat global: ${allPassed ? '‚úÖ SUCC√àS' : '‚ùå √âCHEC'}`, allPassed ? 'green' : 'red');
  return allPassed;
}

// üéØ FONCTION PRINCIPALE
function runAllTests() {
  log('üöÄ D√âMARRAGE DES TESTS DES AM√âLIORATIONS UX/UI', 'bright');
  log(`üìÖ ${new Date().toLocaleString()}`, 'cyan');
  
  const startTime = Date.now();
  
  // Ex√©cution de tous les tests
  const results = {
    phase1: testPhase1Navigation(),
    phase2: testPhase2AICoherence(),
    phase3: testPhase3BlockageResolution(),
    integration: testIntegration(),
    antiRegression: testAntiRegression()
  };
  
  // Calcul du r√©sultat global
  const allTestsPassed = Object.values(results).every(result => result);
  const passedCount = Object.values(results).filter(result => result).length;
  const totalCount = Object.keys(results).length;
  
  const endTime = Date.now();
  const duration = ((endTime - startTime) / 1000).toFixed(2);
  
  // Affichage du r√©sum√© final
  logSection('R√âSUM√â FINAL');
  
  log(`üìä Tests r√©ussis: ${passedCount}/${totalCount}`, passedCount === totalCount ? 'green' : 'red');
  log(`‚è±Ô∏è  Dur√©e d'ex√©cution: ${duration}s`, 'cyan');
  log(`üéØ R√©sultat global: ${allTestsPassed ? '‚úÖ TOUS LES TESTS R√âUSSIS' : '‚ùå CERTAINS TESTS ONT √âCHOU√â'}`, allTestsPassed ? 'green' : 'red');
  
  if (allTestsPassed) {
    log('\nüéâ F√âLICITATIONS !', 'green');
    log('Toutes les am√©liorations UX/UI ont √©t√© impl√©ment√©es avec succ√®s.', 'green');
    log('L\'application est pr√™te pour les tests utilisateur.', 'green');
  } else {
    log('\n‚ö†Ô∏è  ATTENTION !', 'yellow');
    log('Certains tests ont √©chou√©. V√©rifiez les d√©tails ci-dessus.', 'yellow');
  }
  
  // Code de sortie
  process.exit(allTestsPassed ? 0 : 1);
}

// üéØ EX√âCUTION
if (require.main === module) {
  runAllTests();
}

module.exports = {
  runAllTests,
  testPhase1Navigation,
  testPhase2AICoherence,
  testPhase3BlockageResolution,
  testIntegration,
  testAntiRegression
};
