# üöÄ SCRIPT DE D√âMARRAGE AVEC WORKSHOP 1 - PowerShell
# D√©marrage optimis√© pour tester le nouveau module Workshop 1

# üéØ CONFIGURATION
$PORT = 5173
$HOST = "localhost"
$WORKSHOP1_URL = "http://${HOST}:${PORT}/training/workshop1"

Write-Host "üöÄ D√âMARRAGE EBIOS AI MANAGER AVEC WORKSHOP 1" -ForegroundColor Blue
Write-Host "==================================================" -ForegroundColor Blue
Write-Host ""

# üîß Configuration des variables d'environnement
Write-Host "‚öôÔ∏è Configuration de l'environnement..." -ForegroundColor Yellow

$envContent = @"
# Configuration Workshop 1 - D√©veloppement
NODE_ENV=development
VITE_NODE_ENV=development

# Workshop 1 Features
VITE_WORKSHOP1_ENABLE_MONITORING=true
VITE_WORKSHOP1_ENABLE_A2A=true
VITE_WORKSHOP1_ENABLE_EXPERT_NOTIFICATIONS=true
VITE_WORKSHOP1_ENABLE_PERFORMANCE_TRACKING=true
VITE_WORKSHOP1_ENABLE_ERROR_REPORTING=true

# Workshop 1 Limits
VITE_WORKSHOP1_MAX_CONCURRENT_SESSIONS=10
VITE_WORKSHOP1_SESSION_TIMEOUT_MS=1800000
VITE_WORKSHOP1_NOTIFICATION_RETENTION_DAYS=7
VITE_WORKSHOP1_METRICS_RETENTION_DAYS=30

# Workshop 1 Logging
VITE_WORKSHOP1_LOG_LEVEL=debug

# Firebase Configuration
VITE_FIREBASE_PROJECT_ID=ebiosdatabase
VITE_FIREBASE_API_KEY=AIzaSyCN4GaNMnshiDw0Z0dgGnhmgbokVyd7LmA
VITE_FIREBASE_AUTH_DOMAIN=ebiosdatabase.firebaseapp.com
VITE_FIREBASE_STORAGE_BUCKET=ebiosdatabase.appspot.com
VITE_FIREBASE_MESSAGING_SENDER_ID=123456789
VITE_FIREBASE_APP_ID=1:123456789:web:abcdef123456789

# Training Module
VITE_TRAINING_MODULE_ENABLED=true

# Development Features
VITE_ENABLE_DEV_TOOLS=true
VITE_ENABLE_REACT_DEVTOOLS=true
VITE_ENABLE_REDUX_DEVTOOLS=true
"@

$envContent | Out-File -FilePath ".env.local" -Encoding UTF8

Write-Host "‚úÖ Variables d'environnement configur√©es" -ForegroundColor Green

# üì¶ Installation des d√©pendances si n√©cessaire
if (-not (Test-Path "node_modules")) {
    Write-Host "üì¶ Installation des d√©pendances..." -ForegroundColor Yellow
    npm install
    Write-Host "‚úÖ D√©pendances install√©es" -ForegroundColor Green
}

Write-Host ""
Write-Host "üìã INFORMATIONS WORKSHOP 1" -ForegroundColor Blue
Write-Host "================================" -ForegroundColor Blue
Write-Host ""
Write-Host "üéØ URLs de test:" -ForegroundColor Green
Write-Host "   ‚Ä¢ Application: http://${HOST}:${PORT}"
Write-Host "   ‚Ä¢ Formation: http://${HOST}:${PORT}/training"
Write-Host "   ‚Ä¢ Workshop 1: $WORKSHOP1_URL"
Write-Host ""
Write-Host "üß™ Fonctionnalit√©s √† tester:" -ForegroundColor Green
Write-Host "   ‚Ä¢ Agent Orchestrateur Intelligent (Point 1)"
Write-Host "   ‚Ä¢ Syst√®me de Notifications A2A (Point 2)"
Write-Host "   ‚Ä¢ Interface React Intelligente (Point 3)"
Write-Host "   ‚Ä¢ Tests et Validation (Point 4)"
Write-Host "   ‚Ä¢ Int√©gration Production (Point 5)"
Write-Host ""
Write-Host "üë§ Profils de test disponibles:" -ForegroundColor Green
Write-Host "   ‚Ä¢ Junior EBIOS RM (apprentissage guid√©)"
Write-Host "   ‚Ä¢ Senior EBIOS RM (interface √©quilibr√©e)"
Write-Host "   ‚Ä¢ Expert EBIOS RM (fonctionnalit√©s compl√®tes)"
Write-Host "   ‚Ä¢ Master EBIOS RM (collaboration A2A)"
Write-Host ""
Write-Host "üîß Commandes utiles:" -ForegroundColor Green
Write-Host "   ‚Ä¢ Ctrl+C : Arr√™ter le serveur"
Write-Host "   ‚Ä¢ F12 : Ouvrir les outils de d√©veloppement"
Write-Host "   ‚Ä¢ Ctrl+Shift+I : Inspecter les composants React"
Write-Host ""

# üöÄ D√©marrage du serveur
Write-Host "üöÄ D√©marrage du serveur de d√©veloppement..." -ForegroundColor Blue
Write-Host ""

# D√©marrage en arri√®re-plan
$job = Start-Job -ScriptBlock { npm run dev }

# Attendre que le serveur d√©marre
Write-Host "‚è≥ D√©marrage en cours..." -ForegroundColor Yellow
Start-Sleep -Seconds 8

# V√©rifier si le serveur est d√©marr√©
try {
    $response = Invoke-WebRequest -Uri "http://${HOST}:${PORT}" -TimeoutSec 5 -ErrorAction Stop
    Write-Host "‚úÖ Serveur d√©marr√© avec succ√®s !" -ForegroundColor Green
    Write-Host ""
    Write-Host "üéØ ACC√àS DIRECT AU WORKSHOP 1:" -ForegroundColor Blue
    Write-Host "$WORKSHOP1_URL" -ForegroundColor Green
    Write-Host ""
    Write-Host "üìù Instructions pour tester:" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "1. üåê Ouvrez votre navigateur sur: $WORKSHOP1_URL"
    Write-Host "2. üîê Connectez-vous avec vos identifiants"
    Write-Host "3. üë§ Configurez votre profil d'expertise"
    Write-Host "4. üéØ Testez l'adaptation intelligente de l'interface"
    Write-Host "5. ü§ñ Interagissez avec l'agent orchestrateur"
    Write-Host "6. üîî Testez les notifications expertes A2A"
    Write-Host "7. üìä V√©rifiez les m√©triques et le monitoring"
    Write-Host ""
    Write-Host "üîç Logs de d√©veloppement:" -ForegroundColor Blue
    Write-Host "   ‚Ä¢ Console navigateur : Logs d√©taill√©s du Workshop 1"
    Write-Host "   ‚Ä¢ Redux DevTools : √âtat de l'application"
    Write-Host "   ‚Ä¢ React DevTools : Composants et props"
    Write-Host "   ‚Ä¢ Network : Requ√™tes API et Firebase"
    Write-Host ""
    
    # Ouvrir automatiquement le navigateur
    Write-Host "üåê Ouverture automatique du navigateur..." -ForegroundColor Yellow
    Start-Process $WORKSHOP1_URL
    
} catch {
    Write-Host "‚ö†Ô∏è Le serveur d√©marre encore... Veuillez patienter" -ForegroundColor Yellow
    Write-Host "   V√©rifiez manuellement: http://${HOST}:${PORT}"
}

Write-Host ""
Write-Host "üéâ WORKSHOP 1 PR√äT POUR LES TESTS !" -ForegroundColor Green
Write-Host ""
Write-Host "Appuyez sur Ctrl+C pour arr√™ter le serveur" -ForegroundColor Yellow

# Attendre et afficher les logs du job
try {
    while ($job.State -eq "Running") {
        Receive-Job $job -Keep | Write-Host
        Start-Sleep -Seconds 1
    }
} finally {
    # Nettoyer le job
    Stop-Job $job -ErrorAction SilentlyContinue
    Remove-Job $job -ErrorAction SilentlyContinue
}
