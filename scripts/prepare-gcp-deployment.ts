#!/usr/bin/env node

/**
 * üöÄ PR√âPARATION D√âPLOIEMENT GCP - EBIOS RM
 * 
 * Script principal pour pr√©parer le d√©ploiement sur Google Cloud Platform
 * - Audit complet du sch√©ma Firebase
 * - G√©n√©ration des r√®gles de s√©curit√© Firestore
 * - G√©n√©ration des index optimis√©s
 * - V√©rification de la coh√©rence des donn√©es
 * - Recommandations de d√©ploiement
 */

import { FirebaseSchemaAuditor } from './firebase-audit-runner';
import { FirestoreRulesGenerator } from './generate-firestore-rules';
import { FirestoreIndexGenerator } from './generate-firestore-indexes';
import * as fs from 'fs';
import * as path from 'path';

interface DeploymentChecklist {
  schemaAudit: boolean;
  securityRules: boolean;
  indexes: boolean;
  environmentConfig: boolean;
  backupStrategy: boolean;
  monitoringSetup: boolean;
  performanceTesting: boolean;
}

interface DeploymentReport {
  timestamp: string;
  status: 'READY' | 'NEEDS_ATTENTION' | 'NOT_READY';
  checklist: DeploymentChecklist;
  criticalIssues: string[];
  warnings: string[];
  recommendations: string[];
  nextSteps: string[];
}

class GCPDeploymentPreparator {
  private report: DeploymentReport;

  constructor() {
    this.report = {
      timestamp: new Date().toISOString(),
      status: 'NOT_READY',
      checklist: {
        schemaAudit: false,
        securityRules: false,
        indexes: false,
        environmentConfig: false,
        backupStrategy: false,
        monitoringSetup: false,
        performanceTesting: false
      },
      criticalIssues: [],
      warnings: [],
      recommendations: [],
      nextSteps: []
    };
  }

  /**
   * Ex√©cuter la pr√©paration compl√®te du d√©ploiement
   */
  public async prepareDeployment(): Promise<void> {
    console.log('üöÄ PR√âPARATION DU D√âPLOIEMENT GCP - EBIOS RM');
    console.log('=' .repeat(60));
    console.log(`üìÖ D√©marr√© le: ${new Date().toLocaleString('fr-FR')}\n`);

    try {
      // 1. Audit du sch√©ma Firebase
      await this.runSchemaAudit();
      
      // 2. G√©n√©ration des r√®gles de s√©curit√©
      await this.generateSecurityRules();
      
      // 3. G√©n√©ration des index
      await this.generateIndexes();
      
      // 4. V√©rification de la configuration d'environnement
      await this.checkEnvironmentConfiguration();
      
      // 5. V√©rification de la strat√©gie de sauvegarde
      await this.checkBackupStrategy();
      
      // 6. Configuration du monitoring
      await this.setupMonitoring();
      
      // 7. Recommandations de tests de performance
      await this.performanceTestingRecommendations();
      
      // 8. G√©n√©ration du rapport final
      await this.generateFinalReport();
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la pr√©paration du d√©ploiement:', error);
      this.report.criticalIssues.push(`Erreur fatale: ${error}`);
      this.report.status = 'NOT_READY';
    }
  }

  /**
   * Ex√©cuter l'audit du sch√©ma Firebase
   */
  private async runSchemaAudit(): Promise<void> {
    console.log('üîç 1. AUDIT DU SCH√âMA FIREBASE');
    console.log('-' .repeat(40));
    
    try {
      const auditor = new FirebaseSchemaAuditor();
      await auditor.runFullAudit();
      
      // V√©rifier s'il y a des issues critiques
      const auditReportPath = path.join(process.cwd(), 'firebase-audit-report.json');
      if (fs.existsSync(auditReportPath)) {
        const auditData = JSON.parse(fs.readFileSync(auditReportPath, 'utf-8'));
        const criticalIssues = auditData.results
          .flatMap((r: any) => r.issues)
          .filter((i: any) => i.severity === 'CRITICAL');
        
        if (criticalIssues.length > 0) {
          this.report.criticalIssues.push(...criticalIssues.map((i: any) => i.message));
        }
        
        const highIssues = auditData.results
          .flatMap((r: any) => r.issues)
          .filter((i: any) => i.severity === 'HIGH');
        
        if (highIssues.length > 0) {
          this.report.warnings.push(...highIssues.map((i: any) => i.message));
        }
      }
      
      this.report.checklist.schemaAudit = true;
      console.log('‚úÖ Audit du sch√©ma termin√©\n');
      
    } catch (error) {
      console.error('‚ùå √âchec de l\'audit du sch√©ma:', error);
      this.report.criticalIssues.push('√âchec de l\'audit du sch√©ma Firebase');
    }
  }

  /**
   * G√©n√©rer les r√®gles de s√©curit√© Firestore
   */
  private async generateSecurityRules(): Promise<void> {
    console.log('üîí 2. G√âN√âRATION DES R√àGLES DE S√âCURIT√â');
    console.log('-' .repeat(40));
    
    try {
      const rulesGenerator = new FirestoreRulesGenerator();
      rulesGenerator.saveRulesToFile();
      
      this.report.checklist.securityRules = true;
      console.log('‚úÖ R√®gles de s√©curit√© g√©n√©r√©es\n');
      
    } catch (error) {
      console.error('‚ùå √âchec de la g√©n√©ration des r√®gles:', error);
      this.report.criticalIssues.push('√âchec de la g√©n√©ration des r√®gles de s√©curit√©');
    }
  }

  /**
   * G√©n√©rer les index Firestore
   */
  private async generateIndexes(): Promise<void> {
    console.log('üîç 3. G√âN√âRATION DES INDEX FIRESTORE');
    console.log('-' .repeat(40));
    
    try {
      const indexGenerator = new FirestoreIndexGenerator();
      indexGenerator.saveConfigurationToFile();
      
      this.report.checklist.indexes = true;
      console.log('‚úÖ Index Firestore g√©n√©r√©s\n');
      
    } catch (error) {
      console.error('‚ùå √âchec de la g√©n√©ration des index:', error);
      this.report.criticalIssues.push('√âchec de la g√©n√©ration des index Firestore');
    }
  }

  /**
   * V√©rifier la configuration d'environnement
   */
  private async checkEnvironmentConfiguration(): Promise<void> {
    console.log('‚öôÔ∏è  4. V√âRIFICATION DE LA CONFIGURATION');
    console.log('-' .repeat(40));
    
    const requiredEnvVars = [
      'VITE_FIREBASE_API_KEY',
      'VITE_FIREBASE_AUTH_DOMAIN',
      'VITE_FIREBASE_PROJECT_ID',
      'VITE_FIREBASE_STORAGE_BUCKET',
      'VITE_FIREBASE_MESSAGING_SENDER_ID',
      'VITE_FIREBASE_APP_ID'
    ];

    const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
    
    if (missingVars.length > 0) {
      this.report.criticalIssues.push(`Variables d'environnement manquantes: ${missingVars.join(', ')}`);
      console.log(`‚ùå Variables manquantes: ${missingVars.join(', ')}`);
    } else {
      this.report.checklist.environmentConfig = true;
      console.log('‚úÖ Configuration d\'environnement valid√©e');
    }

    // V√©rifier les fichiers de configuration
    const configFiles = [
      '.env.production',
      'firebase.json',
      'package.json'
    ];

    configFiles.forEach(file => {
      if (!fs.existsSync(path.join(process.cwd(), file))) {
        this.report.warnings.push(`Fichier de configuration manquant: ${file}`);
      }
    });

    console.log('');
  }

  /**
   * V√©rifier la strat√©gie de sauvegarde
   */
  private async checkBackupStrategy(): Promise<void> {
    console.log('üíæ 5. STRAT√âGIE DE SAUVEGARDE');
    console.log('-' .repeat(40));
    
    this.report.recommendations.push(
      'Configurer les sauvegardes automatiques Firestore',
      'Mettre en place une strat√©gie de r√©tention des donn√©es',
      'Tester la proc√©dure de restauration',
      'Documenter les proc√©dures de r√©cup√©ration d\'urgence'
    );

    // V√©rifier si les scripts de sauvegarde existent
    const backupScripts = [
      'scripts/backup-firestore.ts',
      'scripts/restore-firestore.ts'
    ];

    let backupScriptsExist = 0;
    backupScripts.forEach(script => {
      if (fs.existsSync(path.join(process.cwd(), script))) {
        backupScriptsExist++;
      }
    });

    if (backupScriptsExist === backupScripts.length) {
      this.report.checklist.backupStrategy = true;
      console.log('‚úÖ Scripts de sauvegarde d√©tect√©s');
    } else {
      this.report.warnings.push('Scripts de sauvegarde manquants');
      console.log('‚ö†Ô∏è  Scripts de sauvegarde √† cr√©er');
    }

    console.log('');
  }

  /**
   * Configuration du monitoring
   */
  private async setupMonitoring(): Promise<void> {
    console.log('üìä 6. CONFIGURATION DU MONITORING');
    console.log('-' .repeat(40));
    
    this.report.recommendations.push(
      'Configurer Google Cloud Monitoring pour Firestore',
      'Mettre en place des alertes sur les quotas',
      'Surveiller les performances des requ√™tes',
      'Configurer les logs d\'audit',
      'Mettre en place un dashboard de monitoring'
    );

    // Pour l'instant, on consid√®re que le monitoring doit √™tre configur√© manuellement
    this.report.checklist.monitoringSetup = false;
    console.log('‚ö†Ô∏è  Monitoring √† configurer manuellement dans GCP');
    console.log('');
  }

  /**
   * Recommandations pour les tests de performance
   */
  private async performanceTestingRecommendations(): Promise<void> {
    console.log('üöÄ 7. TESTS DE PERFORMANCE');
    console.log('-' .repeat(40));
    
    this.report.recommendations.push(
      'Tester les requ√™tes avec des volumes de donn√©es r√©alistes',
      'Valider les temps de r√©ponse des API',
      'Tester la mont√©e en charge',
      'V√©rifier les limites de Firestore',
      'Optimiser les requ√™tes lentes'
    );

    // Cr√©er un script de test de performance basique
    this.createPerformanceTestScript();
    
    this.report.checklist.performanceTesting = false;
    // console.log supprim√©;
    console.log('');
  }

  /**
   * Cr√©er un script de test de performance
   */
  private createPerformanceTestScript(): void {
    const testScript = `/**
 * üöÄ TESTS DE PERFORMANCE FIRESTORE
 * 
 * Script pour tester les performances avant d√©ploiement GCP
 */

import { initializeApp } from 'firebase/app';
import { getFirestore, collection, getDocs, query, where, orderBy, limit } from 'firebase/firestore';

// TODO: Remplacer par votre configuration Firebase
const firebaseConfig = {
  // Configuration Firebase
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

async function testPerformance() {
  // console.log supprim√©;
  
  // Test 1: Requ√™te simple sur les missions
  console.time('Missions query');
  const missionsQuery = query(collection(db, 'missions'), limit(100));
  await getDocs(missionsQuery);
  console.timeEnd('Missions query');
  
  // Test 2: Requ√™te avec filtre
  console.time('Filtered missions query');
  const filteredQuery = query(
    collection(db, 'missions'), 
    where('status', '==', 'in_progress'),
    limit(50)
  );
  await getDocs(filteredQuery);
  console.timeEnd('Filtered missions query');
  
  // Test 3: Requ√™te composite
  console.time('Composite query');
  const compositeQuery = query(
    collection(db, 'businessValues'),
    where('category', '==', 'primary'),
    orderBy('priority'),
    limit(25)
  );
  await getDocs(compositeQuery);
  console.timeEnd('Composite query');
  
  // console.log supprim√©;
}

testPerformance().catch(console.error);
`;

    const testPath = path.join(process.cwd(), 'scripts/performance-test.ts');
    fs.writeFileSync(testPath, testScript);
    // console.log supprim√©;
  }

  /**
   * G√©n√©rer le rapport final
   */
  private async generateFinalReport(): Promise<void> {
    console.log('üìã 8. RAPPORT FINAL DE D√âPLOIEMENT');
    console.log('=' .repeat(60));
    
    // D√©terminer le statut global
    const completedChecks = Object.values(this.report.checklist).filter(Boolean).length;
    const totalChecks = Object.keys(this.report.checklist).length;
    
    if (this.report.criticalIssues.length > 0) {
      this.report.status = 'NOT_READY';
    } else if (completedChecks === totalChecks) {
      this.report.status = 'READY';
    } else {
      this.report.status = 'NEEDS_ATTENTION';
    }

    // Ajouter les √©tapes suivantes
    this.report.nextSteps = [
      'R√©soudre tous les probl√®mes critiques identifi√©s',
      'Configurer les variables d\'environnement de production',
      'Tester les r√®gles de s√©curit√© Firestore',
      'D√©ployer les index Firestore',
      'Configurer le monitoring GCP',
      'Ex√©cuter les tests de performance',
      'Planifier la strat√©gie de sauvegarde',
      'Former l\'√©quipe sur les proc√©dures de d√©ploiement'
    ];

    // Afficher le r√©sum√©
    console.log(`üìä Statut: ${this.getStatusIcon()} ${this.report.status}`);
    console.log(`‚úÖ V√©rifications compl√©t√©es: ${completedChecks}/${totalChecks}`);
    console.log(`üî¥ Probl√®mes critiques: ${this.report.criticalIssues.length}`);
    console.log(`‚ö†Ô∏è  Avertissements: ${this.report.warnings.length}`);
    console.log(`üí° Recommandations: ${this.report.recommendations.length}`);

    if (this.report.criticalIssues.length > 0) {
      console.log('\nüö® PROBL√àMES CRITIQUES √Ä R√âSOUDRE:');
      this.report.criticalIssues.forEach((issue, index) => {
        console.log(`  ${index + 1}. ${issue}`);
      });
    }

    if (this.report.warnings.length > 0) {
      console.log('\n‚ö†Ô∏è  AVERTISSEMENTS:');
      this.report.warnings.forEach((warning, index) => {
        console.log(`  ${index + 1}. ${warning}`);
      });
    }

    console.log('\nüéØ PROCHAINES √âTAPES:');
    this.report.nextSteps.forEach((step, index) => {
      console.log(`  ${index + 1}. ${step}`);
    });

    // Sauvegarder le rapport
    const reportPath = path.join(process.cwd(), 'gcp-deployment-report.json');
    fs.writeFileSync(reportPath, JSON.stringify(this.report, null, 2));
    console.log(`\nüìÑ Rapport complet sauvegard√©: ${reportPath}`);

    // Message final
    console.log('\n' + '=' .repeat(60));
    if (this.report.status === 'READY') {
      console.log('üéâ VOTRE APPLICATION EST PR√äTE POUR LE D√âPLOIEMENT GCP !');
    } else if (this.report.status === 'NEEDS_ATTENTION') {
      console.log('‚ö†Ô∏è  QUELQUES AJUSTEMENTS SONT N√âCESSAIRES AVANT LE D√âPLOIEMENT');
    } else {
      console.log('üö® DES PROBL√àMES CRITIQUES DOIVENT √äTRE R√âSOLUS AVANT LE D√âPLOIEMENT');
    }
    console.log('=' .repeat(60));
  }

  /**
   * Obtenir l'ic√¥ne de statut
   */
  private getStatusIcon(): string {
    switch (this.report.status) {
      case 'READY': return 'üü¢';
      case 'NEEDS_ATTENTION': return 'üü°';
      case 'NOT_READY': return 'üî¥';
      default: return '‚ö™';
    }
  }
}

// Ex√©cuter la pr√©paration si le script est appel√© directement
if (require.main === module) {
  const preparator = new GCPDeploymentPreparator();
  preparator.prepareDeployment().catch(console.error);
}

export { GCPDeploymentPreparator };
