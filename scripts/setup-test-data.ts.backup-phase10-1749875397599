#!/usr/bin/env tsx

/**
 * üéØ SCRIPT DE SETUP DES DONN√âES DE TEST R√âELLES
 * Initialise une base de donn√©es Firebase avec des donn√©es de test compl√®tes
 */

import { RealTestDataService } from '../src/services/test-data/RealTestDataService';
import { FirebaseTestUtils } from '../src/config/firebase.test';

async function setupTestData() {
  console.log('üöÄ SETUP DES DONN√âES DE TEST R√âELLES');
  console.log('=====================================\n');

  try {
    // 1. V√©rifier la connexion Firebase
    console.log('üî• V√©rification de la connexion Firebase...');
    const isConnected = await FirebaseTestUtils.checkConnection();
    
    if (!isConnected) {
      console.error('‚ùå Impossible de se connecter √† Firebase');
      console.log('üí° V√©rifiez votre configuration Firebase dans .env.production');
      process.exit(1);
    }
    
    console.log('‚úÖ Connexion Firebase √©tablie\n');

    // 2. Initialiser le service de donn√©es de test
    const testDataService = RealTestDataService.getInstance();

    // 3. Nettoyer les donn√©es existantes
    // console.log supprim√©;
    await testDataService.cleanupAllTestData();
    console.log('‚úÖ Nettoyage termin√©\n');

    // 4. Cr√©er des missions de test
    // console.log supprim√©;
    
    const missions = [
      'Mission Test - Banque en ligne',
      'Mission Test - E-commerce',
      'Mission Test - Syst√®me de sant√©',
      'Mission Test - Administration publique',
      'Mission Test - Industrie critique'
    ];

    const createdMissions: string[] = [];

    for (const missionName of missions) {
      console.log(`  üìù Cr√©ation: ${missionName}`);
      const missionId = await testDataService.createTestMission(missionName);
      createdMissions.push(missionId);
      console.log(`  ‚úÖ Cr√©√©e avec ID: ${missionId}`);
    }

    // console.log supprim√©;

    // 5. Afficher le r√©sum√©
    console.log('\nüìä R√âSUM√â DES DONN√âES CR√â√âES');
    console.log('============================');
    console.log(`Missions: ${createdMissions.length}`);
    console.log('Chaque mission contient:');
    console.log('  ‚Ä¢ 4 biens essentiels');
    console.log('  ‚Ä¢ 6 biens supports');
    console.log('  ‚Ä¢ 3 √©v√©nements redout√©s');
    console.log('  ‚Ä¢ 2 sources de risque');
    console.log('  ‚Ä¢ 1 sc√©nario strat√©gique');
    console.log('  ‚Ä¢ 1 sc√©nario op√©rationnel');
    console.log('  ‚Ä¢ 2 mesures de s√©curit√©');

    console.log('\nüîß UTILISATION');
    console.log('===============');
    // console.log supprim√©;
    // console.log supprim√©;
    console.log('\nPour nettoyer les donn√©es:');
    // console.log supprim√©;

    console.log('\n‚úÖ Setup termin√© avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur lors du setup:', error);
    process.exit(1);
  }
}

async function cleanupTestData() {
  console.log('NETTOYAGE DES DONN√âES DE TEST');
  console.log('=================================\n');

  try {
    const testDataService = RealTestDataService.getInstance();
    await testDataService.cleanupAllTestData();
    console.log('‚úÖ Nettoyage termin√© avec succ√®s !');
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error);
    process.exit(1);
  }
}

// Gestion des arguments de ligne de commande
const command = process.argv[2];

switch (command) {
  case 'setup':
    setupTestData();
    break;
  case 'cleanup':
    cleanupTestData();
    break;
  default:
    setupTestData();
    break;
}
