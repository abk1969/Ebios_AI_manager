#!/usr/bin/env node

/**
 * üéØ V√âRIFICATION DES AM√âLIORATIONS UX WORKSHOP
 * V√©rifie que toutes les am√©liorations d'aide utilisateur sont en place
 */

const fs = require('fs');

console.log('üéØ V√âRIFICATION DES AM√âLIORATIONS UX WORKSHOP\n');

let allGood = true;
const issues = [];

// 1. V√©rifier que IntelligentWorkshopAlert existe
console.log('1. üö® V√©rification IntelligentWorkshopAlert...');
try {
  const alertContent = fs.readFileSync('src/components/workshops/IntelligentWorkshopAlert.tsx', 'utf8');
  
  if (alertContent.includes('interface WorkshopCriterion')) {
    console.log('   ‚úÖ Interface WorkshopCriterion d√©finie');
  } else {
    console.log('   ‚ùå Interface WorkshopCriterion manquante');
    issues.push('Interface WorkshopCriterion manquante');
    allGood = false;
  }
  
  if (alertContent.includes('Actions Prioritaires')) {
    console.log('   ‚úÖ Section Actions Prioritaires pr√©sente');
  } else {
    console.log('   ‚ùå Section Actions Prioritaires manquante');
    issues.push('Section Actions Prioritaires manquante');
    allGood = false;
  }
  
  if (alertContent.includes('getPriorityIcon')) {
    console.log('   ‚úÖ Syst√®me de priorit√©s impl√©ment√©');
  } else {
    console.log('   ‚ùå Syst√®me de priorit√©s manquant');
    issues.push('Syst√®me de priorit√©s manquant');
    allGood = false;
  }
} catch (error) {
  console.log('   ‚ùå Fichier IntelligentWorkshopAlert.tsx non trouv√©');
  issues.push('IntelligentWorkshopAlert.tsx manquant');
  allGood = false;
}

// 2. V√©rifier que Workshop1AIAssistant existe
console.log('\n2. ü§ñ V√©rification Workshop1AIAssistant...');
try {
  const assistantContent = fs.readFileSync('src/components/workshops/Workshop1AIAssistant.tsx', 'utf8');
  
  if (assistantContent.includes('generateContextualSuggestions')) {
    console.log('   ‚úÖ G√©n√©ration de suggestions contextuelles');
  } else {
    console.log('   ‚ùå G√©n√©ration de suggestions manquante');
    issues.push('G√©n√©ration de suggestions manquante');
    allGood = false;
  }
  
  if (assistantContent.includes('activeTab')) {
    console.log('   ‚úÖ Interface √† onglets impl√©ment√©e');
  } else {
    console.log('   ‚ùå Interface √† onglets manquante');
    issues.push('Interface √† onglets manquante');
    allGood = false;
  }
  
  if (assistantContent.includes('suggestions') && assistantContent.includes('help') && assistantContent.includes('progress')) {
    console.log('   ‚úÖ Trois onglets (suggestions, aide, progression) pr√©sents');
  } else {
    console.log('   ‚ùå Onglets manquants');
    issues.push('Onglets manquants dans Workshop1AIAssistant');
    allGood = false;
  }
} catch (error) {
  console.log('   ‚ùå Fichier Workshop1AIAssistant.tsx non trouv√©');
  issues.push('Workshop1AIAssistant.tsx manquant');
  allGood = false;
}

// 3. V√©rifier l'int√©gration dans Workshop1Unified
console.log('\n3. üîß V√©rification int√©gration Workshop1Unified...');
try {
  const workshopContent = fs.readFileSync('src/pages/workshops/Workshop1Unified.tsx', 'utf8');
  
  if (workshopContent.includes('import IntelligentWorkshopAlert')) {
    console.log('   ‚úÖ IntelligentWorkshopAlert import√©');
  } else {
    console.log('   ‚ùå IntelligentWorkshopAlert non import√©');
    issues.push('IntelligentWorkshopAlert non import√©');
    allGood = false;
  }
  
  if (workshopContent.includes('import Workshop1AIAssistant')) {
    console.log('   ‚úÖ Workshop1AIAssistant import√©');
  } else {
    console.log('   ‚ùå Workshop1AIAssistant non import√©');
    issues.push('Workshop1AIAssistant non import√©');
    allGood = false;
  }
  
  if (workshopContent.includes('<IntelligentWorkshopAlert')) {
    console.log('   ‚úÖ IntelligentWorkshopAlert utilis√©');
  } else {
    console.log('   ‚ùå IntelligentWorkshopAlert non utilis√©');
    issues.push('IntelligentWorkshopAlert non utilis√©');
    allGood = false;
  }
  
  if (workshopContent.includes('<Workshop1AIAssistant')) {
    console.log('   ‚úÖ Workshop1AIAssistant utilis√©');
  } else {
    console.log('   ‚ùå Workshop1AIAssistant non utilis√©');
    issues.push('Workshop1AIAssistant non utilis√©');
    allGood = false;
  }
} catch (error) {
  console.log('   ‚ùå Erreur lecture Workshop1Unified.tsx:', error.message);
  issues.push('Impossible de lire Workshop1Unified.tsx');
  allGood = false;
}

// 4. V√©rifier les am√©liorations des messages d'√©tat vide
console.log('\n4. üí¨ V√©rification messages d\'√©tat am√©lior√©s...');
try {
  const workshopContent = fs.readFileSync('src/pages/workshops/Workshop1Unified.tsx', 'utf8');
  
  if (workshopContent.includes('D√©finir mes valeurs m√©tier')) {
    console.log('   ‚úÖ Messages d\'action am√©lior√©s');
  } else {
    console.log('   ‚ùå Messages d\'action non am√©lior√©s');
    issues.push('Messages d\'action non am√©lior√©s');
    allGood = false;
  }
  
  if (workshopContent.includes('üí° Exemples :')) {
    console.log('   ‚úÖ Exemples contextuels ajout√©s');
  } else {
    console.log('   ‚ùå Exemples contextuels manquants');
    issues.push('Exemples contextuels manquants');
    allGood = false;
  }
  
  // Compter les occurrences d'alertes am√©lior√©es
  const improvedAlerts = (workshopContent.match(/üí° Exemples/g) || []).length;
  if (improvedAlerts >= 3) {
    console.log(`   ‚úÖ ${improvedAlerts} alertes am√©lior√©es d√©tect√©es`);
  } else {
    console.log(`   ‚ùå Seulement ${improvedAlerts} alertes am√©lior√©es (attendu: 3+)`);
    issues.push('Pas assez d\'alertes am√©lior√©es');
    allGood = false;
  }
} catch (error) {
  console.log('   ‚ùå Erreur v√©rification messages:', error.message);
  issues.push('Impossible de v√©rifier les messages');
  allGood = false;
}

// 5. V√©rifier la suppression des anciennes alertes peu claires
console.log('\n5. üóëÔ∏è V√©rification suppression anciennes alertes...');
try {
  const workshopContent = fs.readFileSync('src/pages/workshops/Workshop1Unified.tsx', 'utf8');
  
  if (workshopContent.includes('Atelier incomplet') && !workshopContent.includes('<IntelligentWorkshopAlert')) {
    console.log('   ‚ùå Anciennes alertes encore pr√©sentes');
    issues.push('Anciennes alertes non supprim√©es');
    allGood = false;
  } else {
    console.log('   ‚úÖ Anciennes alertres remplac√©es ou supprim√©es');
  }
  
  if (workshopContent.includes('Compl√©tez tous les crit√®res obligatoires') && !workshopContent.includes('Actions Prioritaires')) {
    console.log('   ‚ùå Messages vagues encore pr√©sents');
    issues.push('Messages vagues non remplac√©s');
    allGood = false;
  } else {
    console.log('   ‚úÖ Messages vagues remplac√©s par des actions concr√®tes');
  }
} catch (error) {
  console.log('   ‚ùå Erreur v√©rification suppression:', error.message);
  issues.push('Impossible de v√©rifier la suppression');
  allGood = false;
}

// R√âSULTAT FINAL
console.log('\n' + '='.repeat(60));
console.log('üìä R√âSULTAT DE LA V√âRIFICATION UX');
console.log('='.repeat(60));

if (allGood) {
  console.log('üéâ ‚úÖ TOUTES LES AM√âLIORATIONS UX SONT EN PLACE !');
  console.log('\nüöÄ L\'exp√©rience utilisateur Workshop 1 est maintenant optimale:');
  console.log('  ‚Ä¢ ‚úÖ Alertes intelligentes avec actions concr√®tes');
  console.log('  ‚Ä¢ ‚úÖ Assistant IA contextuel avec suggestions');
  console.log('  ‚Ä¢ ‚úÖ Messages d\'√©tat clairs et informatifs');
  console.log('  ‚Ä¢ ‚úÖ Guidance progressive et adaptative');
  console.log('  ‚Ä¢ ‚úÖ Interface intuitive avec aide int√©gr√©e');
  console.log('\nüí° L\'utilisateur sait maintenant exactement quoi faire √† chaque √©tape !');
  console.log('\nüéØ Prochaines √©tapes recommand√©es:');
  console.log('  1. Testez le parcours utilisateur complet');
  console.log('  2. V√©rifiez les suggestions contextuelles');
  console.log('  3. Confirmez que les actions fonctionnent');
  console.log('  4. Validez l\'aide progressive');
} else {
  console.log('‚ùå DES AM√âLIORATIONS SONT INCOMPL√àTES:');
  issues.forEach((issue, index) => {
    console.log(`  ${index + 1}. ${issue}`);
  });
  console.log('\nüîß Compl√©tez ces am√©liorations pour une UX optimale.');
}

console.log('\n' + '='.repeat(60));

process.exit(allGood ? 0 : 1);
