#!/usr/bin/env node

/**
 * üîç VALIDATION TRANSPARENCE M√âTRIQUES
 * Script pour v√©rifier que toutes les m√©triques sont expliqu√©es
 * CONFORMIT√â ANSSI: Transparence totale des calculs
 */

const fs = require('fs');
const path = require('path');

console.log('üîç VALIDATION TRANSPARENCE M√âTRIQUES EBIOS RM');
console.log('=============================================\n');

/**
 * Composants √† v√©rifier pour la transparence des m√©triques
 */
const COMPONENTS_TO_CHECK = [
  {
    file: 'src/components/ui/MetricTooltip.tsx',
    name: 'MetricTooltip',
    required: [
      'METRIC_EXPLANATIONS',
      'calculation',
      'anssiReference',
      'criteria',
      'interpretation'
    ]
  },
  {
    file: 'src/components/workshops/WorkshopMetricsDisplay.tsx',
    name: 'WorkshopMetricsDisplay',
    required: [
      'EbiosRMMetricsService',
      'MetricTooltip',
      'getMetricStatus',
      'loadMetrics'
    ]
  },
  {
    file: 'src/components/workshops/StandardWorkshopHeader.tsx',
    name: 'StandardWorkshopHeader',
    required: [
      'WorkshopMetricsDisplay',
      'AICoherenceIndicator'
    ]
  },
  {
    file: 'src/components/ai/AICoherenceIndicator.tsx',
    name: 'AICoherenceIndicator',
    required: [
      'MetricTooltip',
      'coherenceResult',
      'scorePercent'
    ]
  }
];

/**
 * M√©triques qui doivent avoir des explications
 */
const REQUIRED_METRIC_EXPLANATIONS = [
  'completion-1',
  'conformity-1',
  'completion-2',
  'completion-3',
  'completion-4',
  'completion-5'
];

/**
 * V√©rifie qu'un composant contient les √©l√©ments requis
 */
function validateComponent(componentInfo) {
  console.log(`üîç Validation: ${componentInfo.name}`);
  
  if (!fs.existsSync(componentInfo.file)) {
    console.log(`   ‚ùå Fichier manquant: ${componentInfo.file}`);
    return false;
  }
  
  const content = fs.readFileSync(componentInfo.file, 'utf8');
  const results = [];
  
  componentInfo.required.forEach(requirement => {
    const found = content.includes(requirement);
    results.push({ requirement, found });
    
    const status = found ? '‚úÖ' : '‚ùå';
    console.log(`   ${status} ${requirement}`);
  });
  
  const allFound = results.every(r => r.found);
  console.log(`   üìä R√©sultat: ${results.filter(r => r.found).length}/${results.length} √©l√©ments trouv√©s\n`);
  
  return allFound;
}

/**
 * V√©rifie que toutes les explications de m√©triques sont pr√©sentes
 */
function validateMetricExplanations() {
  console.log('üìã Validation des explications de m√©triques:');
  
  const tooltipFile = 'src/components/ui/MetricTooltip.tsx';
  if (!fs.existsSync(tooltipFile)) {
    console.log('   ‚ùå Fichier MetricTooltip.tsx manquant');
    return false;
  }
  
  const content = fs.readFileSync(tooltipFile, 'utf8');
  const results = [];
  
  REQUIRED_METRIC_EXPLANATIONS.forEach(metricKey => {
    const found = content.includes(`'${metricKey}':`);
    results.push({ metricKey, found });
    
    const status = found ? '‚úÖ' : '‚ùå';
    console.log(`   ${status} Explication ${metricKey}`);
  });
  
  // V√©rifications sp√©cifiques du contenu
  const specificChecks = [
    { name: 'Calculs ANSSI', pattern: /Guide ANSSI EBIOS RM v1\.0/g },
    { name: 'Formules de calcul', pattern: /Calcul:/g },
    { name: 'Crit√®res obligatoires', pattern: /Crit√®res ANSSI/g },
    { name: 'Interpr√©tations', pattern: /interpretation:/g },
    { name: 'R√©f√©rences m√©thodologiques', pattern: /anssiReference:/g }
  ];
  
  console.log('\n   üìä V√©rifications du contenu:');
  specificChecks.forEach(check => {
    const matches = content.match(check.pattern);
    const count = matches ? matches.length : 0;
    const status = count > 0 ? '‚úÖ' : '‚ùå';
    console.log(`   ${status} ${check.name}: ${count} occurrence(s)`);
  });
  
  const allExplanationsFound = results.every(r => r.found);
  const allContentChecksPass = specificChecks.every(check => {
    const matches = content.match(check.pattern);
    return matches && matches.length > 0;
  });
  
  console.log(`\n   üìä R√©sultat explications: ${results.filter(r => r.found).length}/${results.length} m√©triques expliqu√©es`);
  console.log(`   üìä R√©sultat contenu: ${specificChecks.filter(c => content.match(c.pattern)).length}/${specificChecks.length} v√©rifications pass√©es\n`);
  
  return allExplanationsFound && allContentChecksPass;
}

/**
 * V√©rifie l'int√©gration dans les workshops
 */
function validateWorkshopIntegration() {
  console.log('üîß Validation int√©gration workshops:');
  
  const workshopFiles = [
    'src/pages/workshops/Workshop1.tsx',
    'src/pages/workshops/Workshop2.tsx',
    'src/pages/workshops/Workshop3.tsx',
    'src/pages/workshops/Workshop4.tsx',
    'src/pages/workshops/Workshop5.tsx'
  ];
  
  const results = [];
  
  workshopFiles.forEach((file, index) => {
    const workshopNumber = index + 1;
    console.log(`   üîç Workshop ${workshopNumber}:`);
    
    if (!fs.existsSync(file)) {
      console.log(`      ‚ùå Fichier manquant: ${file}`);
      results.push(false);
      return;
    }
    
    const content = fs.readFileSync(file, 'utf8');
    
    // V√©rifications sp√©cifiques
    const checks = [
      { name: 'StandardWorkshopHeader', test: content.includes('StandardWorkshopHeader') },
      { name: 'M√©triques visibles', test: content.includes('WorkshopMetricsDisplay') || content.includes('AICoherenceIndicator') }
    ];
    
    const allChecksPass = checks.every(check => {
      const status = check.test ? '‚úÖ' : '‚ùå';
      console.log(`      ${status} ${check.name}`);
      return check.test;
    });
    
    results.push(allChecksPass);
  });
  
  const successCount = results.filter(Boolean).length;
  console.log(`\n   üìä R√©sultat int√©gration: ${successCount}/${results.length} workshops int√©gr√©s\n`);
  
  return successCount >= 3; // Au moins 3 workshops doivent √™tre int√©gr√©s
}

/**
 * V√©rifie la conformit√© ANSSI des calculs
 */
function validateANSSICompliance() {
  console.log('üìã Validation conformit√© ANSSI:');
  
  const metricsServiceFile = 'src/services/metrics/EbiosRMMetricsService.ts';
  if (!fs.existsSync(metricsServiceFile)) {
    console.log('   ‚ùå Service de m√©triques manquant');
    return false;
  }
  
  const content = fs.readFileSync(metricsServiceFile, 'utf8');
  
  const anssiChecks = [
    { name: 'Minimums ANSSI d√©finis', pattern: /minBusinessValues = 3|minSupportingAssets = 5|minDreadedEvents = 2/g },
    { name: 'Calculs conformes', pattern: /calculateWorkshop\dMetrics/g },
    { name: 'Validation qualit√©', pattern: /validateDataQuality/g },
    { name: 'Score conformit√©', pattern: /calculateANSSIConformityScore/g },
    { name: 'Pond√©ration ateliers', pattern: /weights = \[/g }
  ];
  
  const results = [];
  anssiChecks.forEach(check => {
    const matches = content.match(check.pattern);
    const count = matches ? matches.length : 0;
    const found = count > 0;
    results.push(found);
    
    const status = found ? '‚úÖ' : '‚ùå';
    console.log(`   ${status} ${check.name}: ${count} occurrence(s)`);
  });
  
  const complianceScore = (results.filter(Boolean).length / results.length) * 100;
  console.log(`\n   üìä Score conformit√© ANSSI: ${Math.round(complianceScore)}%\n`);
  
  return complianceScore >= 80;
}

/**
 * G√©n√®re le rapport final
 */
function generateFinalReport(componentResults, explanationsResult, integrationResult, complianceResult) {
  console.log('üìä RAPPORT FINAL - TRANSPARENCE M√âTRIQUES');
  console.log('=========================================');
  
  const componentScore = (componentResults.filter(Boolean).length / componentResults.length) * 100;
  
  console.log(`üìà R√©sultats d√©taill√©s:`);
  console.log(`   ‚Ä¢ Composants valid√©s: ${componentResults.filter(Boolean).length}/${componentResults.length} (${Math.round(componentScore)}%)`);
  console.log(`   ‚Ä¢ Explications m√©triques: ${explanationsResult ? 'Compl√®tes' : 'Incompl√®tes'}`);
  console.log(`   ‚Ä¢ Int√©gration workshops: ${integrationResult ? 'R√©ussie' : '√âchou√©e'}`);
  console.log(`   ‚Ä¢ Conformit√© ANSSI: ${complianceResult ? 'Valid√©e' : 'Non valid√©e'}`);
  
  const globalScore = Math.round(
    (componentScore * 0.3) +
    (explanationsResult ? 30 : 0) +
    (integrationResult ? 25 : 0) +
    (complianceResult ? 15 : 0)
  );
  
  console.log(`\nüéØ SCORE GLOBAL TRANSPARENCE: ${globalScore}%`);
  
  if (globalScore >= 90) {
    console.log('\nüéâ VALIDATION R√âUSSIE - TRANSPARENCE TOTALE !');
    console.log('‚úÖ Toutes les m√©triques sont maintenant expliqu√©es');
    console.log('‚úÖ Conformit√© ANSSI respect√©e');
    console.log('‚úÖ Utilisateurs peuvent comprendre chaque calcul');
    return true;
  } else if (globalScore >= 70) {
    console.log('\n‚ö†Ô∏è  VALIDATION PARTIELLE - AM√âLIORATIONS MINEURES');
    console.log('üîß Quelques ajustements n√©cessaires');
    return false;
  } else {
    console.log('\n‚ùå VALIDATION √âCHOU√âE - TRANSPARENCE INSUFFISANTE');
    console.log('üö® Travail suppl√©mentaire requis');
    return false;
  }
}

/**
 * Ex√©cution de la validation compl√®te
 */
async function runValidation() {
  try {
    console.log('üéØ D√©marrage validation transparence m√©triques...\n');
    
    // √âtape 1: Validation des composants
    console.log('üîß VALIDATION DES COMPOSANTS');
    console.log('============================');
    const componentResults = COMPONENTS_TO_CHECK.map(validateComponent);
    
    // √âtape 2: Validation des explications
    const explanationsResult = validateMetricExplanations();
    
    // √âtape 3: Validation de l'int√©gration
    const integrationResult = validateWorkshopIntegration();
    
    // √âtape 4: Validation conformit√© ANSSI
    const complianceResult = validateANSSICompliance();
    
    // √âtape 5: Rapport final
    const success = generateFinalReport(componentResults, explanationsResult, integrationResult, complianceResult);
    
    process.exit(success ? 0 : 1);
    
  } catch (error) {
    console.error('\n‚ùå ERREUR DURANT LA VALIDATION:', error.message);
    process.exit(1);
  }
}

// Lancement de la validation
runValidation();
