#!/usr/bin/env node

/**
 * üîç ANALYSE EXHAUSTIVE DES DONN√âES FICTIVES
 * Scan complet de TOUTE l'application pour d√©tecter les donn√©es fictives
 */

const fs = require('fs');
const path = require('path');

console.log('üîç ANALYSE EXHAUSTIVE DES DONN√âES FICTIVES');
console.log('='.repeat(60));

let totalIssuesFound = 0;
let totalFilesScanned = 0;

// Patterns √©tendus pour d√©tecter TOUTES les donn√©es fictives
const COMPREHENSIVE_FAKE_PATTERNS = [
  // Dates hardcod√©es (tous formats)
  /['"`]20\d{2}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[Z.]?[^'"`]*['"`]/g,
  /['"`]\d{2}\/\d{2}\/20\d{2}[^'"`]*['"`]/g,
  /['"`]20\d{2}-\d{2}-\d{2}['"`]/g,
  
  // Timestamps et dates dans les propri√©t√©s
  /timestamp:\s*['"`]20\d{2}-\d{2}-\d{2}/g,
  /lastDeployment:\s*['"`]20\d{2}-\d{2}-\d{2}/g,
  /createdAt:\s*['"`]20\d{2}-\d{2}-\d{2}/g,
  /updatedAt:\s*['"`]20\d{2}-\d{2}-\d{2}/g,
  /lastUpdate:\s*['"`]20\d{2}-\d{2}-\d{2}/g,
  /scheduledDate:\s*['"`]20\d{2}-\d{2}-\d{2}/g,
  /startDate:\s*['"`]20\d{2}-\d{2}-\d{2}/g,
  /endDate:\s*['"`]20\d{2}-\d{2}-\d{2}/g,
  /targetDate:\s*['"`]20\d{2}-\d{2}-\d{2}/g,
  /nextUpdate:\s*['"`]20\d{2}-\d{2}-\d{2}/g,
  /lastReview:\s*['"`]20\d{2}-\d{2}-\d{2}/g,
  /nextReview:\s*['"`]20\d{2}-\d{2}-\d{2}/g,
  
  // URLs fictives
  /https:\/\/[a-z-]+\.web\.app/g,
  /https:\/\/[a-z-]+-staging\.web\.app/g,
  /https:\/\/[a-z-]+-dev\.web\.app/g,
  
  // Versions fictives
  /version:\s*['"`]v\d+\.\d+\.\d+[^'"`]*['"`]/g,
  
  // IDs fictifs
  /id:\s*['"`][a-z]+-\d+['"`]/g,
  /id:\s*['"`]demo_[^'"`]*['"`]/g,
  /id:\s*['"`]test[^'"`]*['"`]/g,
  /id:\s*['"`]mock[^'"`]*['"`]/g,
  
  // Variables mock et simulation
  /mock[A-Z][a-zA-Z]*/g,
  /const\s+mock[A-Z]/g,
  /let\s+mock[A-Z]/g,
  /var\s+mock[A-Z]/g,
  
  // Commentaires de simulation
  /\/\/.*[Ss]imulation/g,
  /\/\*.*[Ss]imulation.*\*\//g,
  /\/\/.*[Mm]ock/g,
  /\/\*.*[Mm]ock.*\*\//g,
  /\/\/.*[Dd]emo/g,
  /\/\/.*[Tt]est/g,
  
  // useState avec donn√©es hardcod√©es
  /useState\s*\(\s*\[[^}]*\{[^}]*id:\s*['"][^'"]*['"]/g,
  /useState\s*\(\s*\{[^}]*:\s*\d+/g,
  
  // Donn√©es hardcod√©es dans les objets
  /name:\s*['"`][A-Z][^'"`]*['"`]/g,
  /title:\s*['"`][A-Z][^'"`]*['"`]/g,
  /description:\s*['"`][A-Z][^'"`]*['"`]/g,
  
  // Math.random et setTimeout
  /Math\.random\(\)/g,
  /setTimeout.*\d{3,}/g,
  /setInterval.*\d{3,}/g,
  
  // M√©triques dynamiques
  /score:\s*\d+/g,
  /progress:\s*\d+/g,
  /percentage:\s*\d+/g,
  /value:\s*\d+/g,
  /count:\s*\d+/g,
  /total:\s*\d+/g,
  
  // Donn√©es de test
  /FIXED_TIMESTAMP/g,
  /test-mission/g,
  /demo-/g,
  /example-/g
];

/**
 * R√©cup√®re tous les fichiers TypeScript/JavaScript r√©cursivement
 */
function getAllFiles(dir, fileList = []) {
  const files = fs.readdirSync(dir);
  
  files.forEach(file => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat.isDirectory()) {
      // Ignorer certains dossiers
      if (!['node_modules', '.git', 'dist', 'build', '.next'].includes(file)) {
        getAllFiles(filePath, fileList);
      }
    } else if (file.match(/\.(ts|tsx|js|jsx)$/)) {
      fileList.push(filePath);
    }
  });
  
  return fileList;
}

/**
 * Analyse un fichier pour d√©tecter les donn√©es fictives
 */
function analyzeFile(filePath) {
  totalFilesScanned++;
  
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const issues = [];

    // Recherche de patterns de donn√©es fictives
    COMPREHENSIVE_FAKE_PATTERNS.forEach((pattern, index) => {
      const matches = content.match(pattern);
      if (matches) {
        matches.forEach(match => {
          issues.push({
            type: getFakeDataType(index),
            pattern: match,
            line: getLineNumber(content, match)
          });
        });
      }
    });

    if (issues.length > 0) {
      console.log(`\nüìÑ ${filePath}:`);
      issues.forEach(issue => {
        console.log(`   ‚ùå Ligne ${issue.line}: ${issue.type} - ${issue.pattern.substring(0, 50)}...`);
        totalIssuesFound++;
      });
    }

    return issues;
  } catch (error) {
    console.log(`   ‚ö†Ô∏è  Erreur lecture: ${filePath} - ${error.message}`);
    return [];
  }
}

/**
 * D√©termine le type de donn√©e fictive
 */
function getFakeDataType(patternIndex) {
  const types = [
    'hardcoded_datetime',
    'hardcoded_date_fr',
    'hardcoded_date_iso',
    'fake_timestamp',
    'fake_deployment_date',
    'fake_created_date',
    'fake_updated_date',
    'fake_last_update',
    'fake_scheduled_date',
    'fake_start_date',
    'fake_end_date',
    'fake_target_date',
    'fake_next_update',
    'fake_last_review',
    'fake_next_review',
    'fake_url',
    'fake_staging_url',
    'fake_dev_url',
    'fake_version',
    'fake_id',
    'fake_demo_id',
    'fake_test_id',
    'fake_mock_id',
    'mock_variable',
    'mock_const',
    'mock_let',
    'mock_var',
    'simulation_comment_inline',
    'simulation_comment_block',
    'mock_comment_inline',
    'mock_comment_block',
    'demo_comment',
    'test_comment',
    'hardcoded_usestate_array',
    'hardcoded_usestate_object',
    'hardcoded_name',
    'hardcoded_title',
    'hardcoded_description',
    'math_random',
    'hardcoded_timeout',
    'hardcoded_interval',
    'hardcoded_score',
    'hardcoded_progress',
    'hardcoded_percentage',
    'hardcoded_value',
    'hardcoded_count',
    'hardcoded_total',
    'test_constant',
    'test_mission_id',
    'demo_prefix',
    'example_prefix'
  ];
  return types[patternIndex] || 'unknown';
}

/**
 * Trouve le num√©ro de ligne d'un pattern
 */
function getLineNumber(content, pattern) {
  const lines = content.substring(0, content.indexOf(pattern)).split('\n');
  return lines.length;
}

// === EX√âCUTION PRINCIPALE ===

console.log('\nüîç Scan r√©cursif de tous les fichiers...');

// R√©cup√©rer tous les fichiers
const allFiles = getAllFiles('./src');
const testFiles = getAllFiles('./scripts');
allFiles.push(...testFiles);

console.log(`üìÅ ${allFiles.length} fichiers trouv√©s`);

const allIssues = [];

// Analyser chaque fichier
allFiles.forEach(filePath => {
  const issues = analyzeFile(filePath);
  if (issues && issues.length > 0) {
    allIssues.push(...issues);
  }
});

console.log('\n' + '='.repeat(60));
console.log(`üìä R√âSUM√â DE L'ANALYSE EXHAUSTIVE:`);
console.log(`   ‚Ä¢ Fichiers scann√©s: ${totalFilesScanned}`);
console.log(`   ‚Ä¢ Probl√®mes d√©tect√©s: ${totalIssuesFound}`);

if (totalIssuesFound > 0) {
  console.log('\nüö® DONN√âES FICTIVES D√âTECT√âES DANS L\'APPLICATION !');
  console.log('\n‚ö†Ô∏è  ACTION CRITIQUE REQUISE:');
  console.log('   1. Remplacer TOUTES les donn√©es fictives par des donn√©es r√©elles');
  // console.log supprim√©;
  console.log('   3. Utiliser uniquement des services Firebase r√©els');
  console.log('   4. G√©n√©rer des donn√©es dynamiques bas√©es sur l\'√©tat r√©el');
  // console.log supprim√©;

  console.log('\n‚ùå STATUT: APPLICATION NON CONFORME ANSSI');
  console.log('üö® RISQUE DE DISQUALIFICATION √âLEV√â');
  process.exit(1);
} else {
  console.log('\n‚úÖ STATUT: AUCUNE DONN√âE FICTIVE D√âTECT√âE');
  console.log('üéâ L\'application utilise uniquement des donn√©es r√©elles !');
  console.log('‚úÖ CONFORME AUX EXIGENCES ANSSI');
  process.exit(0);
}
