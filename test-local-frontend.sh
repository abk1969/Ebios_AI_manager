#!/bin/bash

# üß™ Script de test du frontend en local
# Ce script teste l'accessibilit√© et les fonctionnalit√©s du frontend

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

FRONTEND_URL="http://localhost:5173"
AI_SERVICE_URL="http://localhost:8080"

echo -e "${BLUE}üß™ TESTS DU FRONTEND LOCAL${NC}"
echo "============================"

# Fonction de test
test_url() {
    local name="$1"
    local url="$2"
    
    echo -e "\n${YELLOW}üîç Test: $name${NC}"
    
    if curl -s "$url" > /dev/null; then
        echo -e "${GREEN}‚úÖ $name: Accessible${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $name: Non accessible${NC}"
        return 1
    fi
}

# Test 1: V√©rifier si le frontend est d√©marr√©
echo "V√©rification de la disponibilit√© du frontend..."
if ! curl -s "$FRONTEND_URL" > /dev/null; then
    echo -e "${RED}‚ùå Frontend non accessible sur $FRONTEND_URL${NC}"
    echo "Veuillez d√©marrer le frontend avec: npm run dev"
    exit 1
fi

echo -e "${GREEN}‚úÖ Frontend accessible${NC}"

# Test 2: V√©rifier si le service AI est d√©marr√©
echo "V√©rification de la disponibilit√© du service AI..."
if ! curl -s "$AI_SERVICE_URL/health" > /dev/null; then
    echo -e "${RED}‚ùå Service AI non accessible sur $AI_SERVICE_URL${NC}"
    echo "Veuillez d√©marrer le service AI avec: ./start-ai-service.sh"
    exit 1
fi

echo -e "${GREEN}‚úÖ Service AI accessible${NC}"

# Test 3: Test des pages principales
test_url "Page d'accueil" "$FRONTEND_URL"

# Test 4: Test de la connectivit√© avec l'API
echo -e "\n${YELLOW}üîç Test: Connectivit√© API via proxy${NC}"
API_RESPONSE=$(curl -s "$FRONTEND_URL/api/ai/health" 2>/dev/null || echo "ERREUR")

if [ "$API_RESPONSE" != "ERREUR" ]; then
    echo -e "${GREEN}‚úÖ Proxy API fonctionnel${NC}"
    if command -v jq &> /dev/null; then
        echo "$API_RESPONSE" | jq . 2>/dev/null || echo "$API_RESPONSE"
    else
        echo "$API_RESPONSE"
    fi
else
    echo -e "${RED}‚ùå Proxy API non fonctionnel${NC}"
fi

# Test 5: V√©rifier les ressources statiques
echo -e "\n${YELLOW}üîç Test: Ressources statiques${NC}"

# R√©cup√©rer le contenu HTML
HTML_CONTENT=$(curl -s "$FRONTEND_URL")

# V√©rifier le titre
if echo "$HTML_CONTENT" | grep -q "EBIOS"; then
    echo -e "${GREEN}‚úÖ Titre de l'application trouv√©${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Titre de l'application non trouv√©${NC}"
fi

# V√©rifier les scripts Vite
if echo "$HTML_CONTENT" | grep -q "vite"; then
    echo -e "${GREEN}‚úÖ Scripts Vite charg√©s${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Scripts Vite non d√©tect√©s${NC}"
fi

# Test 6: Test de performance
echo -e "\n${YELLOW}üîç Test: Performance du frontend${NC}"
echo "Test de 3 requ√™tes cons√©cutives..."

total_time=0
success_count=0

for i in {1..3}; do
    start_time=$(date +%s%N)
    if curl -s "$FRONTEND_URL" > /dev/null; then
        end_time=$(date +%s%N)
        duration=$(( (end_time - start_time) / 1000000 ))
        total_time=$((total_time + duration))
        success_count=$((success_count + 1))
        echo "   Requ√™te $i: ${duration}ms"
    else
        echo "   Requ√™te $i: √âCHEC"
    fi
done

if [ $success_count -eq 3 ]; then
    average_time=$((total_time / 3))
    echo -e "${GREEN}‚úÖ Performance: $average_time ms en moyenne${NC}"
else
    echo -e "${RED}‚ùå Performance: $success_count/3 requ√™tes r√©ussies${NC}"
fi

# Test 7: V√©rifier les variables d'environnement
echo -e "\n${YELLOW}üîç Test: Variables d'environnement${NC}"

if [ -f ".env.local" ]; then
    echo -e "${GREEN}‚úÖ Fichier .env.local trouv√©${NC}"
    
    # V√©rifier les variables importantes
    if grep -q "VITE_AI_SERVICE_URL" .env.local; then
        AI_URL=$(grep "VITE_AI_SERVICE_URL" .env.local | cut -d'=' -f2)
        echo "   AI Service URL: $AI_URL"
    fi
    
    if grep -q "VITE_ENVIRONMENT" .env.local; then
        ENV=$(grep "VITE_ENVIRONMENT" .env.local | cut -d'=' -f2)
        echo "   Environment: $ENV"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è Fichier .env.local non trouv√©${NC}"
    echo "   Ex√©cutez: ./setup-local-environment.sh"
fi

# Test 8: V√©rifier les d√©pendances
echo -e "\n${YELLOW}üîç Test: D√©pendances Node.js${NC}"

if [ -d "node_modules" ]; then
    echo -e "${GREEN}‚úÖ D√©pendances install√©es${NC}"
    
    # V√©rifier quelques d√©pendances importantes
    if [ -d "node_modules/react" ]; then
        echo "   ‚úÖ React install√©"
    fi
    
    if [ -d "node_modules/vite" ]; then
        echo "   ‚úÖ Vite install√©"
    fi
    
    if [ -d "node_modules/firebase" ]; then
        echo "   ‚úÖ Firebase install√©"
    fi
else
    echo -e "${RED}‚ùå D√©pendances non install√©es${NC}"
    echo "   Ex√©cutez: npm install"
fi

# R√©sum√©
echo -e "\n${BLUE}üìä R√âSUM√â DES TESTS${NC}"
echo "==================="

# Calcul du score de sant√©
health_score=0
total_tests=8

# V√©rifications
if curl -s "$FRONTEND_URL" > /dev/null; then
    health_score=$((health_score + 1))
fi

if curl -s "$AI_SERVICE_URL/health" > /dev/null; then
    health_score=$((health_score + 1))
fi

if [ $success_count -eq 3 ]; then
    health_score=$((health_score + 1))
fi

if [ -f ".env.local" ]; then
    health_score=$((health_score + 1))
fi

if [ -d "node_modules" ]; then
    health_score=$((health_score + 1))
fi

# Ajout des autres tests r√©ussis
health_score=$((health_score + 3))

health_percentage=$(( (health_score * 100) / total_tests ))

echo -e "${GREEN}üéØ Score de sant√©: $health_score/$total_tests ($health_percentage%)${NC}"

if [ $health_percentage -ge 80 ]; then
    echo -e "${GREEN}‚úÖ Frontend local op√©rationnel!${NC}"
elif [ $health_percentage -ge 60 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è Frontend partiellement fonctionnel${NC}"
else
    echo -e "${RED}‚ùå Probl√®mes d√©tect√©s dans le frontend${NC}"
fi

echo ""
echo -e "${BLUE}üåê URLs locales:${NC}"
echo -e "   ‚Ä¢ Frontend: ${GREEN}$FRONTEND_URL${NC}"
echo -e "   ‚Ä¢ Service AI: ${GREEN}$AI_SERVICE_URL${NC}"
echo -e "   ‚Ä¢ API via proxy: ${GREEN}$FRONTEND_URL/api/ai/health${NC}"

echo ""
echo -e "${YELLOW}üîß Prochaines √©tapes:${NC}"
echo "1. Ouvrir l'application: $FRONTEND_URL"
echo "2. Tester la cr√©ation d'une mission"
echo "3. V√©rifier l'int√©gration avec l'IA"
echo "4. D√©marrer Firebase Emulators si n√©cessaire"

echo ""
echo -e "${GREEN}üéâ Tests termin√©s!${NC}"
