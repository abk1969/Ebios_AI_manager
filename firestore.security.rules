rules_version = '2';

/**
 * 🔒 RÈGLES FIREBASE SÉCURISÉES POUR PRODUCTION
 * Conformité ANSSI - Contrôle d'accès granulaire, audit, intégrité
 */

service cloud.firestore {
  match /databases/{database}/documents {

    // 🔧 FONCTIONS UTILITAIRES DE SÉCURITÉ
    
    // Vérification de l'authentification
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Vérification de l'email vérifié
    function isEmailVerified() {
      return request.auth != null && request.auth.token.email_verified == true;
    }
    
    // Vérification du rôle utilisateur
    function hasRole(role) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    // Vérification des permissions multiples rôles
    function hasAnyRole(roles) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in roles;
    }
    
    // Vérification de l'appartenance à une mission
    function isMissionMember(missionId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/missions/$(missionId)) &&
             (get(/databases/$(database)/documents/missions/$(missionId)).data.assignedTo is list &&
              request.auth.uid in get(/databases/$(database)/documents/missions/$(missionId)).data.assignedTo ||
              get(/databases/$(database)/documents/missions/$(missionId)).data.createdBy == request.auth.uid);
    }
    
    // Vérification du propriétaire de ressource
    function isOwner(resource) {
      return resource.data.createdBy == request.auth.uid;
    }
    
    // Vérification de l'assignation
    function isAssigned(resource) {
      return resource.data.assignedTo is list && 
             request.auth.uid in resource.data.assignedTo;
    }
    
    // Vérification de l'intégrité des données
    function isValidUpdate() {
      return request.resource.data.updatedAt is timestamp &&
             request.resource.data.updatedBy == request.auth.uid;
    }
    
    // Vérification de la session MFA
    function isMFAVerified() {
      return request.auth != null && 
             request.auth.token.mfa_verified == true;
    }
    
    // Vérification des heures d'accès (9h-18h)
    function isBusinessHours() {
      let hour = request.time.toMillis() / 1000 / 3600 % 24;
      return hour >= 9 && hour <= 18;
    }

    // 👤 GESTION DES UTILISATEURS
    match /users/{userId} {
      // Lecture : utilisateur lui-même ou admins
      allow read: if isAuthenticated() && 
                     (request.auth.uid == userId || hasAnyRole(['admin', 'superadmin']));
      
      // Création : seulement les admins
      allow create: if hasAnyRole(['admin', 'superadmin']) && 
                       isEmailVerified() &&
                       isMFAVerified() &&
                       request.resource.data.keys().hasAll(['email', 'role', 'createdAt', 'createdBy']) &&
                       request.resource.data.createdBy == request.auth.uid;
      
      // Modification : utilisateur lui-même (données limitées) ou admins
      allow update: if isAuthenticated() && 
                       isValidUpdate() &&
                       ((request.auth.uid == userId && 
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'company', 'firstName', 'lastName', 'updatedAt', 'updatedBy'])) ||
                        (hasAnyRole(['admin', 'superadmin']) && isMFAVerified()));
      
      // Suppression : seulement superadmin avec MFA
      allow delete: if hasRole('superadmin') && isMFAVerified();
    }

    // 📋 MISSIONS EBIOS RM
    match /missions/{missionId} {
      // Lecture : membres de la mission, analystes, auditeurs, admins
      allow read: if isAuthenticated() && 
                     (isMissionMember(missionId) || 
                      hasAnyRole(['analyst', 'auditor', 'admin', 'superadmin']));
      
      // Création : analystes et admins uniquement
      allow create: if hasAnyRole(['analyst', 'admin', 'superadmin']) && 
                       isEmailVerified() &&
                       request.resource.data.keys().hasAll(['name', 'description', 'status', 'createdAt', 'createdBy', 'assignedTo']) &&
                       request.resource.data.createdBy == request.auth.uid &&
                       request.auth.uid in request.resource.data.assignedTo;
      
      // Modification : membres de la mission avec restrictions
      allow update: if isAuthenticated() && 
                       isValidUpdate() &&
                       (isMissionMember(missionId) || hasAnyRole(['admin', 'superadmin'])) &&
                       // Empêcher la modification des champs critiques sans admin
                       (hasAnyRole(['admin', 'superadmin']) || 
                        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['assignedTo', 'status', 'ebiosCompliance']));
      
      // Suppression : seulement créateur ou admin avec MFA
      allow delete: if isAuthenticated() && 
                       isMFAVerified() &&
                       (isOwner(resource) || hasAnyRole(['admin', 'superadmin']));

      // 🛠️ SOUS-COLLECTIONS DES MISSIONS
      
      // Ateliers (workshops)
      match /workshops/{workshopId} {
        allow read: if isMissionMember(missionId) || hasAnyRole(['auditor', 'admin', 'superadmin']);
        allow write: if isMissionMember(missionId) && isValidUpdate();
      }
      
      // Biens essentiels
      match /businessValues/{valueId} {
        allow read: if isMissionMember(missionId) || hasAnyRole(['auditor', 'admin', 'superadmin']);
        allow write: if isMissionMember(missionId) && isValidUpdate();
      }
      
      // Biens supports
      match /supportingAssets/{assetId} {
        allow read: if isMissionMember(missionId) || hasAnyRole(['auditor', 'admin', 'superadmin']);
        allow write: if isMissionMember(missionId) && isValidUpdate();
      }
      
      // Événements redoutés
      match /dreadedEvents/{eventId} {
        allow read: if isMissionMember(missionId) || hasAnyRole(['auditor', 'admin', 'superadmin']);
        allow write: if isMissionMember(missionId) && isValidUpdate();
      }
      
      // Scénarios stratégiques
      match /strategicScenarios/{scenarioId} {
        allow read: if isMissionMember(missionId) || hasAnyRole(['auditor', 'admin', 'superadmin']);
        allow write: if isMissionMember(missionId) && isValidUpdate();
      }
      
      // Scénarios opérationnels
      match /operationalScenarios/{scenarioId} {
        allow read: if isMissionMember(missionId) || hasAnyRole(['auditor', 'admin', 'superadmin']);
        allow write: if isMissionMember(missionId) && isValidUpdate();
      }
      
      // Mesures de sécurité
      match /securityMeasures/{measureId} {
        allow read: if isMissionMember(missionId) || hasAnyRole(['auditor', 'admin', 'superadmin']);
        allow write: if isMissionMember(missionId) && isValidUpdate();
      }
    }

    // 📊 RAPPORTS
    match /reports/{reportId} {
      // Lecture : selon la visibilité du rapport
      allow read: if isAuthenticated() && 
                     (resource.data.visibility == 'public' ||
                      isOwner(resource) ||
                      (resource.data.missionId != null && isMissionMember(resource.data.missionId)) ||
                      hasAnyRole(['auditor', 'admin', 'superadmin']));
      
      // Création : analystes et admins
      allow create: if hasAnyRole(['analyst', 'admin', 'superadmin']) && 
                       isEmailVerified() &&
                       request.resource.data.createdBy == request.auth.uid;
      
      // Modification : propriétaire ou admin
      allow update: if isAuthenticated() && 
                       isValidUpdate() &&
                       (isOwner(resource) || hasAnyRole(['admin', 'superadmin']));
      
      // Suppression : propriétaire ou admin avec MFA
      allow delete: if isAuthenticated() && 
                       isMFAVerified() &&
                       (isOwner(resource) || hasAnyRole(['admin', 'superadmin']));
    }

    // 🔐 DONNÉES DE SÉCURITÉ (accès très restreint)
    
    // Sessions utilisateur
    match /sessions/{sessionId} {
      allow read, write: if isAuthenticated() && 
                            resource.data.userId == request.auth.uid;
    }
    
    // Configuration MFA
    match /mfa_setup/{userId} {
      allow read, write: if isAuthenticated() && 
                            request.auth.uid == userId;
    }
    
    // Clés de chiffrement (lecture seule pour le système)
    match /encryption_keys/{keyId} {
      allow read: if hasRole('superadmin') && isMFAVerified();
      allow write: if false; // Géré uniquement par les fonctions Cloud
    }

    // 📋 AUDIT ET CONFORMITÉ (lecture seule pour la plupart)
    
    // Logs d'audit
    match /audit_logs/{logId} {
      allow read: if hasAnyRole(['auditor', 'admin', 'superadmin']) && isMFAVerified();
      allow write: if false; // Géré uniquement par le système
    }
    
    // Métriques de sécurité
    match /security_metrics/{metricId} {
      allow read: if hasAnyRole(['auditor', 'admin', 'superadmin']);
      allow write: if false; // Géré uniquement par le système
    }
    
    // Alertes de sécurité
    match /security_alerts/{alertId} {
      allow read: if hasAnyRole(['auditor', 'admin', 'superadmin']);
      allow update: if hasAnyRole(['auditor', 'admin', 'superadmin']) && 
                       isValidUpdate() &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'acknowledgedBy', 'acknowledgedAt', 'resolvedBy', 'resolvedAt', 'updatedAt', 'updatedBy']);
      allow create, delete: if false; // Géré uniquement par le système
    }
    
    // Incidents de sécurité
    match /security_incidents/{incidentId} {
      allow read: if hasAnyRole(['auditor', 'admin', 'superadmin']) && isMFAVerified();
      allow update: if hasAnyRole(['admin', 'superadmin']) && 
                       isMFAVerified() &&
                       isValidUpdate();
      allow create, delete: if false; // Géré uniquement par le système
    }
    
    // Anomalies de sécurité
    match /security_anomalies/{anomalyId} {
      allow read: if hasAnyRole(['auditor', 'admin', 'superadmin']);
      allow write: if false; // Géré uniquement par le système
    }
    
    // Rapports de conformité
    match /compliance_reports/{reportId} {
      allow read: if hasAnyRole(['auditor', 'admin', 'superadmin']);
      allow write: if false; // Géré uniquement par le système
    }
    
    // Évaluations de conformité
    match /compliance_assessments/{assessmentId} {
      allow read: if hasAnyRole(['auditor', 'admin', 'superadmin']);
      allow write: if false; // Géré uniquement par le système
    }

    // 🚫 RÈGLES PAR DÉFAUT (DENY ALL)
    // Toute ressource non explicitement autorisée est interdite
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// 🔒 RÈGLES POUR FIREBASE STORAGE
service firebase.storage {
  match /b/{bucket}/o {
    // Documents de mission
    match /missions/{missionId}/{allPaths=**} {
      allow read: if request.auth != null && 
                     (isMissionMember(missionId) || hasAnyRole(['auditor', 'admin', 'superadmin']));
      allow write: if request.auth != null && 
                      isMissionMember(missionId) &&
                      request.resource.size < 10 * 1024 * 1024 && // 10MB max
                      request.resource.contentType.matches('application/pdf|image/.*|text/.*');
    }
    
    // Rapports
    match /reports/{reportId}/{allPaths=**} {
      allow read: if request.auth != null && 
                     (isOwner(resource) || hasAnyRole(['auditor', 'admin', 'superadmin']));
      allow write: if request.auth != null && 
                      hasAnyRole(['analyst', 'admin', 'superadmin']) &&
                      request.resource.size < 50 * 1024 * 1024; // 50MB max
    }
    
    // Avatars utilisateur
    match /users/{userId}/avatar {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                      request.auth.uid == userId &&
                      request.resource.size < 2 * 1024 * 1024 && // 2MB max
                      request.resource.contentType.matches('image/.*');
    }
    
    // Deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
