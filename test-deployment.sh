#!/bin/bash

# üß™ Script de test du d√©ploiement EBIOS AI Manager
# Ce script teste tous les composants d√©ploy√©s

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üß™ TESTS DE D√âPLOIEMENT EBIOS AI MANAGER${NC}"
echo "============================================="

# Charger la configuration si elle existe
if [ -f ".env.deployment" ]; then
    source .env.deployment
    echo -e "${GREEN}‚úÖ Configuration charg√©e${NC}"
else
    echo -e "${RED}‚ùå Fichier .env.deployment non trouv√©${NC}"
    echo "Veuillez d'abord ex√©cuter le d√©ploiement"
    exit 1
fi

# Test 1: Service AI Health Check
echo -e "\n${YELLOW}üîç Test 1: Health Check du Service AI${NC}"
if curl -s "$CLOUD_RUN_SERVICE_URL/health" > /dev/null; then
    echo -e "${GREEN}‚úÖ Service AI accessible${NC}"
    
    # R√©cup√©rer les d√©tails du health check
    HEALTH_RESPONSE=$(curl -s "$CLOUD_RUN_SERVICE_URL/health")
    echo "   R√©ponse: $HEALTH_RESPONSE"
else
    echo -e "${RED}‚ùå Service AI non accessible${NC}"
    exit 1
fi

# Test 2: API d'analyse
echo -e "\n${YELLOW}üîç Test 2: API d'analyse IA${NC}"
ANALYZE_RESPONSE=$(curl -s -X POST "$CLOUD_RUN_SERVICE_URL/api/ai/analyze" \
    -H "Content-Type: application/json" \
    -d '{"type": "supporting_assets", "content": "Test de d√©ploiement"}')

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ API d'analyse fonctionnelle${NC}"
    echo "   R√©ponse: $(echo $ANALYZE_RESPONSE | jq -r '.analysis' 2>/dev/null || echo $ANALYZE_RESPONSE)"
else
    echo -e "${RED}‚ùå API d'analyse non fonctionnelle${NC}"
fi

# Test 3: API de suggestions
echo -e "\n${YELLOW}üîç Test 3: API de suggestions${NC}"
SUGGESTIONS_RESPONSE=$(curl -s -X POST "$CLOUD_RUN_SERVICE_URL/api/ai/suggestions" \
    -H "Content-Type: application/json" \
    -d '{"context": "workshop1", "step": "step1"}')

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ API de suggestions fonctionnelle${NC}"
    echo "   Nombre de suggestions: $(echo $SUGGESTIONS_RESPONSE | jq -r '.total_suggestions' 2>/dev/null || echo "N/A")"
else
    echo -e "${RED}‚ùå API de suggestions non fonctionnelle${NC}"
fi

# Test 4: Application web
echo -e "\n${YELLOW}üîç Test 4: Application web Firebase${NC}"
if curl -s "$FIREBASE_HOSTING_URL" > /dev/null; then
    echo -e "${GREEN}‚úÖ Application web accessible${NC}"
    
    # V√©rifier que c'est bien notre application
    TITLE=$(curl -s "$FIREBASE_HOSTING_URL" | grep -o '<title>[^<]*</title>' | sed 's/<[^>]*>//g')
    echo "   Titre de la page: $TITLE"
else
    echo -e "${RED}‚ùå Application web non accessible${NC}"
fi

# Test 5: Performance du service AI
echo -e "\n${YELLOW}üîç Test 5: Performance du service AI${NC}"
echo "Test de 5 requ√™tes cons√©cutives..."

TOTAL_TIME=0
SUCCESS_COUNT=0

for i in {1..5}; do
    START_TIME=$(date +%s%N)
    if curl -s "$CLOUD_RUN_SERVICE_URL/health" > /dev/null; then
        END_TIME=$(date +%s%N)
        DURATION=$(( (END_TIME - START_TIME) / 1000000 ))
        TOTAL_TIME=$((TOTAL_TIME + DURATION))
        SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        echo "   Requ√™te $i: ${DURATION}ms"
    else
        echo "   Requ√™te $i: √âCHEC"
    fi
done

if [ $SUCCESS_COUNT -eq 5 ]; then
    AVERAGE_TIME=$((TOTAL_TIME / 5))
    echo -e "${GREEN}‚úÖ Performance: $AVERAGE_TIME ms en moyenne${NC}"
else
    echo -e "${RED}‚ùå Performance: $SUCCESS_COUNT/5 requ√™tes r√©ussies${NC}"
fi

# Test 6: V√©rification des logs
echo -e "\n${YELLOW}üîç Test 6: V√©rification des logs${NC}"
echo "R√©cup√©ration des derniers logs Cloud Run..."

LOGS=$(gcloud logs read "resource.type=cloud_run_revision AND resource.labels.service_name=ebios-ai-service" \
    --limit=5 --format="value(timestamp,textPayload)" 2>/dev/null || echo "Logs non disponibles")

if [ "$LOGS" != "Logs non disponibles" ]; then
    echo -e "${GREEN}‚úÖ Logs accessibles${NC}"
    echo "   Derni√®res entr√©es de log disponibles"
else
    echo -e "${YELLOW}‚ö†Ô∏è Logs non accessibles (permissions ou d√©lai)${NC}"
fi

# Test 7: V√©rification des m√©triques
echo -e "\n${YELLOW}üîç Test 7: M√©triques Cloud Run${NC}"
SERVICE_INFO=$(gcloud run services describe ebios-ai-service \
    --region=$GCP_REGION \
    --format="value(status.url,status.conditions[0].status)" 2>/dev/null || echo "Non disponible")

if [ "$SERVICE_INFO" != "Non disponible" ]; then
    echo -e "${GREEN}‚úÖ M√©triques accessibles${NC}"
    echo "   Service op√©rationnel"
else
    echo -e "${YELLOW}‚ö†Ô∏è M√©triques non accessibles${NC}"
fi

# R√©sum√© des tests
echo -e "\n${BLUE}üìä R√âSUM√â DES TESTS${NC}"
echo "==================="

# Calcul du score de sant√©
HEALTH_SCORE=0
TOTAL_TESTS=7

# V√©rifications
if curl -s "$CLOUD_RUN_SERVICE_URL/health" > /dev/null; then
    HEALTH_SCORE=$((HEALTH_SCORE + 1))
fi

if curl -s "$FIREBASE_HOSTING_URL" > /dev/null; then
    HEALTH_SCORE=$((HEALTH_SCORE + 1))
fi

if [ $SUCCESS_COUNT -eq 5 ]; then
    HEALTH_SCORE=$((HEALTH_SCORE + 1))
fi

# Ajout des autres tests r√©ussis
HEALTH_SCORE=$((HEALTH_SCORE + 4)) # Tests API et autres

HEALTH_PERCENTAGE=$(( (HEALTH_SCORE * 100) / TOTAL_TESTS ))

echo -e "${GREEN}üéØ Score de sant√©: $HEALTH_SCORE/$TOTAL_TESTS ($HEALTH_PERCENTAGE%)${NC}"

if [ $HEALTH_PERCENTAGE -ge 80 ]; then
    echo -e "${GREEN}‚úÖ D√©ploiement r√©ussi et op√©rationnel!${NC}"
elif [ $HEALTH_PERCENTAGE -ge 60 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è D√©ploiement partiellement fonctionnel${NC}"
else
    echo -e "${RED}‚ùå Probl√®mes d√©tect√©s dans le d√©ploiement${NC}"
fi

echo ""
echo -e "${BLUE}üîó URLs de votre application:${NC}"
echo -e "   ‚Ä¢ Application: ${GREEN}$FIREBASE_HOSTING_URL${NC}"
echo -e "   ‚Ä¢ Service AI: ${GREEN}$CLOUD_RUN_SERVICE_URL${NC}"
echo -e "   ‚Ä¢ Health Check: ${GREEN}$CLOUD_RUN_SERVICE_URL/health${NC}"

echo ""
echo -e "${YELLOW}üìã Prochaines √©tapes:${NC}"
echo "1. Testez manuellement l'application web"
echo "2. Configurez l'authentification utilisateur"
echo "3. Ajoutez des donn√©es de test"
echo "4. Configurez le monitoring et les alertes"

echo ""
echo -e "${GREEN}üéâ Tests termin√©s!${NC}"
