#!/usr/bin/env python3
"""
üß™ TEST ORCHESTRATION AVANC√âE
Test de l'orchestrateur Workshop 1 avec m√©moire persistante
"""

import asyncio
import json
import sys
from datetime import datetime

def test_orchestrator_import():
    """Test d'import de l'orchestrateur"""
    print("üß™ TEST IMPORT ORCHESTRATEUR")
    print("-" * 40)
    
    try:
        from services.workshop1_orchestrator import Workshop1OrchestratorFactory, WorkshopAnalysisResult
        print("‚úÖ Import Workshop1OrchestratorFactory: OK")
        
        from services.agent_memory_service import AgentMemoryServiceFactory, AgentMemoryEntry
        print("‚úÖ Import AgentMemoryServiceFactory: OK")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur import: {e}")
        return False

def test_orchestrator_creation():
    """Test de cr√©ation de l'orchestrateur"""
    print("\nüèóÔ∏è TEST CR√âATION ORCHESTRATEUR")
    print("-" * 40)
    
    try:
        from services.workshop1_orchestrator import Workshop1OrchestratorFactory
        
        orchestrator = Workshop1OrchestratorFactory.create()
        print("‚úÖ Orchestrateur cr√©√© avec succ√®s")
        
        # Test des capacit√©s
        capabilities = orchestrator.get_capabilities()
        print(f"‚úÖ Capacit√©s disponibles: {capabilities}")
        
        # Test de l'√©tat
        is_ready = orchestrator.is_ready()
        print(f"‚úÖ √âtat pr√™t: {is_ready}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation: {e}")
        return False

def test_memory_service():
    """Test du service de m√©moire"""
    print("\nüß† TEST SERVICE M√âMOIRE")
    print("-" * 30)
    
    try:
        from services.agent_memory_service import AgentMemoryServiceFactory
        
        memory_service = AgentMemoryServiceFactory.create()
        print("‚úÖ Service m√©moire cr√©√© avec succ√®s")
        
        # Test du statut
        status = memory_service.get_status()
        print(f"‚úÖ Statut service: {status}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur service m√©moire: {e}")
        return False

async def test_orchestration_workflow():
    """Test du workflow d'orchestration complet"""
    print("\nüéº TEST WORKFLOW ORCHESTRATION")
    print("-" * 40)
    
    try:
        from services.workshop1_orchestrator import Workshop1OrchestratorFactory
        from services.agent_memory_service import AgentMemoryServiceFactory
        
        # Cr√©er les services
        orchestrator = Workshop1OrchestratorFactory.create()
        memory_service = AgentMemoryServiceFactory.create()
        
        print("‚úÖ Services cr√©√©s")
        
        # Donn√©es de test
        mission_id = "test_mission_orchestration"
        workshop_data = {
            "business_values": [
                {
                    "id": "bv1",
                    "name": "Facturation clients",
                    "description": "Processus de facturation et encaissement"
                }
            ],
            "essential_assets": [
                {
                    "id": "ea1", 
                    "name": "Base donn√©es clients",
                    "description": "Syst√®me de gestion des donn√©es clients",
                    "businessValueId": "bv1"
                }
            ],
            "supporting_assets": [],
            "dreaded_events": [],
            "current_step": "essential-assets"
        }
        
        print("‚úÖ Donn√©es de test pr√©par√©es")
        
        # Test de stockage m√©moire
        memory_id = await memory_service.store_memory(
            mission_id=mission_id,
            agent_id="workshop1_agent",
            session_id="test_session",
            memory_type="context",
            content={"test": "orchestration_workflow"},
            priority=2
        )
        
        print(f"‚úÖ M√©moire stock√©e: {memory_id}")
        
        # Test d'orchestration
        result = await orchestrator.orchestrate_workshop_analysis(
            mission_id=mission_id,
            workshop_data=workshop_data,
            user_context={"test_mode": True}
        )
        
        print(f"‚úÖ Orchestration r√©ussie")
        print(f"   Mission: {result.mission_id}")
        print(f"   Compl√©tion: {result.completion_percentage}%")
        print(f"   Score qualit√©: {result.quality_score}")
        print(f"   Suggestions: {len(result.suggestions)}")
        
        # Test de r√©cup√©ration m√©moire
        memories = await memory_service.retrieve_memory(
            mission_id=mission_id,
            agent_id="workshop1_agent"
        )
        
        print(f"‚úÖ M√©moires r√©cup√©r√©es: {len(memories)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur workflow: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_integration_with_main():
    """Test d'int√©gration avec le service principal"""
    print("\nüîó TEST INT√âGRATION SERVICE PRINCIPAL")
    print("-" * 45)
    
    try:
        from main import app, ADVANCED_SERVICES_AVAILABLE
        
        print(f"‚úÖ Service principal import√©")
        print(f"‚úÖ Services avanc√©s disponibles: {ADVANCED_SERVICES_AVAILABLE}")
        
        # Test des endpoints
        print("‚úÖ Endpoints disponibles:")
        for route in app.routes:
            if hasattr(route, 'path'):
                print(f"   {route.methods} {route.path}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur int√©gration: {e}")
        return False

async def run_all_tests():
    """Ex√©cute tous les tests"""
    print("üß™ TESTS ORCHESTRATION AVANC√âE WORKSHOP 1")
    print("=" * 60)
    
    tests = [
        ("Import orchestrateur", test_orchestrator_import),
        ("Cr√©ation orchestrateur", test_orchestrator_creation),
        ("Service m√©moire", test_memory_service),
        ("Workflow orchestration", test_orchestration_workflow),
        ("Int√©gration service principal", test_integration_with_main)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüîç Test: {test_name}")
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            
            if result:
                print(f"‚úÖ {test_name}: R√âUSSI")
                passed += 1
            else:
                print(f"‚ùå {test_name}: √âCHOU√â")
                
        except Exception as e:
            print(f"‚ùå {test_name}: ERREUR - {e}")
    
    # Rapport final
    print("\n" + "=" * 60)
    print("üìä RAPPORT FINAL TESTS ORCHESTRATION")
    print("=" * 60)
    
    print(f"‚úÖ Tests r√©ussis: {passed}/{total}")
    print(f"‚ùå Tests √©chou√©s: {total - passed}/{total}")
    
    if passed == total:
        print("\nüéâ TOUS LES TESTS R√âUSSIS!")
        print("‚úÖ L'orchestration avanc√©e fonctionne parfaitement")
        print("üß† La m√©moire persistante est op√©rationnelle")
        print("üéº Le workflow d'orchestration est fonctionnel")
        print("üîó L'int√©gration avec le service principal est r√©ussie")
        print("\nüöÄ PR√äT POUR L'INT√âGRATION FRONTEND!")
    else:
        print("\n‚ö†Ô∏è CERTAINS TESTS ONT √âCHOU√â")
        print("üîß V√©rifiez les erreurs ci-dessus")
    
    return passed == total

if __name__ == "__main__":
    success = asyncio.run(run_all_tests())
    sys.exit(0 if success else 1)
