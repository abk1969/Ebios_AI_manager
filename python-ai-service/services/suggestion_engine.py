"""
üí° SUGGESTION ENGINE
Moteur de suggestions intelligentes pour Workshop 1 EBIOS RM
"""

import logging
import asyncio
from datetime import datetime
from typing import List, Dict, Any, Optional
import random
import json

from models.ebios_models import (
    WorkshopContext,
    AISuggestion,
    SuggestionType,
    SuggestionPriority,
    CriticalityLevel
)

logger = logging.getLogger(__name__)

class SuggestionEngine:
    """Moteur de suggestions contextuelles pour Workshop 1"""
    
    def __init__(self):
        self.suggestion_count = 0
        self.suggestion_templates = self._load_suggestion_templates()
        self.ebios_examples = self._load_ebios_examples()
    
    def is_ready(self) -> bool:
        """V√©rifie si le moteur est pr√™t"""
        return True
    
    def get_suggestion_count(self) -> int:
        """Retourne le nombre de suggestions g√©n√©r√©es"""
        return self.suggestion_count
    
    def _load_suggestion_templates(self) -> Dict[str, List[Dict]]:
        """Charge les templates de suggestions"""
        return {
            "business_values": [
                {
                    "type": "action",
                    "priority": "high",
                    "title": "üéØ Identifier vos processus critiques",
                    "description": "Commencez par lister les processus m√©tier essentiels √† votre activit√©",
                    "rationale": "Les processus critiques sont souvent les premi√®res valeurs m√©tier √† prot√©ger",
                    "examples": ["Facturation client", "Production", "Support client", "R&D"]
                },
                {
                    "type": "tip",
                    "priority": "medium",
                    "title": "üí° Pensez aux aspects r√©glementaires",
                    "description": "Incluez les exigences de conformit√© comme valeurs m√©tier",
                    "rationale": "La non-conformit√© peut avoir des impacts majeurs",
                    "examples": ["RGPD", "SOX", "ISO 27001", "Secteur bancaire"]
                },
                {
                    "type": "insight",
                    "priority": "medium",
                    "title": "üîç Consid√©rez votre r√©putation",
                    "description": "La r√©putation est souvent une valeur m√©tier sous-estim√©e",
                    "rationale": "Les atteintes √† la r√©putation peuvent avoir des impacts durables",
                    "examples": ["Image de marque", "Confiance client", "Relations partenaires"]
                }
            ],
            "essential_assets": [
                {
                    "type": "action",
                    "priority": "high",
                    "title": "üèóÔ∏è Cartographier vos informations critiques",
                    "description": "Identifiez les donn√©es et informations indispensables √† vos valeurs m√©tier",
                    "rationale": "Les informations sont souvent les biens essentiels les plus critiques",
                    "examples": ["Donn√©es clients", "Propri√©t√© intellectuelle", "Donn√©es financi√®res"]
                },
                {
                    "type": "tip",
                    "priority": "medium",
                    "title": "üí° N'oubliez pas les processus",
                    "description": "Les processus m√©tier sont aussi des biens essentiels",
                    "rationale": "Un processus d√©faillant peut compromettre une valeur m√©tier",
                    "examples": ["Processus de validation", "Workflow d'approbation", "Proc√©dures qualit√©"]
                },
                {
                    "type": "insight",
                    "priority": "low",
                    "title": "üß† Incluez le savoir-faire",
                    "description": "Le savoir-faire et l'expertise sont des biens essentiels immat√©riels",
                    "rationale": "La perte de comp√©tences cl√©s peut √™tre critique",
                    "examples": ["Expertise technique", "Savoir-faire commercial", "Connaissances m√©tier"]
                }
            ],
            "supporting_assets": [
                {
                    "type": "action",
                    "priority": "high",
                    "title": "üîß Inventorier vos syst√®mes techniques",
                    "description": "Listez les serveurs, applications et √©quipements qui supportent vos biens essentiels",
                    "rationale": "Les syst√®mes techniques sont la base de la plupart des biens essentiels",
                    "examples": ["Serveurs", "Applications", "Bases de donn√©es", "R√©seaux"]
                },
                {
                    "type": "tip",
                    "priority": "medium",
                    "title": "üë• Pensez aux ressources humaines",
                    "description": "Les √©quipes et comp√©tences sont des biens supports cruciaux",
                    "rationale": "Sans les bonnes personnes, les syst√®mes ne fonctionnent pas",
                    "examples": ["√âquipe IT", "Administrateurs", "Experts m√©tier", "Support"]
                },
                {
                    "type": "insight",
                    "priority": "medium",
                    "title": "üè¢ Incluez l'environnement physique",
                    "description": "Locaux, alimentation √©lectrique et climatisation sont des supports essentiels",
                    "rationale": "L'environnement physique conditionne le fonctionnement des syst√®mes",
                    "examples": ["Datacenter", "Bureaux", "Alimentation", "Climatisation"]
                }
            ],
            "dreaded_events": [
                {
                    "type": "action",
                    "priority": "high",
                    "title": "üö® Identifier les sc√©narios de perte",
                    "description": "D√©finissez ce que vous craignez qu'il arrive √† vos valeurs m√©tier",
                    "rationale": "Les √©v√©nements redout√©s guident l'analyse des risques",
                    "examples": ["Vol de donn√©es", "Indisponibilit√©", "Corruption", "Divulgation"]
                },
                {
                    "type": "warning",
                    "priority": "high",
                    "title": "‚ö†Ô∏è Consid√©rez tous les types d'impact",
                    "description": "Pensez √† la disponibilit√©, int√©grit√©, confidentialit√© et tra√ßabilit√©",
                    "rationale": "Chaque type d'impact peut g√©n√©rer des √©v√©nements redout√©s diff√©rents",
                    "examples": ["Panne syst√®me", "Modification malveillante", "Espionnage", "Perte de logs"]
                },
                {
                    "type": "tip",
                    "priority": "medium",
                    "title": "üí° Quantifiez les impacts",
                    "description": "Estimez les cons√©quences financi√®res et op√©rationnelles",
                    "rationale": "La quantification aide √† prioriser les risques",
                    "examples": ["Perte de CA", "Co√ªts de rem√©diation", "Sanctions", "Perte de clients"]
                }
            ]
        }
    
    def _load_ebios_examples(self) -> Dict[str, List[str]]:
        """Charge les exemples EBIOS RM par secteur"""
        return {
            "finance": {
                "business_values": ["Transactions financi√®res", "Conformit√© bancaire", "Confiance client"],
                "essential_assets": ["Donn√©es de transaction", "Processus de validation", "Historique client"],
                "supporting_assets": ["Core banking", "HSM", "√âquipes conformit√©"],
                "dreaded_events": ["Fraude financi√®re", "Blanchiment", "Fuite de donn√©es"]
            },
            "healthcare": {
                "business_values": ["Soins aux patients", "Confidentialit√© m√©dicale", "Continuit√© de service"],
                "essential_assets": ["Dossiers m√©dicaux", "Protocoles de soins", "Expertise m√©dicale"],
                "supporting_assets": ["SIH", "√âquipements m√©dicaux", "Personnel soignant"],
                "dreaded_events": ["Fuite de donn√©es m√©dicales", "Indisponibilit√© du SIH", "Erreur de diagnostic"]
            },
            "industry": {
                "business_values": ["Production industrielle", "Qualit√© produits", "S√©curit√© des travailleurs"],
                "essential_assets": ["Recettes de fabrication", "Processus qualit√©", "Savoir-faire technique"],
                "supporting_assets": ["Automates", "SCADA", "√âquipes techniques"],
                "dreaded_events": ["Arr√™t de production", "D√©faut qualit√©", "Accident industriel"]
            },
            "retail": {
                "business_values": ["Exp√©rience client", "Gestion des stocks", "R√©putation marque"],
                "essential_assets": ["Base clients", "Catalogue produits", "Processus logistique"],
                "supporting_assets": ["Site e-commerce", "ERP", "√âquipes vente"],
                "dreaded_events": ["Indisponibilit√© site", "Rupture de stock", "Avis n√©gatifs"]
            }
        }
    
    async def generate_contextual_suggestions(
        self,
        context: WorkshopContext,
        criterion: str,
        current_data: Dict[str, Any],
        max_suggestions: int = 5
    ) -> List[AISuggestion]:
        """
        G√©n√®re des suggestions contextuelles intelligentes
        """
        self.suggestion_count += 1
        logger.info(f"üí° G√©n√©ration suggestions pour crit√®re: {criterion}")
        
        suggestions = []
        
        # Suggestions bas√©es sur le crit√®re
        if criterion in self.suggestion_templates:
            templates = self.suggestion_templates[criterion]
            
            for template in templates[:max_suggestions]:
                suggestion = await self._create_suggestion_from_template(
                    template, context, current_data
                )
                suggestions.append(suggestion)
        
        # Suggestions contextuelles bas√©es sur les donn√©es existantes
        contextual_suggestions = await self._generate_contextual_suggestions(
            context, criterion, current_data
        )
        suggestions.extend(contextual_suggestions)
        
        # Suggestions d'am√©lioration
        improvement_suggestions = await self._generate_improvement_suggestions(
            context, criterion, current_data
        )
        suggestions.extend(improvement_suggestions)
        
        # Trier par priorit√© et limiter
        suggestions.sort(key=lambda s: self._priority_score(s.priority), reverse=True)
        return suggestions[:max_suggestions]
    
    async def _create_suggestion_from_template(
        self,
        template: Dict[str, Any],
        context: WorkshopContext,
        current_data: Dict[str, Any]
    ) -> AISuggestion:
        """Cr√©e une suggestion √† partir d'un template"""
        
        suggestion_id = f"{template['type']}_{context.mission_id}_{datetime.now().timestamp()}"
        
        # Adaptation du contenu selon le contexte
        adapted_description = template["description"]
        adapted_examples = template.get("examples", [])
        
        # D√©tection du secteur pour adapter les exemples
        sector = self._detect_sector(context)
        if sector and sector in self.ebios_examples:
            sector_examples = self.ebios_examples[sector]
            criterion_key = template.get("criterion", "business_values")
            if criterion_key in sector_examples:
                adapted_examples = sector_examples[criterion_key][:3]
        
        return AISuggestion(
            id=suggestion_id,
            type=SuggestionType(template["type"]),
            priority=SuggestionPriority(template["priority"]),
            title=template["title"],
            description=adapted_description,
            rationale=template["rationale"],
            action_label=template.get("action_label", "Appliquer"),
            confidence=template.get("confidence", 0.8),
            context={
                "examples": adapted_examples,
                "sector": sector,
                "current_count": len(current_data.get("items", [])),
                "template_id": template.get("id", "unknown")
            }
        )
    
    async def _generate_contextual_suggestions(
        self,
        context: WorkshopContext,
        criterion: str,
        current_data: Dict[str, Any]
    ) -> List[AISuggestion]:
        """G√©n√®re des suggestions bas√©es sur le contexte actuel"""
        
        suggestions = []
        current_items = current_data.get("items", [])
        
        # Suggestion si aucun √©l√©ment
        if len(current_items) == 0:
            suggestions.append(AISuggestion(
                id=f"empty_{criterion}_{context.mission_id}",
                type=SuggestionType.ACTION,
                priority=SuggestionPriority.HIGH,
                title=f"üöÄ Commencer avec {criterion}",
                description=f"Ajoutez votre premier √©l√©ment pour {criterion}",
                rationale="Il faut au moins un √©l√©ment pour commencer l'analyse",
                action_label="Ajouter le premier √©l√©ment",
                confidence=0.95,
                context={"step": criterion, "is_first": True}
            ))
        
        # Suggestion si peu d'√©l√©ments
        elif len(current_items) < 3:
            suggestions.append(AISuggestion(
                id=f"few_{criterion}_{context.mission_id}",
                type=SuggestionType.TIP,
                priority=SuggestionPriority.MEDIUM,
                title="üí° Enrichir votre analyse",
                description=f"Ajoutez plus d'√©l√©ments pour une analyse plus compl√®te",
                rationale="Une analyse riche n√©cessite plusieurs √©l√©ments",
                action_label="Ajouter un √©l√©ment",
                confidence=0.75,
                context={"current_count": len(current_items), "recommended_min": 3}
            ))
        
        # Suggestion de r√©vision si beaucoup d'√©l√©ments
        elif len(current_items) > 10:
            suggestions.append(AISuggestion(
                id=f"many_{criterion}_{context.mission_id}",
                type=SuggestionType.INSIGHT,
                priority=SuggestionPriority.LOW,
                title="üîç R√©viser et consolider",
                description="Vous avez beaucoup d'√©l√©ments, consid√©rez les regrouper",
                rationale="Trop d'√©l√©ments peut compliquer l'analyse",
                confidence=0.65,
                context={"current_count": len(current_items), "recommended_max": 10}
            ))
        
        return suggestions
    
    async def _generate_improvement_suggestions(
        self,
        context: WorkshopContext,
        criterion: str,
        current_data: Dict[str, Any]
    ) -> List[AISuggestion]:
        """G√©n√®re des suggestions d'am√©lioration"""
        
        suggestions = []
        current_items = current_data.get("items", [])
        
        if not current_items:
            return suggestions
        
        # Analyse de la qualit√© des descriptions
        descriptions = [item.get("description", "") for item in current_items]
        avg_length = sum(len(desc) for desc in descriptions) / len(descriptions)
        
        if avg_length < 50:
            suggestions.append(AISuggestion(
                id=f"improve_desc_{criterion}_{context.mission_id}",
                type=SuggestionType.TIP,
                priority=SuggestionPriority.MEDIUM,
                title="üìù Enrichir les descriptions",
                description="Ajoutez plus de d√©tails √† vos descriptions pour une meilleure analyse",
                rationale="Des descriptions d√©taill√©es am√©liorent la qualit√© de l'analyse",
                confidence=0.80,
                context={
                    "current_avg_length": avg_length,
                    "recommended_min": 100,
                    "improvement_needed": True
                }
            ))
        
        # V√©rification des liens manquants
        if criterion == "essential_assets":
            business_value_ids = {bv.id for bv in context.business_values}
            linked_bv_ids = {item.get("businessValueId") for item in current_items}
            
            if business_value_ids and not business_value_ids.intersection(linked_bv_ids):
                suggestions.append(AISuggestion(
                    id=f"missing_links_{criterion}_{context.mission_id}",
                    type=SuggestionType.WARNING,
                    priority=SuggestionPriority.HIGH,
                    title="‚ö†Ô∏è Liens manquants",
                    description="Vos biens essentiels ne sont pas li√©s √† vos valeurs m√©tier",
                    rationale="Les biens essentiels doivent supporter des valeurs m√©tier",
                    confidence=0.90,
                    context={"missing_links": True, "link_type": "business_value"}
                ))
        
        return suggestions
    
    def _detect_sector(self, context: WorkshopContext) -> Optional[str]:
        """D√©tecte le secteur d'activit√© bas√© sur le contexte"""
        
        # Analyse simple bas√©e sur les mots-cl√©s
        all_text = ""
        for bv in context.business_values:
            all_text += f" {bv.name} {bv.description}"
        
        all_text = all_text.lower()
        
        if any(word in all_text for word in ["banque", "finance", "cr√©dit", "transaction"]):
            return "finance"
        elif any(word in all_text for word in ["sant√©", "m√©dical", "patient", "h√¥pital"]):
            return "healthcare"
        elif any(word in all_text for word in ["production", "usine", "fabrication", "industrie"]):
            return "industry"
        elif any(word in all_text for word in ["vente", "client", "magasin", "commerce"]):
            return "retail"
        
        return None
    
    def _priority_score(self, priority: SuggestionPriority) -> int:
        """Convertit la priorit√© en score num√©rique"""
        priority_scores = {
            SuggestionPriority.CRITICAL: 4,
            SuggestionPriority.HIGH: 3,
            SuggestionPriority.MEDIUM: 2,
            SuggestionPriority.LOW: 1
        }
        return priority_scores.get(priority, 0)
