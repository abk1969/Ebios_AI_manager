#!/usr/bin/env python3
"""
üß™ TEST PHASE 2 : IA S√âMANTIQUE ET SUGGESTIONS
Test complet des nouveaux services d'analyse s√©mantique et ML
"""

import asyncio
import json
import sys
from datetime import datetime

def test_semantic_analyzer_import():
    """Test d'import de l'analyseur s√©mantique"""
    print("üß™ TEST IMPORT ANALYSEUR S√âMANTIQUE")
    print("-" * 45)
    
    try:
        from services.semantic_analyzer import SemanticAnalyzerFactory, SemanticAnalysisResult
        print("‚úÖ Import SemanticAnalyzerFactory: OK")
        
        from services.ml_suggestion_engine import MLSuggestionEngineFactory, MLAnalysisResult
        print("‚úÖ Import MLSuggestionEngineFactory: OK")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur import: {e}")
        return False

def test_semantic_analyzer_creation():
    """Test de cr√©ation de l'analyseur s√©mantique"""
    print("\nüß† TEST CR√âATION ANALYSEUR S√âMANTIQUE")
    print("-" * 45)
    
    try:
        from services.semantic_analyzer import SemanticAnalyzerFactory
        
        analyzer = SemanticAnalyzerFactory.create()
        print("‚úÖ Analyseur s√©mantique cr√©√© avec succ√®s")
        
        # Test des capacit√©s
        capabilities = analyzer.get_capabilities()
        print(f"‚úÖ Capacit√©s disponibles:")
        for cap, available in capabilities.items():
            print(f"   {available and '‚úÖ' or '‚ö†Ô∏è'} {cap}")
        
        # Test de l'√©tat
        is_ready = analyzer.is_ready()
        print(f"‚úÖ √âtat pr√™t: {is_ready}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation: {e}")
        return False

def test_ml_suggestion_engine():
    """Test du moteur de suggestions ML"""
    print("\nü§ñ TEST MOTEUR SUGGESTIONS ML")
    print("-" * 35)
    
    try:
        from services.ml_suggestion_engine import MLSuggestionEngineFactory
        
        ml_engine = MLSuggestionEngineFactory.create()
        print("‚úÖ Moteur ML cr√©√© avec succ√®s")
        
        # Test des capacit√©s
        capabilities = ml_engine.get_capabilities()
        print(f"‚úÖ Capacit√©s ML:")
        for cap, available in capabilities.items():
            print(f"   {available and '‚úÖ' or '‚ö†Ô∏è'} {cap}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur moteur ML: {e}")
        return False

async def test_semantic_analysis_workflow():
    """Test du workflow d'analyse s√©mantique complet"""
    print("\nüß† TEST WORKFLOW ANALYSE S√âMANTIQUE")
    print("-" * 45)
    
    try:
        from services.semantic_analyzer import SemanticAnalyzerFactory
        
        # Cr√©er l'analyseur
        analyzer = SemanticAnalyzerFactory.create()
        print("‚úÖ Analyseur cr√©√©")
        
        # Donn√©es de test EBIOS RM
        test_elements = [
            {
                "id": "bv1",
                "name": "Facturation clients",
                "description": "Processus de facturation et d'encaissement des cr√©ances clients",
                "category": "business_values"
            },
            {
                "id": "bv2", 
                "name": "Relation client",
                "description": "Maintien et d√©veloppement de la relation avec la client√®le",
                "category": "business_values"
            },
            {
                "id": "ea1",
                "name": "Base de donn√©es clients",
                "description": "Syst√®me de gestion des informations clients et prospects",
                "category": "essential_assets"
            },
            {
                "id": "ea2",
                "name": "Donn√©es de facturation",
                "description": "Informations relatives aux factures et paiements clients",
                "category": "essential_assets"
            },
            {
                "id": "sa1",
                "name": "Serveur de base de donn√©es",
                "description": "Infrastructure technique h√©bergeant les donn√©es",
                "category": "supporting_assets"
            }
        ]
        
        print(f"‚úÖ Donn√©es de test pr√©par√©es: {len(test_elements)} √©l√©ments")
        
        # Test d'analyse s√©mantique compl√®te
        result = await analyzer.analyze_ebios_elements(
            test_elements, 
            analysis_type="comprehensive"
        )
        
        print(f"‚úÖ Analyse s√©mantique r√©ussie")
        print(f"   Score de coh√©rence: {result.coherence_score:.2f}")
        print(f"   Clusters d√©tect√©s: {len(result.clusters)}")
        print(f"   Incoh√©rences: {len(result.inconsistencies)}")
        print(f"   Suggestions: {len(result.suggestions)}")
        
        if result.clusters:
            print("   Clusters trouv√©s:")
            for cluster in result.clusters:
                print(f"     - {cluster['theme']}: {len(cluster['elements'])} √©l√©ments")
        
        if result.inconsistencies:
            print("   Incoh√©rences d√©tect√©es:")
            for inc in result.inconsistencies[:2]:  # Limiter l'affichage
                print(f"     - {inc['type']}: {inc['description'][:50]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur workflow s√©mantique: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_ml_suggestions_workflow():
    """Test du workflow de suggestions ML"""
    print("\nü§ñ TEST WORKFLOW SUGGESTIONS ML")
    print("-" * 40)
    
    try:
        from services.ml_suggestion_engine import MLSuggestionEngineFactory
        
        # Cr√©er le moteur ML
        ml_engine = MLSuggestionEngineFactory.create()
        print("‚úÖ Moteur ML cr√©√©")
        
        # Donn√©es de test Workshop 1
        workshop_data = {
            "business_values": [
                {
                    "id": "bv1",
                    "name": "Facturation",
                    "description": "Processus de facturation clients"
                }
            ],
            "essential_assets": [
                {
                    "id": "ea1",
                    "name": "Base clients",
                    "description": "Donn√©es clients"
                },
                {
                    "id": "ea2",
                    "name": "Syst√®me facturation",
                    "description": "Application de facturation"
                }
            ],
            "supporting_assets": [],
            "dreaded_events": []
        }
        
        context = {
            "user_experience": 0.6,
            "domain_complexity": 0.7,
            "time_spent": 1800  # 30 minutes
        }
        
        print(f"‚úÖ Donn√©es de test pr√©par√©es")
        
        # Test de g√©n√©ration de suggestions ML
        result = await ml_engine.generate_ml_suggestions(workshop_data, context)
        
        print(f"‚úÖ Suggestions ML g√©n√©r√©es")
        print(f"   Score de compl√©tion: {result.completion_score:.2f}")
        print(f"   Confiance du mod√®le: {result.model_confidence:.2f}")
        print(f"   Suggestions: {len(result.suggestions)}")
        print(f"   √âvaluation des risques: {result.risk_assessment.get('overall_risk', 'N/A')}")
        
        if result.suggestions:
            print("   Suggestions g√©n√©r√©es:")
            for suggestion in result.suggestions[:3]:  # Limiter l'affichage
                print(f"     - {suggestion.type}: {suggestion.content[:60]}...")
                print(f"       Confiance: {suggestion.confidence:.2f}, Priorit√©: {suggestion.priority}")
        
        if result.quality_predictions:
            print("   Pr√©dictions de qualit√©:")
            for metric, value in result.quality_predictions.items():
                print(f"     - {metric}: {value:.2f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur workflow ML: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_orchestrator_integration():
    """Test d'int√©gration avec l'orchestrateur principal"""
    print("\nüéº TEST INT√âGRATION ORCHESTRATEUR")
    print("-" * 40)
    
    try:
        from services.workshop1_orchestrator import Workshop1OrchestratorFactory
        
        # Cr√©er l'orchestrateur avec les nouveaux services
        orchestrator = Workshop1OrchestratorFactory.create()
        print("‚úÖ Orchestrateur cr√©√©")
        
        # V√©rifier les nouvelles capacit√©s
        capabilities = orchestrator.get_capabilities()
        print("‚úÖ Nouvelles capacit√©s d√©tect√©es:")
        
        advanced_capabilities = [
            "advanced_ai_services",
            "semantic_transformers_available", 
            "semantic_sklearn_available",
            "ml_xgboost_available",
            "ml_sklearn_available"
        ]
        
        for cap in advanced_capabilities:
            if cap in capabilities:
                status = "‚úÖ" if capabilities[cap] else "‚ö†Ô∏è"
                print(f"   {status} {cap}: {capabilities[cap]}")
        
        # Test d'orchestration compl√®te avec IA avanc√©e
        mission_id = "test_mission_phase2"
        workshop_data = {
            "business_values": [
                {
                    "id": "bv1",
                    "name": "Continuit√© d'activit√©",
                    "description": "Maintien des op√©rations critiques de l'entreprise"
                },
                {
                    "id": "bv2",
                    "name": "Conformit√© r√©glementaire", 
                    "description": "Respect des obligations l√©gales et r√©glementaires"
                }
            ],
            "essential_assets": [
                {
                    "id": "ea1",
                    "name": "Donn√©es personnelles clients",
                    "description": "Informations sensibles des clients soumises au RGPD"
                },
                {
                    "id": "ea2",
                    "name": "Syst√®me d'information financier",
                    "description": "Applications de gestion financi√®re et comptable"
                }
            ],
            "supporting_assets": [
                {
                    "id": "sa1",
                    "name": "Infrastructure r√©seau",
                    "description": "√âquipements r√©seau et t√©l√©communications"
                }
            ],
            "dreaded_events": [],
            "current_step": "supporting-assets"
        }
        
        user_context = {
            "user_experience": 0.7,
            "domain_complexity": 0.8,
            "session_count": 3,
            "total_time_spent": 3600
        }
        
        print("‚úÖ Test d'orchestration avanc√©e...")
        
        # Orchestration compl√®te avec IA s√©mantique et ML
        result = await orchestrator.orchestrate_workshop_analysis(
            mission_id=mission_id,
            workshop_data=workshop_data,
            user_context=user_context
        )
        
        print(f"‚úÖ Orchestration avanc√©e r√©ussie")
        print(f"   Mission: {result.mission_id}")
        print(f"   Compl√©tion: {result.completion_percentage:.1f}%")
        print(f"   Score qualit√©: {result.quality_score:.1f}")
        print(f"   Score coh√©rence: {result.coherence_score:.1f}")
        print(f"   Conformit√© EBIOS: {result.ebios_compliance:.1f}")
        print(f"   Suggestions totales: {len(result.suggestions)}")
        print(f"   √âl√©ments analys√©s: {len(result.elements)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur int√©gration orchestrateur: {e}")
        import traceback
        traceback.print_exc()
        return False

async def run_phase2_tests():
    """Ex√©cute tous les tests de la Phase 2"""
    print("üß™ TESTS PHASE 2 : IA S√âMANTIQUE ET SUGGESTIONS")
    print("=" * 70)
    
    tests = [
        ("Import analyseur s√©mantique", test_semantic_analyzer_import),
        ("Cr√©ation analyseur s√©mantique", test_semantic_analyzer_creation),
        ("Moteur suggestions ML", test_ml_suggestion_engine),
        ("Workflow analyse s√©mantique", test_semantic_analysis_workflow),
        ("Workflow suggestions ML", test_ml_suggestions_workflow),
        ("Int√©gration orchestrateur", test_orchestrator_integration)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüîç Test: {test_name}")
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            
            if result:
                print(f"‚úÖ {test_name}: R√âUSSI")
                passed += 1
            else:
                print(f"‚ùå {test_name}: √âCHOU√â")
                
        except Exception as e:
            print(f"‚ùå {test_name}: ERREUR - {e}")
    
    # Rapport final
    print("\n" + "=" * 70)
    print("üìä RAPPORT FINAL PHASE 2 : IA S√âMANTIQUE ET SUGGESTIONS")
    print("=" * 70)
    
    print(f"‚úÖ Tests r√©ussis: {passed}/{total}")
    print(f"‚ùå Tests √©chou√©s: {total - passed}/{total}")
    
    if passed == total:
        print("\nüéâ PHASE 2 COMPL√àTEMENT R√âUSSIE!")
        print("‚úÖ L'analyse s√©mantique avanc√©e fonctionne parfaitement")
        print("ü§ñ Le moteur de suggestions ML est op√©rationnel")
        print("üß† L'int√©gration avec Transformers et XGBoost est r√©ussie")
        print("üéº L'orchestration avanc√©e avec IA s√©mantique + ML fonctionne")
        print("\nüöÄ PR√äT POUR LA PHASE 3 : RAG ET BASE DE CONNAISSANCES!")
    elif passed >= total - 1:
        print("\n‚úÖ PHASE 2 MAJORITAIREMENT R√âUSSIE")
        print("üîß Quelques ajustements mineurs n√©cessaires")
        print("üöÄ Pr√™t pour continuer vers la Phase 3")
    else:
        print("\n‚ö†Ô∏è PHASE 2 PARTIELLEMENT R√âUSSIE")
        print("üîß V√©rifiez les erreurs ci-dessus")
    
    return passed >= total - 1

if __name__ == "__main__":
    success = asyncio.run(run_phase2_tests())
    sys.exit(0 if success else 1)
