#!/usr/bin/env python3
"""
üß™ SERVEUR DE TEST POUR INT√âGRATION FRONTEND
Test des nouveaux endpoints avec les services IA avanc√©s
"""

import asyncio
import json
from datetime import datetime
from typing import Dict, Any

# Test simple sans FastAPI pour √©viter les probl√®mes d'import
async def test_orchestration_endpoint():
    """Test de l'endpoint d'orchestration avanc√©e"""
    print("üß™ TEST ENDPOINT ORCHESTRATION AVANC√âE")
    print("-" * 50)
    
    try:
        # Import des services
        from services.workshop1_orchestrator import Workshop1OrchestratorFactory
        from services.agent_memory_service import AgentMemoryServiceFactory
        
        # Cr√©er les services
        orchestrator = Workshop1OrchestratorFactory.create()
        memory_service = AgentMemoryServiceFactory.create()
        
        print("‚úÖ Services cr√©√©s")
        
        # Simuler une requ√™te frontend
        request_data = {
            "mission_id": "test_frontend_integration",
            "business_values": [
                {
                    "id": "bv1",
                    "name": "Continuit√© d'activit√©",
                    "description": "Maintien des op√©rations critiques de l'entreprise en cas d'incident"
                },
                {
                    "id": "bv2", 
                    "name": "Protection des donn√©es",
                    "description": "S√©curisation des informations sensibles et personnelles"
                }
            ],
            "essential_assets": [
                {
                    "id": "ea1",
                    "name": "Base de donn√©es clients",
                    "description": "Syst√®me contenant les informations clients et prospects"
                },
                {
                    "id": "ea2",
                    "name": "Syst√®me de sauvegarde",
                    "description": "Infrastructure de sauvegarde et de r√©cup√©ration des donn√©es"
                },
                {
                    "id": "ea3",
                    "name": "Applications m√©tier",
                    "description": "Logiciels critiques pour les processus d'affaires"
                }
            ],
            "supporting_assets": [
                {
                    "id": "sa1",
                    "name": "Serveurs de production",
                    "description": "Infrastructure serveur h√©bergeant les applications"
                },
                {
                    "id": "sa2",
                    "name": "R√©seau informatique",
                    "description": "Infrastructure r√©seau et t√©l√©communications"
                }
            ],
            "dreaded_events": [
                {
                    "id": "de1",
                    "name": "Panne syst√®me majeure",
                    "description": "Arr√™t prolong√© des syst√®mes informatiques critiques"
                }
            ],
            "current_step": "dreaded-events"
        }
        
        print("‚úÖ Donn√©es de test pr√©par√©es")
        
        # Pr√©parer les donn√©es pour l'orchestrateur
        workshop_data = {
            "business_values": request_data["business_values"],
            "essential_assets": request_data["essential_assets"],
            "supporting_assets": request_data["supporting_assets"],
            "dreaded_events": request_data["dreaded_events"],
            "current_step": request_data["current_step"]
        }
        
        # R√©cup√©rer le contexte utilisateur depuis la m√©moire
        user_context = await memory_service.retrieve_user_context(
            user_id="frontend_user",
            mission_id=request_data["mission_id"]
        )
        
        print("‚úÖ Contexte utilisateur r√©cup√©r√©")
        
        # Orchestration compl√®te avec IA avanc√©e
        result = await orchestrator.orchestrate_workshop_analysis(
            mission_id=request_data["mission_id"],
            workshop_data=workshop_data,
            user_context=user_context.__dict__ if user_context else None
        )
        
        # Simuler la r√©ponse de l'endpoint
        response = {
            "status": "success",
            "mission_id": request_data["mission_id"],
            "orchestration_result": {
                "mission_id": result.mission_id,
                "completion_percentage": result.completion_percentage,
                "quality_score": result.quality_score,
                "coherence_score": result.coherence_score,
                "ebios_compliance": result.ebios_compliance,
                "elements_count": len(result.elements),
                "suggestions_count": len(result.suggestions),
                "analysis_timestamp": result.analysis_timestamp.isoformat()
            },
            "capabilities_used": orchestrator.get_capabilities(),
            "timestamp": datetime.now().isoformat()
        }
        
        print("‚úÖ Orchestration r√©ussie")
        print(f"   Mission: {result.mission_id}")
        print(f"   Compl√©tion: {result.completion_percentage:.1f}%")
        print(f"   Score qualit√©: {result.quality_score:.1f}")
        print(f"   Score coh√©rence: {result.coherence_score:.1f}")
        print(f"   Conformit√© EBIOS: {result.ebios_compliance:.1f}")
        print(f"   Suggestions: {len(result.suggestions)}")
        
        # Afficher les capacit√©s utilis√©es
        print("\n‚úÖ Capacit√©s IA utilis√©es:")
        capabilities = orchestrator.get_capabilities()
        for cap, available in capabilities.items():
            if available and cap.startswith(('semantic_', 'ml_', 'advanced_')):
                print(f"   ‚úÖ {cap}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test orchestration: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_memory_endpoints():
    """Test des endpoints de m√©moire"""
    print("\nüß† TEST ENDPOINTS M√âMOIRE")
    print("-" * 30)
    
    try:
        from services.agent_memory_service import AgentMemoryServiceFactory
        
        memory_service = AgentMemoryServiceFactory.create()
        print("‚úÖ Service m√©moire cr√©√©")
        
        # Test de stockage m√©moire
        mission_id = "test_frontend_memory"
        agent_id = "workshop1_frontend_agent"
        session_id = "frontend_session_123"
        
        # Simuler stockage depuis frontend
        memory_id = await memory_service.store_memory(
            mission_id=mission_id,
            agent_id=agent_id,
            session_id=session_id,
            memory_type="user_interaction",
            content={
                "action": "add_business_value",
                "element_id": "bv1",
                "user_input": "Continuit√© d'activit√©",
                "timestamp": datetime.now().isoformat(),
                "frontend_context": {
                    "current_step": "business-values",
                    "progress": 25
                }
            },
            priority=2,
            expires_in_hours=24
        )
        
        print(f"‚úÖ M√©moire stock√©e: {memory_id}")
        
        # Test de r√©cup√©ration m√©moire
        memories = await memory_service.retrieve_memory(
            mission_id=mission_id,
            agent_id=agent_id,
            session_id=session_id,
            memory_type="user_interaction",
            limit=10
        )
        
        print(f"‚úÖ M√©moires r√©cup√©r√©es: {len(memories)}")
        
        if memories:
            memory = memories[0]
            print(f"   ID: {memory.id}")
            print(f"   Type: {memory.memory_type}")
            print(f"   Contenu: {memory.content.get('action', 'N/A')}")
            print(f"   Priorit√©: {memory.priority}")
        
        # Simuler la r√©ponse de l'endpoint
        response = {
            "status": "success",
            "memory_id": memory_id,
            "mission_id": mission_id,
            "agent_id": agent_id,
            "memories_retrieved": len(memories),
            "timestamp": datetime.now().isoformat()
        }
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test m√©moire: {e}")
        return False

async def test_semantic_analysis_endpoint():
    """Test de l'endpoint d'analyse s√©mantique"""
    print("\nüß† TEST ENDPOINT ANALYSE S√âMANTIQUE")
    print("-" * 40)
    
    try:
        from services.semantic_analyzer import SemanticAnalyzerFactory
        
        analyzer = SemanticAnalyzerFactory.create()
        print("‚úÖ Analyseur s√©mantique cr√©√©")
        
        # Simuler des donn√©es depuis le frontend
        frontend_elements = [
            {
                "id": "bv1",
                "name": "Continuit√© d'activit√©",
                "description": "Maintien des op√©rations critiques de l'entreprise",
                "category": "business_values"
            },
            {
                "id": "bv2",
                "name": "Continuit√© des services",
                "description": "Assurer la disponibilit√© continue des services clients",
                "category": "business_values"
            },
            {
                "id": "ea1",
                "name": "Syst√®me de gestion",
                "description": "Application de gestion des processus m√©tier",
                "category": "essential_assets"
            },
            {
                "id": "ea2",
                "name": "Base de donn√©es op√©rationnelle",
                "description": "Donn√©es critiques pour les op√©rations quotidiennes",
                "category": "essential_assets"
            }
        ]
        
        print(f"‚úÖ Donn√©es frontend pr√©par√©es: {len(frontend_elements)} √©l√©ments")
        
        # Analyse s√©mantique
        result = await analyzer.analyze_ebios_elements(
            frontend_elements,
            analysis_type="comprehensive"
        )
        
        # Simuler la r√©ponse de l'endpoint
        response = {
            "status": "success",
            "semantic_analysis": {
                "coherence_score": result.coherence_score,
                "clusters_count": len(result.clusters),
                "inconsistencies_count": len(result.inconsistencies),
                "suggestions_count": len(result.suggestions),
                "clusters": result.clusters,
                "inconsistencies": result.inconsistencies,
                "suggestions": result.suggestions
            },
            "timestamp": datetime.now().isoformat()
        }
        
        print(f"‚úÖ Analyse s√©mantique r√©ussie")
        print(f"   Score coh√©rence: {result.coherence_score:.2f}")
        print(f"   Clusters: {len(result.clusters)}")
        print(f"   Incoh√©rences: {len(result.inconsistencies)}")
        print(f"   Suggestions: {len(result.suggestions)}")
        
        if result.clusters:
            print("   Clusters d√©tect√©s:")
            for cluster in result.clusters:
                print(f"     - {cluster['theme']}: {len(cluster['elements'])} √©l√©ments")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test analyse s√©mantique: {e}")
        return False

async def test_ml_suggestions_endpoint():
    """Test de l'endpoint de suggestions ML"""
    print("\nü§ñ TEST ENDPOINT SUGGESTIONS ML")
    print("-" * 35)
    
    try:
        from services.ml_suggestion_engine import MLSuggestionEngineFactory
        
        ml_engine = MLSuggestionEngineFactory.create()
        print("‚úÖ Moteur ML cr√©√©")
        
        # Simuler des donn√©es depuis le frontend
        frontend_workshop_data = {
            "business_values": [
                {
                    "id": "bv1",
                    "name": "Continuit√© d'activit√©",
                    "description": "Maintien des op√©rations critiques"
                }
            ],
            "essential_assets": [
                {
                    "id": "ea1",
                    "name": "Syst√®me principal",
                    "description": "Application critique"
                },
                {
                    "id": "ea2",
                    "name": "Base de donn√©es",
                    "description": "Donn√©es op√©rationnelles"
                }
            ],
            "supporting_assets": [],
            "dreaded_events": []
        }
        
        frontend_context = {
            "user_experience": 0.7,
            "domain_complexity": 0.6,
            "time_spent": 1200,
            "session_count": 2
        }
        
        print("‚úÖ Donn√©es frontend pr√©par√©es")
        
        # G√©n√©ration de suggestions ML
        result = await ml_engine.generate_ml_suggestions(
            frontend_workshop_data,
            frontend_context
        )
        
        # Simuler la r√©ponse de l'endpoint
        response = {
            "status": "success",
            "ml_analysis": {
                "completion_score": result.completion_score,
                "model_confidence": result.model_confidence,
                "suggestions_count": len(result.suggestions),
                "risk_level": result.risk_assessment.get("overall_risk", "unknown"),
                "quality_predictions": result.quality_predictions,
                "suggestions": [
                    {
                        "id": suggestion.id,
                        "type": suggestion.type,
                        "content": suggestion.content,
                        "confidence": suggestion.confidence,
                        "priority": suggestion.priority,
                        "category": suggestion.category
                    }
                    for suggestion in result.suggestions
                ]
            },
            "timestamp": datetime.now().isoformat()
        }
        
        print(f"‚úÖ Suggestions ML g√©n√©r√©es")
        print(f"   Score compl√©tion: {result.completion_score:.2f}")
        print(f"   Confiance mod√®le: {result.model_confidence:.2f}")
        print(f"   Suggestions: {len(result.suggestions)}")
        print(f"   Niveau de risque: {result.risk_assessment.get('overall_risk', 'N/A')}")
        
        if result.suggestions:
            print("   Suggestions g√©n√©r√©es:")
            for suggestion in result.suggestions[:3]:
                print(f"     - {suggestion.type}: {suggestion.content[:50]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test suggestions ML: {e}")
        return False

async def run_frontend_integration_tests():
    """Ex√©cute tous les tests d'int√©gration frontend"""
    print("üß™ TESTS INT√âGRATION FRONTEND AVEC IA AVANC√âE")
    print("=" * 60)
    
    tests = [
        ("Endpoint orchestration avanc√©e", test_orchestration_endpoint),
        ("Endpoints m√©moire", test_memory_endpoints),
        ("Endpoint analyse s√©mantique", test_semantic_analysis_endpoint),
        ("Endpoint suggestions ML", test_ml_suggestions_endpoint)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüîç Test: {test_name}")
        try:
            result = await test_func()
            if result:
                print(f"‚úÖ {test_name}: R√âUSSI")
                passed += 1
            else:
                print(f"‚ùå {test_name}: √âCHOU√â")
        except Exception as e:
            print(f"‚ùå {test_name}: ERREUR - {e}")
    
    # Rapport final
    print("\n" + "=" * 60)
    print("üìä RAPPORT INT√âGRATION FRONTEND")
    print("=" * 60)
    
    print(f"‚úÖ Tests r√©ussis: {passed}/{total}")
    print(f"‚ùå Tests √©chou√©s: {total - passed}/{total}")
    
    if passed == total:
        print("\nüéâ INT√âGRATION FRONTEND PARFAITE!")
        print("‚úÖ Tous les endpoints IA avanc√©s fonctionnent")
        print("üß† L'analyse s√©mantique est accessible depuis le frontend")
        print("ü§ñ Les suggestions ML sont int√©gr√©es")
        print("üíæ La m√©moire persistante fonctionne")
        print("üéº L'orchestration avanc√©e est op√©rationnelle")
        print("\nüöÄ PR√äT POUR D√âMARRER REDIS ET PHASE 3!")
    else:
        print("\n‚ö†Ô∏è PROBL√àMES D'INT√âGRATION D√âTECT√âS")
        print("üîß V√©rifiez les erreurs ci-dessus")
    
    return passed == total

if __name__ == "__main__":
    success = asyncio.run(run_frontend_integration_tests())
    print(f"\nüéØ R√©sultat final: {'SUCC√àS' if success else '√âCHEC'}")
